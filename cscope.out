cscope 15 $HOME/androgyn-svn/mp3stream               0000452591
	@AudioCard.cc

1 
	~<sys/ty≥s.h
>

2 
	~<sys/°©.h
>

3 
	~<sys/io˘l.h
>

4 
	~<sys/time.h
>

6 
	~<f˙é.h
>

7 
	~<°dio.h
>

8 
	~<time.h
>

10 
	~<as£π.h
>

11 
	~<°rög.h
>

12 
	~<î∫o.h
>

13 
	~<uni°d.h
>

15 
	~<löux/soundˇrd.h
>

17 
	~<°rög
>

19 
usög
 
«me•a˚
 
	g°d
;

21 
	~"AudioC¨d.h
"

23 
	gAudioC¨d
::
	$AudioC¨d
(
boﬁ
 
fuŒDu∂ex
, boﬁ 
°îeo
,

24 
ßm∂eR©e
, 
°rög
 
∑th
) :

25 
	`fuŒDu∂ex
(
fuŒDu∂ex
), 
	`°îeo
(
°îeo
), 
	`ßm∂eR©e
(
ßm∂eR©e
), 
	$∑th
(
∑th
) {

26 
fd
 = 
	`›í
(
∑th
.
	`c_°r
(), 
O_RDWR
);

27 i‡(
fd
 < 0)

28 
throw
 
	`AudioEº‹
("CouldÇŸ o≥¿soundˇrd (\"" + 
∑th
 + "\"): " + 
	`°rög
(
	`°ªº‹
(
î∫o
)));

30 
	`SëF‹m©
();

31 
	`SëFuŒDu∂ex
();

32 
	`SëSãªo
();

33 
	`SëSam∂eR©e
();

34 
	}
}

36 
	gAudioC¨d
::~
	$AudioC¨d
() {

37 i‡(
fd
 >= 0) {

38 
ªt
;

40 
ªt
 = 
	`˛o£
(
fd
);

41 i‡(
ªt
 < 0)

42 
throw
 
	`AudioEº‹
("CouldÇŸ clo£ soundˇrd (˛o£): " + 
	`°rög
(
	`°ªº‹
(
î∫o
)));

43 
fd
 = -1;

45 
	}
}

47 
	gAudioC¨d
::
	$SëFuŒDu∂ex
() {

48 
	`as£π
(
fd
 > 0);

50 
audio_ˇps
;

51 
ªt
;

52 i‡(
fuŒDu∂ex
) {

53 
ªt
 = 
	`io˘l
(
fd
, 
SNDCTL_DSP_GETCAPS
, &
audio_ˇps
);

54 i‡(
ªt
 < 0)

55 
throw
 
	`AudioEº‹
("CouldÇŸ gë SND c≠abûôõ†(io˘l): " + 
	`°rög
(
	`°ªº‹
(
î∫o
)));

57 i‡(!(
audio_ˇps
 & 
DSP_CAP_DUPLEX
))

58 
throw
 
	`AudioEº‹
("Soundcard doesÇot support fullduplex");

60 
ªt
 = 
	`io˘l
(
fd
, 
SNDCTL_DSP_SETDUPLEX
, 0);

61 i‡(
ªt
 < 0)

62 
throw
 
	`AudioEº‹
("CouldÇŸ së fuŒDu∂ex (io˘l): " + 
	`°rög
(
	`°ªº‹
(
î∫o
)));

64 
	}
}

66 
	gAudioC¨d
::
	$SëF‹m©
() {

67 
	`as£π
(
fd
 > 0);

69 
f‹m©
;

70 
ªt
 = 
	`io˘l
(
fd
, 
SNDCTL_DSP_GETFMTS
, &
f‹m©
);

71 i‡(
ªt
 < 0)

72 
throw
 
	`AudioEº‹
("CouldÇŸ gë suµ‹ãd sound f‹m©†(io˘l): " + 
	`°rög
(
	`°ªº‹
(
î∫o
)));

74 i‡(!(
f‹m©
 & 
AFMT_S16_LE
))

75 
throw
 
	`AudioEº‹
("Soundcard doesÇot support 16 bitÜittle-endian mode");

77 
f‹m©
 = 
AFMT_S16_LE
;

78 
ªt
 = 
	`io˘l
(
fd
, 
SNDCTL_DSP_SETFMT
, &
f‹m©
);

79 i‡(
ªt
 < 0)

80 
throw
 
	`AudioEº‹
("CouldÇot set soundcard formatÅo 16 bitÜittle-endian (ioctl): " +

81 
	`°rög
(
	`°ªº‹
(
î∫o
)));

82 
	}
}

84 
	gAudioC¨d
::
	$SëSãªo
() {

85 
	`as£π
(
fd
 > 0);

87 
°îeo_¨g
 = 
°îeo
 ? 1 : 0;

88 
ªt
 = 
	`io˘l
(
fd
, 
SNDCTL_DSP_STEREO
, &
°îeo_¨g
);

89 i‡(
ªt
 < 0)

90 
throw
 
	`AudioEº‹
("CouldÇot set stereo setting (ioctl): " +

91 
	`°rög
(
	`°ªº‹
(
î∫o
)));

93 
	}
}

94 
	gAudioC¨d
::
	$SëSam∂eR©e
() {

95 
	`as£π
(
fd
 > 0);

97 
•ìd
 = 
ßm∂eR©e
;

98 
ªt
 = 
	`io˘l
(
fd
, 
SNDCTL_DSP_SPEED
, &
•ìd
);

99 i‡(
ªt
 < 0)

100 
throw
 
	`AudioEº‹
("CouldÇot set sampleÑate (ioctl): " +

101 
	`°rög
(
	`°ªº‹
(
î∫o
)));

102 
	}
}

104 
	gAudioC¨d
::
	$Ród
(
buf
[
øwD©aBlockSize
]) {

105 
	`as£π
(
fd
 > 0);

107 
ªt
 = 
	`ªad
(
fd
, 
buf
, 
øwD©aBlockSize
);

108 i‡((
ªt
 < 0Ë|| ((Ïë !
øwD©aBlockSize
))

109 
throw
 
	`AudioEº‹
("CouldÇotÑead fromÅhe soundcard (read): " +

110 
	`°rög
(
	`°ªº‹
(
î∫o
)));

111 i‡(
fuŒDu∂ex
) {

112 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
øwD©aBlockSize
);

113 i‡((
ªt
 < 0Ë|| ((Ïë !
øwD©aBlockSize
))

114 
throw
 
	`AudioEº‹
("CouldÇot writeÅoÅhe soundcard (write): " +

115 
	`°rög
(
	`°ªº‹
(
î∫o
)));

117 
	}
}

	@AudioCard.h

1 #i‚de‡
AUDIOCARD_H__


2 
	#AUDIOCARD_H__


	)

4 
	~<°rög
>

6 
	~"Eº‹.h
"

8 c⁄° 
	gøwD©aBlockSize
 = 4096;

10 ˛as†
	cAudioEº‹
 : 
public
 
Eº‹
 {

11 
public
:

12 
AudioEº‹
(
°d
::
°rög
 
msg
Ë: 
	$Eº‹
(
msg
) { }

13 
vútuÆ
 ~
	$AudioEº‹
(Ë{ 
	}
}

16 ˛as†
	cAudioC¨d
 {

17 
	m¥Ÿe˘ed
:

18 
fd
;

19 
boﬁ
 
	mfuŒDu∂ex
;

20 
boﬁ
 
	m°îeo
;

21 
	mßm∂eR©e
;

22 
	m°d
::
°rög
 
∑th
;

24 
SëFuŒDu∂ex
();

25 
SëF‹m©
();

26 
SëSam∂eR©e
();

27 
SëSãªo
();

29 
	mpublic
:

30 
AudioC¨d
(
boﬁ
 
fuŒDu∂ex
 = 
åue
, boﬁ 
°îeo
 =Årue,

31 
ßm∂eR©e
 = 44100, 
°d
::
°rög
 
∑th
 = "/dev/dsp");

32 ~
AudioC¨d
();

34 
boﬁ
 
	$gëFuŒDu∂ex
() const {

35  
fuŒDu∂ex
;

38 
boﬁ
 
	$gëSãªo
() const {

39  
°îeo
;

40 
	}
}

42 
	$gëSam∂eR©e
() const {

43  
ßm∂eR©e
;

44 
	}
}

46 
Ród
(
buf
[
øwD©aBlockSize
]);

	@Error.h

1 #i‚de‡
ERROR_H__


2 
	#ERROR_H__


	)

4 
	~<°rög
>

6 ˛as†
	cEº‹
 {

7 
	m¥Ÿe˘ed
:

8 
°d
::
°rög
 
îr‹Mesßge
;

10 
	mpublic
:

11 
Eº‹
(
°d
::
°rög
 
msg
Ë: 
	$îr‹Mesßge
(
msg
) { }

12 
vútuÆ
 ~
	$Eº‹
(Ë{ 
	}
}

14 
°d
::
°rög
 
	$gëMesßge
(Ë{  
îr‹Mesßge
; 
	}
}

	@LameEncoder.cc

1 
	~"LameEncodî.h
"

3 
usög
 
«me•a˚
 
	g°d
;

5 
	gLameEncodî
::
	$LameEncodî
(c⁄° 
AudioC¨d
 &
audioC¨d
, 
bôøã
,

6 
boﬁ
 
bI¡îÀaved
, 
quÆôy
) :

7 
	`gf
(
NULL
), 
	$bSw≠Byãs
(
bSw≠Byãs
) {

8 
gf
 = 
	`œme_öô
();

9 i‡(
gf
 =
NULL
)

10 
throw
 
	`LameEº‹
("CouldÇot initializeÜameÜibrary");

12 
	`œme_£t_num_ch™√ls
(
gf
, 
audioC¨d
.
	`gëSãªo
() ? 2 : 1);

13 
	`œme_£t_ö_ßm∂î©e
(
gf
, 
audioC¨d
.
	`gëSam∂eR©e
());

14 
	`œme_£t_quÆôy
(
gf
, 
quÆôy
);

15 
	`œme_£t_mode
(
gf
, 
audioC¨d
.
	`gëSãªo
(Ë? 
STEREO
 : 
MONO
);

16 
	`œme_£t_bøã
(
gf
, 
bôøã
);

18 
ªt
 = 
	`œme_öô_∑øms
(
gf
);

19 i‡(
ªt
 < 0)

20 
throw
 
	`LameEº‹
("CouldÇot initializeádditionalsÖarams forÜame");

21 
	}
}

23 
	gLameEncodî
::~
	$LameEncodî
() {

24 i‡(
gf
 !
NULL
)

25 
	`œme_˛o£
(
gf
);

26 
	}
}

28 
	gLameEncodî
::
	$EncodeBuf„r
(
öput
[],

29 
öputSize
,

30 
ouçut
[],

31 
ouçutSize
) {

32 
ªt
;

34 i‡(
gf
 =
NULL
)

35 
throw
 
	`LameEº‹
("LameÉncoderÇot initialized");

37 
numSam∂es
 = 
öputSize
 / 2 / 
	`œme_gë_num_ch™√ls
(
gf
);

38 
sBuf
[
numSam∂es
];

39 
i
 = 0; i < 
numSam∂es
; i++) {

40 i‡(
bSw≠Byãs
)

41 
sBuf
[
i
] = (
öput
[i*2] & 0xFF) | ((input[i*2+1] & 0xFF) << 8);

43 
sBuf
[
i
] = (
öput
[i*2+1] & 0xFF) | ((input[i*2] & 0xFF) << 8);

46 
	`œme_ícode_buf„r_öãæóved
(
gf
, 
sBuf
, 
numSam∂es
,

47 
ouçut
, 
ouçutSize
);

49 i‡(
ªt
 < 0) {

50 
ªt
) {

52 
throw
 
	`LameEº‹
("mp3buf wasÅoo small");

54 
throw
 
	`LameEº‹
("malloc()Öroblem");

56 
throw
 
	`LameEº‹
("lame_init_param()Çot called");

58 
throw
 
	`LameEº‹
("psychoacousticsÖroblems");

60 
throw
 
	`LameEº‹
("UnknownÉrror");

64  
ªt
;

65 
	}
}

	@LameEncoder.h

1 #i‚de‡
LAME_ENCODER_H__


2 
	#LAME_ENCODER_H__


	)

4 
	~<œme/œme.h
>

5 
	~<°rög
>

7 
	~"Eº‹.h
"

8 
	~"AudioC¨d.h
"

10 ˛as†
	cLameEº‹
 : 
public
 
Eº‹
 {

11 
public
:

12 
LameEº‹
(
°d
::
°rög
 
msg
Ë: 
	$Eº‹
(
msg
) { }

13 
vútuÆ
 ~
	$LameEº‹
(Ë{ 
	}
}

16 ˛as†
	cLameEncodî
 {

17 
	m¥Ÿe˘ed
:

18 
œme_globÆ_Êags
 *
gf
;

19 
boﬁ
 
	mbSw≠Byãs
;

21 
	mpublic
:

22 
LameEncodî
(c⁄° 
AudioC¨d
 &
ˇrd
,

23 
bôøã
 = 128,

24 
boﬁ
 
bSw≠Byãs
 = 
åue
,

25 
quÆôy
 = 5);

26 ~
LameEncodî
();

28 
EncodeBuf„r
(
öput
[],

29 
öputSize
,

30 
ouçut
[],

31 
ouçutSize
);

	@Streamer.cc

1 
	~<°rög
>

2 
	~<s°ªam
>

3 
usög
 
«me•a˚
 
	g°d
;

5 
	~<sys/sockë.h
>

6 
	~<√töë/ö.h
>

7 
	~<¨∑/öë.h
>

9 
	~<√tdb.h
>

10 
	~<î∫o.h
>

11 
	~<f˙é.h
>

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

15 
	~<as£π.h
>

17 
	~"Såómî.h
"

18 
	~"Uæ.h
"

20 
	gSåóm
::
	$Såóm
(
bôøã
,

21 c⁄° 
°rög
 &
«me
, c⁄° såög &
gíª
,

22 c⁄° 
°rög
 &
uæ
, c⁄° såög &
publicSå
,

23 c⁄° 
°rög
 &
des¸ùti⁄
, c⁄° såög &
c⁄ã¡id
) :

24 
	`bôøã
(
bôøã
), 
	`«me
(
«me
), 
	`gíª
(
gíª
), 
	`uæ
(
uæ
),

25 
	`publicSå
(
publicSå
), 
	`des¸ùti⁄
(
des¸ùti⁄
),

26 
	$c⁄ã¡id
(
c⁄ã¡id
) {

27 
	}
}

29 
	gSåóm
::~
	$Såóm
() {

30 
	}
}

32 
Såómî
::
	$Såómî
(c⁄° 
Såóm
 &
°ªam
, c⁄° 
Uæ
 &
uæ
) :

33 
	`fd
(-1), 
	`bC⁄√˘ed
(
Ál£
), 
	`bLoggedIn
(false),

34 
	$°ªam
(
°ªam
) {

35 
°rög
 
¥Ÿocﬁ
 = 
uæ
.
	`gëPrŸocﬁ
();

36 i‡((
¥Ÿocﬁ
 != "icy") &&

37 (
¥Ÿocﬁ
 != "xaudio") &&

38 (
¥Ÿocﬁ
 != "file")) {

39 
throw
 
	`SåómîEº‹
("Unknow¿¥Ÿocﬁ " + 
¥Ÿocﬁ
);

42 
ho°
 = 
uæ
.
	`gëHo°
();

43 
p‹t
 = 
uæ
.
	`gëP‹t
();

44 
∑th
 = 
uæ
.
	`gëP©h
();

45 
∑ssw‹d
 = 
uæ
.
	`gëLogö
();

46 i‡(
¥Ÿocﬁ
 == "icy") {

47 
ty≥
 = 
IcyLogöTy≥
;

48 } i‡(
¥Ÿocﬁ
 == "xaudio") {

49 
ty≥
 = 
XAudioLogöTy≥
;

50 } i‡(
¥Ÿocﬁ
 == "file") {

51 
ty≥
 = 
FûeLogöTy≥
;

53 
ty≥
 = 
N⁄eLogöTy≥
;

55 
	}
}

57 
	gSåómî
::
	$Såómî
(c⁄° 
Såóm
 &
°ªam
,

58 c⁄° 
°rög
 &
ho°
, 
p‹t
,

59 c⁄° 
°rög
 &
∑th
, c⁄° såög &
∑ssw‹d
,

60 
SåómîLogöTy≥
 
ty≥
) :

61 
	`fd
(-1), 
	`bC⁄√˘ed
(
Ál£
), 
	`bLoggedIn
(false),

62 
	`°ªam
(
°ªam
),

63 
	`ho°
(
ho°
), 
	`p‹t
(
p‹t
), 
	`∑th
(
∑th
),

64 
	`∑ssw‹d
(
∑ssw‹d
), 
	$ty≥
(
ty≥
) {

65 
	}
}

67 
	gSåómî
::~
	$Såómî
() {

68 i‡(
fd
 > 0) {

69 
ªt
 = 
	`˛o£
(
fd
);

70 i‡(
ªt
 < 0)

71 
throw
 
	`SåómîEº‹
("CouldÇot close open connection (close): " +

72 
	`°rög
(
	`°ªº‹
(
î∫o
)));

73 
fd
 = -1;

74 
bC⁄√˘ed
 = 
Ál£
;

75 
bLoggedIn
 = 
Ál£
;

77 
	}
}

79 
	gSåómî
::
	$O≥nFûe
() {

80 i‡(
fd
 != -1)

81 
throw
 
	`SåómîEº‹
("Streamerálready connected");

83 
fd
 = 
	`›í
(
∑th
.
	`c_°r
(), 
O_RDWR
 | 
O_CREAT
 | 
O_APPEND
, 0644);

84 i‡(
fd
 < 0)

85 
throw
 
	`SåómîEº‹
("CouldÇŸ o≥¿fûê" + 
∑th
);

86 
bC⁄√˘ed
 = 
åue
;

87 
bLoggedIn
 = 
åue
;

88 
	}
}

90 
	gSåómî
::
	$C⁄√˘
() {

91 i‡(
fd
 != -1)

92 
throw
 
	`SåómîEº‹
("Streamerálready connected");

94 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

95 i‡(
fd
 < 0)

96 
throw
 
	`SåómîEº‹
("CouldÇot create socket (socket): " +

97 
	`°rög
(
	`°ªº‹
(
î∫o
)));

99 
åy
 {

100 
ho°ít
 *hostent;

101 
ho°ít
 = 
	`gëho°by«me
(
ho°
.
	`c_°r
());

102 i‡(
ho°ít
 =
NULL
)

103 
throw
 
	`SåómîEº‹
("CouldÇŸÑesﬁvêaddªss: " + 
ho°
 +

105 
	`°rög
(
	`°ªº‹
(
h_î∫o
)));

107 i‡(
ho°ít
->
h_addπy≥
 !
AF_INET
)

108 
throw
 
	`SåómîEº‹
("Only Ipv4 support forÇow");

110 
sockaddr_ö
 
sö
;

111 
sö
.
sö_Ámûy
 = ()
ho°ít
->
h_addπy≥
;

112 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

113 
sö
.
sö_addr
.
s_addr
 = *(*)
ho°ít
->
h_addr
;

115 
ªt
 = 
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
sö
, (sin));

116 i‡(
ªt
 < 0)

117 
throw
 
	`SåómîEº‹
("CouldÇŸ c⁄√˘Åÿ" + 
ho°
 + " (connect): " +

118 
	`°rög
(
	`°ªº‹
(
î∫o
)));

120 
bC⁄√˘ed
 = 
åue
;

121 } 
	`ˇtch
 (
Eº‹
 &
e
) {

122 
	`˛o£
(
fd
);

123 
fd
 = -1;

124 
bC⁄√˘ed
 = 
Ál£
;

125 
bLoggedIn
 = 
Ál£
;

126 
throw
 
e
;

128 
	}
}

130 
	gSåómî
::
	$Logö
() {

132 
ty≥
) {

133 
N⁄eLogöTy≥
:

136 
IcyLogöTy≥
:

137 i‡(!
bC⁄√˘ed
)

138 
	`C⁄√˘
();

139 
	`as£π
(
bC⁄√˘ed
);

140 
	`IcyLogö
();

143 
XAudioLogöTy≥
:

144 i‡(!
bC⁄√˘ed
)

145 
	`C⁄√˘
();

146 
	`as£π
(
bC⁄√˘ed
);

147 
	`XAudioLogö
();

150 
FûeLogöTy≥
:

151 i‡(!
bC⁄√˘ed
)

152 
	`O≥nFûe
();

153 
	`as£π
(
bC⁄√˘ed
);

157 
throw
 
	`SåómîEº‹
("Unknown LoginType");

160 
bLoggedIn
 = 
åue
;

161 
	}
}

163 
	gSåómî
::
	$IcyLogö
() {

164 
	`Wrôe
((c⁄° *)
∑ssw‹d
.
	`d©a
(),Öassw‹d.
	`size
());

165 
	`Wrôe
((const *)"\n", 1);

167 
buf
[3];

168 
	`Ród
(
buf
, (buf));

169 i‡(! ((
buf
[0] == 'O') || (buf[0] == 'o')) &&

170 ((
buf
[1] == 'K') || (buf[1] == 'k')))

171 
throw
 
	`SåómîEº‹
("CouldÇot connectÅo ICY server (didÇotÑeceive OKÑesponse)");

173 
o°rög°ªam
 
o°
;

175 
o°
 << "icy-br: " << 
°ªam
.
	`gëBôøã
() << "\n";

176 
o°
 << "icy-«me: " << 
°ªam
.
	`gëName
() << "\n";

177 
o°
 << "icy-gíª: " << 
°ªam
.
	`gëGíª
() << "\n";

178 
o°
 << "icy-uæ: " << 
°ªam
.
	`gëUæ
() << "\n";

179 
o°
 << "icy-pub: " << 
°ªam
.
	`gëPublicSå
() << "\n";

180 
o°
 << "\n";

182 
°rög
 
IcySå
 = 
o°
.
	`°r
();

183 
	`Wrôe
((c⁄° *)
IcySå
.
	`d©a
(), IcySå.
	`size
());

184 
	}
}

186 
	gSåómî
::
	$XAudioLogö
() {

187 
o°rög°ªam
 
o°
;

189 
o°
 << "SOURCE " << 
∑ssw‹d
;

190 
o°
 << " " << 
∑th
 << "\n\n";

191 
o°
 << "x-audioˇ°-bôøã: " << 
°ªam
.
	`gëBôøã
() << "\n";

192 
o°
 << "x-audioˇ°-«me: " << 
°ªam
.
	`gëName
() << "\n";

193 
o°
 << "x-audioˇ°-gíª: " << 
°ªam
.
	`gëGíª
() << "\n";

194 
o°
 << "x-audioˇ°-uæ: " << 
°ªam
.
	`gëUæ
() << "\n";

195 
o°
 << "x-audioˇ°-public: " << 
°ªam
.
	`gëPublicSå
() << "\n";

196 
o°
 << "x-audioˇ°-des¸ùti⁄: " << 
°ªam
.
	`gëDes¸ùti⁄
() << "\n";

197 
o°
 << "x-audioˇ°-c⁄ã¡id: " << 
°ªam
.
	`gëC⁄ã¡id
() << "\n";

198 
o°
 << "\n";

200 
°rög
 
XAudioSå
 = 
o°
.
	`°r
();

201 
	`Wrôe
((c⁄° *)
XAudioSå
.
	`d©a
(), XAudioSå.
	`size
());

202 
	}
}

204 
	gSåómî
::
	$Wrôe
(c⁄° *
buf
, 
Àn
) {

205 
	`as£π
(
bC⁄√˘ed
);

207 c⁄° *
p
 = 
buf
;

209 
agaö
:

210 
ªt
 = 
	`wrôe
(
fd
, 
p
, 
Àn
);

211 i‡(
ªt
 < 0) {

212 i‡(
î∫o
 =
EAGAIN
)

213 
agaö
;

215 
throw
 
	`SåómîEº‹
("CouldÇot send bufferÅoÑemote side (write): " +

216 
	`°rög
(
	`°ªº‹
(
î∫o
)));

218 i‡(
ªt
 == 0)

219 
throw
 
	`SåómîEº‹
("Remote side closedÅhe connection");

220 
Àn
 -
ªt
;

221 
p
 +
ªt
;

222 i‡(
Àn
 > 0)

223 
agaö
;

224 
	}
}

226 
	gSåómî
::
	$Ród
(*
buf
, 
Àn
) {

227 
	`as£π
(
bC⁄√˘ed
);

229 *
p
 = 
buf
;

231 
agaö
:

232 
ªt
 = 
	`ªad
(
fd
, 
p
, 
Àn
);

233 i‡(
ªt
 < 0) {

234 i‡(
î∫o
 =
EAGAIN
)

235 
agaö
;

237 
throw
 
	`SåómîEº‹
("CouldÇotÑead buffer fromÑemote side (write): " +

238 
	`°rög
(
	`°ªº‹
(
î∫o
)));

240 i‡(
ªt
 == 0)

241 
throw
 
	`SåómîEº‹
("Remote side closedÅhe connection");

242 
Àn
 -
ªt
;

243 
p
 +
ªt
;

244 i‡(
Àn
 > 0)

245 
agaö
;

246 
	}
}

	@Streamer.h

1 #i‚de‡
STREAMER_H__


2 
	#STREAMER_H__


	)

4 
	~<°rög
>

6 
	~"Uæ.h
"

7 
	~"Eº‹.h
"

9 ˛as†
	cSåómîEº‹
 : 
public
 
Eº‹
 {

10 
public
:

11 
SåómîEº‹
(
°d
::
°rög
 
msg
Ë: 
	$Eº‹
(
msg
) { }

12 
vútuÆ
 ~
	$SåómîEº‹
(Ë{ 
	}
}

15 ˛as†
	cSåóm
 {

16 
	m¥Ÿe˘ed
:

17 
bôøã
;

18 
	m°d
::
°rög
 
«me
;

19 
	m°d
::
°rög
 
gíª
;

20 
	m°d
::
°rög
 
uæ
;

21 
	m°d
::
°rög
 
publicSå
;

22 
	m°d
::
°rög
 
des¸ùti⁄
;

23 
	m°d
::
°rög
 
c⁄ã¡id
;

25 
	mpublic
:

26 
Såóm
(c⁄° 
bôøã
,

27 c⁄° 
°d
::
°rög
 &
«me
 = "",

28 c⁄° 
°d
::
°rög
 &
gíª
 = "",

29 c⁄° 
°d
::
°rög
 &
uæ
 = "",

30 c⁄° 
°d
::
°rög
 &
publicSå
 = "",

31 c⁄° 
°d
::
°rög
 &
des¸ùti⁄
 = "",

32 c⁄° 
°d
::
°rög
 &
c⁄ã¡id
 = "");

33 ~
Såóm
();

35 c⁄° 
	$gëBôøã
(Ëc⁄° {  
bôøã
; }

36 c⁄° 
°d
::
°rög
 
	$gëName
(Ëc⁄° {  
«me
; 
	}
}

37 c⁄° 
	g°d
::
°rög
 
	$gëGíª
(Ëc⁄° {  
gíª
; 
	}
}

38 c⁄° 
	g°d
::
°rög
 
	$gëPublicSå
(Ëc⁄° {  
publicSå
; 
	}
}

39 c⁄° 
	g°d
::
°rög
 
	$gëDes¸ùti⁄
(Ëc⁄° {  
des¸ùti⁄
; 
	}
}

40 c⁄° 
	g°d
::
°rög
 
	$gëC⁄ã¡id
(Ëc⁄° {  
c⁄ã¡id
; 
	}
}

41 c⁄° 
	g°d
::
°rög
 
	$gëUæ
(Ëc⁄° {  
uæ
; 
	}
}

45 
	mXAudioLogöTy≥
 = 0,

46 
	mIcyLogöTy≥
,

47 
	mFûeLogöTy≥
,

48 
	mN⁄eLogöTy≥


49 } 
	tSåómîLogöTy≥
;

51 ˛as†
	cSåómî
 {

52 
	m¥Ÿe˘ed
:

53 
fd
;

54 
boﬁ
 
	mbC⁄√˘ed
;

55 
boﬁ
 
	mbLoggedIn
;

57 
Såóm
 
	m°ªam
;

58 
	m°d
::
°rög
 
ho°
;

59 
	mp‹t
;

60 
	m°d
::
°rög
 
∑th
;

61 
	m°d
::
°rög
 
∑ssw‹d
;

62 
SåómîLogöTy≥
 
	mty≥
;

64 
C⁄√˘
();

65 
O≥nFûe
();

67 
IcyLogö
();

68 
XAudioLogö
();

70 
	mpublic
:

71 
Såómî
(c⁄° 
Såóm
 &
°ªam
, c⁄° 
Uæ
 &
uæ
);

72 
Såómî
(c⁄° 
Såóm
 &
°ªam
, c⁄° 
°d
::
°rög
 &
ho°
, 
p‹t
,

73 c⁄° 
°d
::
°rög
 &
∑th
, c⁄° std::°rög &
∑ssw‹d
 = "",

74 
SåómîLogöTy≥
 
ty≥
 = 
N⁄eLogöTy≥
);

75 ~
Såómî
();

77 
	$gëP‹t
(Ëc⁄° {  
p‹t
; }

78 
°d
::
°rög
 
	$gëHo°
(Ëc⁄° {  
ho°
; 
	}
}

79 
	g°d
::
°rög
 
	$gëP©h
(Ëc⁄° {  
∑th
; 
	}
}

80 
	g°d
::
°rög
 
	$gëPassw‹d
(Ëc⁄° {  
∑ssw‹d
; 
	}
}

81 
	$gëBôøã
(Ëc⁄° {  
°ªam
.
	`gëBôøã
(); 
	}
}

83 
Logö
();

84 
Wrôe
(c⁄° *
buf
, 
Àn
);

85 
Ród
(*
buf
, 
Àn
);

	@Url.cc

1 
usög
 
«me•a˚
 
	g°d
;

3 
	~"Uæ.h
"

5 
	gUæ
::
Uæ
(c⁄° 
°d
::
°rög
 &
uæ
) :

6 
¥Ÿocﬁ
(""), 
logö
(""), 
∑ssw‹d
(""), 
ho°
(""), 
p‹t
(0), 
∑th
("") {

8 
	g°rög
::
size_ty≥
 
°rSèπ
 = 0;

11 
	g°rög
::
size_ty≥
 
¥ŸoEnd
 = 
uæ
.
föd
("://", 
°rSèπ
);

12 i‡(
	g¥ŸoEnd
 =
°rög
::
≈os
)

13 
throw
 
UæEº‹
("CouldÇŸÖ¨£ " + 
uæ
);

14 
	g¥Ÿocﬁ
 = 
uæ
.
sub°r
(
°rSèπ
, 
¥ŸoEnd
 - strStart);

15 
	g°rSèπ
 = 
¥ŸoEnd
 + 3;

18 
	g°rög
::
size_ty≥
 
loˇti⁄End
 = 
uæ
.
föd
("/", 
°rSèπ
);

19 i‡(
	gloˇti⁄End
 =
°rög
::
≈os
)

20 
loˇti⁄End
 = 
uæ
.
Àngth
();

22 
°rög
 
	gloˇti⁄
 = 
uæ
.
sub°r
(
°rSèπ
, 
loˇti⁄End
 - strStart);

25 
	g°rSèπ
 = 0;

26 
	g°rög
::
size_ty≥
 
authEnd
 = 
loˇti⁄
.
föd
("@", 
°rSèπ
);

27 i‡(
	gauthEnd
 !
°rög
::
≈os
) {

28 
∑r£AuthSåög
(
loˇti⁄
.
sub°r
(
°rSèπ
, 
authEnd
 - strStart));

29 
	g°rSèπ
 = 
authEnd
 + 1;

31 
∑r£Loˇti⁄Såög
(
loˇti⁄
.
sub°r
(
°rSèπ
));

33 
	g∑th
 = 
uæ
.
sub°r
(
loˇti⁄End
);

36 
	gUæ
::~
	$Uæ
(Ë{ 
	}
}

38 
Uæ
::
∑r£AuthSåög
(c⁄° 
°d
::
°rög
 &
°r
) {

39 
°rög
::
size_ty≥
 
logöEnd
 = 
°r
.
föd
(":");

40 i‡(
	glogöEnd
 !
°rög
::
≈os
) {

41 
logö
 = 
°r
.
sub°r
(0, 
logöEnd
);

42 
	g∑ssw‹d
 = 
°r
.
sub°r
(
logöEnd
 + 1);

44 
	glogö
 = 
°r
;

48 
	gUæ
::
∑r£Loˇti⁄Såög
(c⁄° 
°d
::
°rög
 &
°r
) {

49 
°rög
::
size_ty≥
 
ho°End
 = 
°r
.
föd
(":");

50 i‡(
	gho°End
 !
°rög
::
≈os
) {

51 
ho°
 = 
°r
.
sub°r
(0, 
ho°End
);

52 
°rög
 
	gp‹tSå
 = 
°r
.
sub°r
(
ho°End
 + 1);

53 
	gp‹t
 = 
©oi
(
p‹tSå
.
c_°r
());

55 
	gho°
 = 
°r
;

	@Url.h

1 #i‚de‡
URL_H__


2 
	#URL_H__


	)

4 
	~<°rög
>

6 
	~"Eº‹.h
"

8 ˛as†
	cUæEº‹
 : 
public
 
Eº‹
 {

9 
public
:

10 
UæEº‹
(
°d
::
°rög
 
msg
Ë: 
	$Eº‹
(
msg
) { }

11 
vútuÆ
 ~
	$UæEº‹
(Ë{ 
	}
}

15 ˛as†
	cUæ
 {

16 
	m¥Ÿe˘ed
:

17 
°d
::
°rög
 
¥Ÿocﬁ
;

18 
	m°d
::
°rög
 
logö
;

19 
	m°d
::
°rög
 
∑ssw‹d
;

20 
	m°d
::
°rög
 
ho°
;

21 
	mp‹t
;

22 
	m°d
::
°rög
 
∑th
;

24 
	m¥Ÿe˘ed
:

25 
∑r£AuthSåög
(c⁄° 
°d
::
°rög
 &
°r
);

26 
∑r£Loˇti⁄Såög
(c⁄° 
°d
::
°rög
 &
°r
);

28 
	mpublic
:

29 
Uæ
(c⁄° 
°d
::
°rög
 &string);

30 ~
Uæ
();

32 
	m°d
::
°rög
 
	$gëPrŸocﬁ
(Ëc⁄° {  
¥Ÿocﬁ
; }

33 
°d
::
°rög
 
	$gëLogö
(Ëc⁄° {  
logö
; 
	}
}

34 
	g°d
::
°rög
 
	$gëPassw‹d
(Ëc⁄° {  
∑ssw‹d
; 
	}
}

35 
	g°d
::
°rög
 
	$gëHo°
(Ëc⁄° {  
ho°
; 
	}
}

36 
	$gëP‹t
(Ëc⁄° {  
p‹t
; 
	}
}

37 
	g°d
::
°rög
 
	$gëP©h
(Ëc⁄° {  
∑th
; 
	}
}

	@bv.c

5 
	~<limôs.h
>

6 
	~<as£π.h
>

7 
	~<°dlib.h
>

9 
	~"bv.h
"

21 #i‡(
CHAR_BIT
 < 8)

30 
	#LOWERBITS
(
x
, 
b
Ë((bË? (xË& ((2 << ((bË- 1)Ë- 1Ë: 0)

	)

37 
	#HIGHERBITS
(
x
, 
b
Ë(((xË& 0xffË>> (8 - (b)))

	)

47 
	$bv_öô
(
bv_t
 *
bv
, *
d©a
, 
Àn
) {

48 
	`as£π
(
bv
 !
NULL
);

49 
	`as£π
(
d©a
 !
NULL
);

51 
bv
->
d©a
 = data;

52 
bv
->
Àn
 =Üen;

53 
bv
->
idx
 = 0;

54 
	}
}

62 
	$bv_ª£t
(
bv_t
 *
bv
) {

63 
	`as£π
(
bv
 !
NULL
);

65 
bv
->
idx
 = 0;

66 
	}
}

73 
	$bv_gë_bôs
(
bv_t
 *
bv
, 
numbôs
) {

74 
	`as£π
(
bv
 !
NULL
);

75 
	`as£π
(
bv
->
d©a
 !
NULL
);

76 
	`as£π
((
numbôs
 <= 32) ||

78 
	`as£π
(
bv
->
Àn
 > bv->
idx
);

79 
	`as£π
(((
bv
->
Àn
 - bv->
idx
Ë> 
numbôs
) ||

82 
cidx
 = 
bv
->
idx
 >> 3;

86 
ovîÊow
 = 
bv
->
idx
 & 0x7;

88 
bv
->
idx
 +
numbôs
;

93 i‡(
numbôs
 <(8 - 
ovîÊow
))

94  
	`HIGHERBITS
(
bv
->
d©a
[
cidx
] << 
ovîÊow
, 
numbôs
);

99 
Àn
 = ((
numbôs
 + 
ovîÊow
) >> 3) + 1;

103 
ªs
 = 
	`LOWERBITS
(
bv
->
d©a
[
cidx
++], 8 - 
ovîÊow
);

104 
i
;

105 
i
 = 1; i < 
Àn
 - 1; i++)

106 
ªs
 = (ª†<< 8Ë| (
bv
->
d©a
[
cidx
++] & 0xFF);

111 
œ°bôs
 = (
ovîÊow
 + 
numbôs
) & 0x07;

112 
ªs
 = (ª†<< 
œ°bôs
Ë| 
	`HIGHERBITS
(
bv
->
d©a
[
cidx
],Üastbits);

114  
ªs
;

115 
	}
}

123 
	$bv_put_bôs
(
bv_t
 *
bv
, 
bôs
, 
numbôs
) {

124 
	`as£π
(
bv
 !
NULL
);

125 
	`as£π
(
bv
->
d©a
 !
NULL
);

126 
	`as£π
(
bv
->
Àn
 > bv->
idx
);

127 
	`as£π
((
numbôs
 <= 32) ||

130 i‡(
numbôs
 > (
bv
->
Àn
 - bv->
idx
))

133 
cidx
 = 
bv
->
idx
 >> 3;

134 
ovîÊow
 = 
bv
->
idx
 & 0x07;

136 
bv
->
idx
 +
numbôs
;

140 
bôs
 <<(32 - 
numbôs
);

142 i‡((
ovîÊow
 + 
numbôs
) < 8) {

143 
bv
->
d©a
[
cidx
] =

144 (
	`HIGHERBITS
(
bv
->
d©a
[
cidx
], 
ovîÊow
) << (8 - overflow)) |

145 (
	`HIGHERBITS
(
bôs
 >> 24, 
numbôs
Ë<< (8 - 
ovîÊow
 -Çumbits)) |

146 
	`LOWERBITS
(
bv
->
d©a
[
cidx
], 8 - 
ovîÊow
 - 
numbôs
);

149 
bv
->
d©a
[
cidx
] =

150 (
	`HIGHERBITS
(
bv
->
d©a
[
cidx
], 
ovîÊow
) << (8 - overflow)) |

151 
	`HIGHERBITS
(
bôs
 >> 24, 8 - 
ovîÊow
);

153 
cidx
++;

154 
bôs
 <<8 - 
ovîÊow
;

156 
Àn
 = ((
numbôs
 + 
ovîÊow
) >> 3) + 1;

157 
i
;

158 
i
 = 1; i < 
Àn
 - 1; i++, 
bôs
 <<= 8)

159 
bv
->
d©a
[
cidx
++] = (
bôs
 >> 24) & 0xff;

161 
œ°bôs
 = (
ovîÊow
 + 
numbôs
) & 0x07;

162 
bv
->
d©a
[
cidx
] =

163 (
	`HIGHERBITS
((
bôs
 >> 24Ë& 0xff, 
œ°bôs
) << (8 -Üastbits)) |

164 
	`LOWERBITS
(
bv
->
d©a
[
cidx
], 8 - 
œ°bôs
);

167 
	}
}

172 #ifde‡
BV_TEST


173 
	~<°dio.h
>

175 
	$ã°ô
(*
«me
, 
ªsu…
, 
should
) {

176 i‡(
ªsu…
 =
should
) {

177 
	`¥ötf
("Te° %†wa†suc˚ssful\n", 
«me
);

179 
	`¥ötf
("Test %s wasÇot successful, %x should have been %x\n",

180 
«me
, 
ªsu…
, 
should
);

182 
	}
}

184 
	$maö
() {

185 
ã°
[4] = {0xaa, 0xaa, 0xaa, 0xaa},

186 
ã°2
[4] = {0};

187 
bv_t
 
bv
;

190 
	`ã°ô
("LOWERBITS 1 bô", 
	`LOWERBITS
(0x1, 1), 0x1);

191 
	`ã°ô
("LOWERBITS 2 bôs", 
	`LOWERBITS
(0x2, 2), 0x2);

192 
	`ã°ô
("LOWERBITS 2 bôs", 
	`LOWERBITS
(0x2, 1), 0x0);

193 
	`ã°ô
("LOWERBITS 8 bôs", 
	`LOWERBITS
(0xf, 8), 0xf);

196 
	`ã°ô
("HIGHERBITS 1 bô", 
	`HIGHERBITS
(0xff, 1), 0x1);

197 
	`ã°ô
("HIGHERBITS 2 bôs", 
	`HIGHERBITS
(0xff, 2), 0x3);

198 
	`ã°ô
("HIGHERBITS 2 bôs", 
	`HIGHERBITS
(0x7f, 2), 0x1);

199 
	`ã°ô
("HIGHERBITS 8 bôs", 
	`HIGHERBITS
(0xff, 8), 0xff);

201 
	`bv_öô
(&
bv
, 
ã°
, 32);

204 
	`ã°ô
("bv_gë_bô†nob‹dî 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 1);

205 
	`ã°ô
("bv_gë_bô†nob‹dî 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 0);

206 
	`ã°ô
("bv_gë_bô†nob‹dî 2 bôs", 
	`bv_gë_bôs
(&
bv
, 2), 2);

207 
	`ã°ô
("bv_gë_bô†nob‹dî 3 bôs", 
	`bv_gë_bôs
(&
bv
, 3), 5);

210 
	`ã°ô
("bv_gë_bô†b‹dî 2 bôs", 
	`bv_gë_bôs
(&
bv
, 2), 1);

211 
	`ã°ô
("bv_gë_bô†b‹dî 8 bôs", 
	`bv_gë_bôs
(&
bv
, 8), 0x55);

212 
	`ã°ô
("bv_gë_bô†b‹dî 12 bôs", 
	`bv_gë_bôs
(&
bv
, 12), 0x555);

214 
	`bv_ª£t
(&
bv
);

217 
	`ã°ô
("bv_gë_bô†b‹dî 32 bôs", 
	`bv_gë_bôs
(&
bv
, 32), 0xaaaaaaaa);

219 
	`bv_öô
(&
bv
, 
ã°2
, 32);

222 
	`ã°ô
("bv_put_bô†nob‹dî 4 bôs", 
	`bv_put_bôs
(&
bv
, 0x5, 4), 1);

223 
	`bv_ª£t
(&
bv
);

224 
	`ã°ô
("bv_put_bô†nob‹dî 4 bô†gë 4 bôs", 
	`bv_gë_bôs
(&
bv
, 4), 0x5);

225 
	`bv_ª£t
(&
bv
);

226 
	`ã°ô
("bv_put_bô†nob‹dî 4 bô†gë 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 0);

227 
	`ã°ô
("bv_put_bô†nob‹dî 4 bô†gë 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 1);

228 
	`ã°ô
("bv_put_bô†nob‹dî 4 bô†gë 2 bôs", 
	`bv_gë_bôs
(&
bv
, 2), 1);

230 
	`bv_ª£t
(&
bv
);

231 
	`ã°ô
("bv_put_bô†nob‹dî 8 bôs", 
	`bv_put_bôs
(&
bv
, 0x5a, 8), 1);

232 
	`bv_ª£t
(&
bv
);

233 
	`ã°ô
("bv_put_bô†nob‹dî 8 bô†gë 4 bôs", 
	`bv_gë_bôs
(&
bv
, 4), 0x5);

234 
	`ã°ô
("bv_put_bô†nob‹dî 8 bô†gë 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 1);

235 
	`ã°ô
("bv_put_bô†nob‹dî 8 bô†gë 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 0);

236 
	`ã°ô
("bv_put_bô†nob‹dî 8 bô†gë 2 bôs", 
	`bv_gë_bôs
(&
bv
, 2), 2);

238 
	`bv_ª£t
(&
bv
);

239 
	`ã°ô
("bv_put_bô†nob‹dî 16 bôs", 
	`bv_put_bôs
(&
bv
, 0x5a5a, 16), 1);

240 
	`bv_ª£t
(&
bv
);

241 
	`ã°ô
("bv_put_bô†nob‹dî 16 bô†gë 4 bôs", 
	`bv_gë_bôs
(&
bv
, 4), 0x5);

242 
	`ã°ô
("bv_put_bô†nob‹dî 16 bô†gë 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 1);

243 
	`ã°ô
("bv_put_bô†nob‹dî 16 bô†gë 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 0);

244 
	`ã°ô
("bv_put_bô†nob‹dî 16 bô†gë 2 bôs", 
	`bv_gë_bôs
(&
bv
, 2), 2);

245 
	`ã°ô
("bv_put_bô†nob‹dî 16 bô†gë 4 bôs", 
	`bv_gë_bôs
(&
bv
, 4), 0x5);

246 
	`ã°ô
("bv_put_bô†nob‹dî 16 bô†gë 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 1);

247 
	`ã°ô
("bv_put_bô†nob‹dî 16 bô†gë 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 0);

248 
	`ã°ô
("bv_put_bô†nob‹dî 16 bô†gë 2 bôs", 
	`bv_gë_bôs
(&
bv
, 2), 2);

250 
	`bv_ª£t
(&
bv
);

251 
	`ã°ô
("bv_put_bô†b‹dî 8 bôs", 
	`bv_put_bôs
(&
bv
, 0x55, 7), 1);

252 
	`ã°ô
("bv_put_bô†b‹dî 8 bôs", 
	`bv_put_bôs
(&
bv
, 0x0, 1), 1);

253 
	`bv_ª£t
(&
bv
);

254 
	`ã°ô
("bv_put_bô†b‹dî 8 bô†gë 4 bôs", 
	`bv_gë_bôs
(&
bv
, 4), 0xa);

255 
	`ã°ô
("bv_put_bô†b‹dî 8 bô†gë 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 1);

256 
	`ã°ô
("bv_put_bô†b‹dî 8 bô†gë 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 0);

257 
	`ã°ô
("bv_put_bô†b‹dî 8 bô†gë 2 bôs", 
	`bv_gë_bôs
(&
bv
, 2), 2);

259 
	`bv_ª£t
(&
bv
);

260 
	`ã°ô
("bv_put_bô†b‹dî 16 bôs", 
	`bv_put_bôs
(&
bv
, 0x55, 7), 1);

261 
	`ã°ô
("bv_put_bô†b‹dî 16 bôs", 
	`bv_put_bôs
(&
bv
, 0x2, 3), 1);

262 
	`ã°ô
("bv_put_bô†b‹dî 16 bôs", 
	`bv_put_bôs
(&
bv
, 0x2a, 6), 1);

263 
	`bv_ª£t
(&
bv
);

264 
	`ã°ô
("bv_put_bô†b‹dî 16 bô†gë 4 bôs", 
	`bv_gë_bôs
(&
bv
, 4), 0xa);

265 
	`ã°ô
("bv_put_bô†b‹dî 16 bô†gë 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 1);

266 
	`ã°ô
("bv_put_bô†b‹dî 16 bô†gë 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 0);

267 
	`ã°ô
("bv_put_bô†b‹dî 16 bô†gë 2 bôs", 
	`bv_gë_bôs
(&
bv
, 2), 2);

268 
	`ã°ô
("bv_put_bô†b‹dî 16 bô†gë 4 bôs", 
	`bv_gë_bôs
(&
bv
, 4), 0xa);

269 
	`ã°ô
("bv_put_bô†b‹dî 16 bô†gë 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 1);

270 
	`ã°ô
("bv_put_bô†b‹dî 16 bô†gë 1 bô", 
	`bv_gë_bôs
(&
bv
, 1), 0);

271 
	`ã°ô
("bv_put_bô†b‹dî 16 bô†gë 2 bôs", 
	`bv_gë_bôs
(&
bv
, 2), 2);

273 
	`bv_ª£t
(&
bv
);

274 
	`ã°ô
("bv_put_bô†b‹dî 32 bôs", 
	`bv_put_bôs
(&
bv
, 1, 4), 1);

275 
	`ã°ô
("bv_put_bô†b‹dî 32 bôs", 
	`bv_put_bôs
(&
bv
, 2, 4), 1);

276 
	`ã°ô
("bv_put_bô†b‹dî 32 bôs", 
	`bv_put_bôs
(&
bv
, 3, 4), 1);

277 
	`ã°ô
("bv_put_bô†b‹dî 32 bôs", 
	`bv_put_bôs
(&
bv
, 4, 4), 1);

278 
	`ã°ô
("bv_put_bô†b‹dî 32 bôs", 
	`bv_put_bôs
(&
bv
, 5, 4), 1);

279 
	`ã°ô
("bv_put_bô†b‹dî 32 bôs", 
	`bv_put_bôs
(&
bv
, 6, 4), 1);

280 
	`ã°ô
("bv_put_bô†b‹dî 32 bôs", 
	`bv_put_bôs
(&
bv
, 7, 4), 1);

281 
	`ã°ô
("bv_put_bô†b‹dî 32 bôs", 
	`bv_put_bôs
(&
bv
, 8, 4), 1);

282 
	`bv_ª£t
(&
bv
);

283 
	`ã°ô
("bv_put_bô†b‹dî 32 bôs", 
	`bv_gë_bôs
(&
bv
, 32), 0x12345678);

285 
	`bv_ª£t
(&
bv
);

286 
	`bv_put_bôs
(&
bv
, 0xffff, 16);

287 
	`bv_ª£t
(&
bv
);

288 
	`bv_put_bôs
(&
bv
, 0x0, 2);

289 
	`bv_put_bôs
(&
bv
, 0x3, 2);

290 
	`bv_put_bôs
(&
bv
, 0x0, 3);

291 
	`bv_ª£t
(&
bv
);

292 
	`ã°ô
("bv_put_bô†ª° 8 bôs", 
	`bv_gë_bôs
(&
bv
, 16), 0x31FF);

294 
	`bv_ª£t
(&
bv
);

295 
	`bv_put_bôs
(&
bv
, 0xffff, 16);

296 
	`bv_ª£t
(&
bv
);

297 
	`bv_put_bôs
(&
bv
, 0x0, 9);

298 
	`bv_ª£t
(&
bv
);

299 
	`ã°ô
("bv_put_bô†ª° 8 bôs", 
	`bv_gë_bôs
(&
bv
, 16), 0x7F);

301 
	`bv_ª£t
(&
bv
);

302 
	`bv_put_bôs
(&
bv
, 0xffff, 16);

303 
	`bv_ª£t
(&
bv
);

304 
	`bv_put_bôs
(&
bv
, 0x0, 2);

305 
	`bv_put_bôs
(&
bv
, 0x0, 2);

306 
	`bv_put_bôs
(&
bv
, 0x0, 3);

307 
	`bv_put_bôs
(&
bv
, 0x0, 2);

308 
	`bv_ª£t
(&
bv
);

309 
	`ã°ô
("bv_put_bô†ª° 8 bôs", 
	`bv_gë_bôs
(&
bv
, 16), 0x7F);

311 
	`bv_ª£t
(&
bv
);

312 
	`bv_put_bôs
(&
bv
, 0xffff, 16);

313 
	`bv_ª£t
(&
bv
);

314 
	`bv_gë_bôs
(&
bv
, 4);

315 
	`bv_put_bôs
(&
bv
, 0x0, 2);

316 
	`bv_ª£t
(&
bv
);

317 
	`ã°ô
("bv_put_bô†ª° 8 bôs", 
	`bv_gë_bôs
(&
bv
, 16), 0xF3FF);

320 
	}
}

	@bv.h

5 #i‚de‡
BV_H__


6 
	#BV_H__


	)

11 
	sbv_s
 {

12  *
	md©a
;

13 
	mÀn
;

14 
	midx
;

15 } 
	tbv_t
;

20 
bv_öô
–
bv_t
 *
bv
, *
d©a
, 
Àn
);

21 
bv_ª£t
–
bv_t
 *
bv
);

22 
bv_gë_bôs
(
bv_t
 *
bv
, 
numbôs
);

23 
bv_put_bôs
(
bv_t
 *
bv
, 
bôs
, 
numbôs
);

	@file.c

5 
	~<as£π.h
>

6 
	~<°dio.h
>

7 
	~<î∫o.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/uio.h
>

10 
	~<uni°d.h
>

11 
	~<f˙é.h
>

12 
	~<°rög.h
>

13 
	~<sys/°©.h
>

15 
	~"fûe.h
"

20 
	$fûe_ªad
(
fûe_t
 *
fûe
, *
buf
, 
size_t
 
size
) {

21 
	`as£π
(
fûe
 !
NULL
);

22 
	`as£π
(
buf
 !
NULL
);

23 
	`as£π
(
size
 > 0);

25 
Àn
 = 0;

26 
ssize_t
 
i
;

28 (
i
 = 
	`ªad
(
fûe
->
fd
, 
buf
 + 
Àn
, (
size_t
)(
size
 -Üen))) != 0) {

29 i‡(
i
 < 0) {

30 i‡(
î∫o
 =
EINTR
)

33 
	`≥º‹
("read");

37 
Àn
 +
i
;

38 i‡(
Àn
 =
size
)

43 i‡(
i
 == 0)

46 
fûe
->
off£t
 +
Àn
;

47  
Àn
;

49 
	}
}

54 
	$fûe_£ek_fwd
(
fûe_t
 *
fûe
, 
size_t
 
size
) {

55 i‡(
	`l£ek
(
fûe
->
fd
, 
size
, 
SEEK_CUR
) < 0)

59 
	}
}

61 
	$fûe_›í_fd
(
fûe_t
 *
fûe
, 
fd
) {

62 
	`as£π
(
fûe
 !
NULL
);

63 
	`as£π
(
fd
 >= 0);

64 
fûe
->
fd
 = fd;

65 
fûe
->
size
 = 0;

66 
fûe
->
off£t
 = 0;

69 
	}
}

77 
	$fûe_›í_ªad
(
fûe_t
 *
fûe
, c⁄° *
fûíame
) {

78 
	`as£π
(
fûe
 !
NULL
);

79 
	`as£π
(
fûíame
 !
NULL
);

81 i‡(
	`°rcmp
(
fûíame
, "-") == 0) {

83 
fûe
->
fd
 = 
STDIN_FILENO
;

84 
fûe
->
size
 = 0;

86 
fûe
->
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

88 i‡(
fûe
->
fd
 < 0) {

89 
	`≥º‹
("open");

93 
°©
 
sb
;

94 i‡(
	`°©
(
fûíame
, &
sb
) < 0) {

95 
	`≥º‹
("stat");

98 
fûe
->
size
 = ()
sb
.
°_size
;

101 
fûe
->
off£t
 = 0;

104 
	}
}

109 
	$fûe_wrôe
(
fûe_t
 *
fûe
, *
buf
, 
size_t
 
size
) {

110 
i
, 
Àn
 = 0;

112 (
i
 = 
	`wrôe
(
fûe
->
fd
, 
buf
 + 
Àn
, 
size
 -Üen))) {

113 i‡(
i
 < 0) {

114 i‡(
î∫o
 =
EINTR
)

117 
	`≥º‹
("write");

121 
Àn
 +
i
;

122 i‡(
Àn
 =
size
)

127 i‡(
i
 == 0)

130  
Àn
;

131 
	}
}

136 
	$fûe_›í_wrôe
(
fûe_t
 *
fûe
, c⁄° *
fûíame
) {

137 
	`as£π
(
fûe
 !
NULL
);

138 
	`as£π
(
fûíame
 !
NULL
);

140 i‡(!
	`°rcmp
(
fûíame
, "-"))

142 
fûe
->
fd
 = 
STDOUT_FILENO
;

144 
fûe
->
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
,

145 
S_IRWXU
 | 
S_IRGRP
 | 
S_IROTH
);

147 i‡(
fûe
->
fd
 < 0) {

148 
	`≥º‹
("open");

153 
fûe
->
off£t
 = 0;

156 
	}
}

163 
	$fûe_˛o£
(
fûe_t
 *
fûe
) {

164 
	`as£π
(
fûe
 !
NULL
);

166 i‡(
fûe
->
fd
 !
STDIN_FILENO
) {

167 i‡(
	`˛o£
(
fûe
->
fd
) < 0) {

168 
	`≥º‹
("close");

174 
	}
}

	@file.h

5 #i‚de‡
FILE_H__


6 
	#FILE_H__


	)

8 
	~<sys/ty≥s.h
>

14 
	#EEOF
 (-1)

	)

15 
	#ESYNC
 (-2)

	)

17 #ifde‡
__˝lu•lus


21 
	sfûe_s
 {

25 
fd
;

29 
off£t
;

33 
size
;

34 
maxsync
;

35 } 
	tfûe_t
;

37 
fûe_›í_ªad
(
fûe_t
 *
fûe
, c⁄° *
fûíame
);

38 
fûe_›í_wrôe
(
fûe_t
 *
fûe
, c⁄° *
fûíame
);

39 
fûe_›í_fd
(
fûe_t
 *
fûe
, 
fd
);

40 
fûe_˛o£
(
fûe_t
 *
fûe
);

41 
fûe_ªad
(
fûe_t
 *
fûe
, *
buf
, 
size_t
 
size
);

42 
fûe_£ek_fwd
(
fûe_t
 *
fûe
, 
size_t
 
size
);

43 
fûe_wrôe
(
fûe_t
 *
fûe
, *
buf
, 
size_t
 
size
);

45 #ifde‡
__˝lu•lus


	@lame-test.cc

1 
	~<as£π.h
>

2 
	~<uni°d.h
>

4 
	~<io°ªam
>

5 
	~<li°
>

6 
	~<°rög
>

7 
usög
 
«me•a˚
 
	g°d
;

9 
	~"Eº‹.h
"

10 
	~"AudioC¨d.h
"

11 
	~"Såómî.h
"

12 
	~"Uæ.h
"

13 
	~"LameEncodî.h
"

15 
	$ußge
(*
¥ogøm
) {

16 
˚º
 << "Ußge: " << 
¥ogøm
;

17 
˚º
 << " [-h] ";

18 
˚º
 << "[-b bitrate] [-nÇame] [-g genre] [-pÖublicstr] ";

19 
˚º
 << "[-d description] [-c contentid] [-u url] ";

20 
˚º
 << "[-à°ªamuæ]" << 
ídl
;

21 
˚º
 << 
ídl
 << "To send streamsÅo multiple url, specify one or more streamurls." <<Éndl;

22 
˚º
 << "Thê°ªam des¸ùti⁄ wû»c⁄si° o‡thêœ°Ö¨amëî†giví." << 
ídl
;

23 
˚º
 << "F‹Éxam∂e: " <<
ídl
;

24 
˚º
 << 
¥ogøm
 << " -b 128 -¿\"128 kbp†°ªam\" -àxaudio://loˇlho°:8001/°ªam128 -b 64 -¿\"64 kbp†°ªam\" -àxaudio://loˇlho°:8001/°ªam64" << 
ídl
;

25 
˚º
 <<

26 "wû»£ndá 128 kbp†ícoded såómÅÿthêi˚ˇ° sîvî undîÅhêmou¡poöà" << 
ídl
 <<

27 "/°ªam128ándá 64 kbp†ícoded såómÅÿthêi˚ˇ° sîvî undîÅhêmou¡ /°ªam64." << 
ídl
;

29 
	}
}

31 ˛as†
	cSåómîEncodîPaú
 {

32 
	mpublic
:

33 
Såómî
 &
°ªamî
;

34 
	mLameEncodî
 &
	mícodî
;

36 
	$SåómîEncodîPaú
(
Såómî
 &
°ªamî
, 
LameEncodî
 &
ícodî
) :

37 
	`°ªamî
(
°ªamî
), 
	$ícodî
(
ícodî
) {

39 ~
	$SåómîEncodîPaú
(Ë{ 
	}
}

42 
	$maö
(
¨gc
, *
¨gv
[]) {

43 i‡(
¨gc
 < 2) {

44 
	`ußge
(
¨gv
[0]);

48 
bôøã
 = 128;

49 
°rög
 
«me
 = "";

50 
°rög
 
gíª
 = "";

51 
°rög
 
publicSå
 = "";

52 
°rög
 
des¸ùti⁄
 = "";

53 
°rög
 
uæ
 = "";

54 
°rög
 
c⁄ã¡id
 = "";

55 
li°
<
Såómî
> 
°ªamîLi°
;

57 
c
;

58 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hb:n:g:p:d:c:u:t:")) >= 0) {

59 
c
) {

61 
	`ußge
(
¨gv
[0]);

65 
bôøã
 = 
	`©oi
(
›èrg
);

69 
«me
 = 
	`°rög
(
›èrg
);

73 
gíª
 = 
	`°rög
(
›èrg
);

77 
publicSå
 = 
	`°rög
(
›èrg
);

81 
des¸ùti⁄
 = 
	`°rög
(
›èrg
);

85 
c⁄ã¡id
 = 
	`°rög
(
›èrg
);

89 
uæ
 = 
	`°rög
(
›èrg
);

93 
åy
 {

94 
Såóm
 
	`°ªam
(
bôøã
, 
«me
, 
gíª
, 
uæ
,

95 
publicSå
, 
des¸ùti⁄
, 
c⁄ã¡id
);

96 
Uæ
 
	`°ªamUæ
(
›èrg
);

97 
°ªamîLi°
.
	`push_‰⁄t
(
	`Såómî
(
°ªam
, 
°ªamUæ
));

98 } 
	`ˇtch
 (
UæEº‹
 &
e
) {

99 
˚º
 << "CouldÇŸÖ¨£ URL: \"" << 
›èrg
 << "\": "

100 << 
e
.
	`gëMesßge
(Ë<< 
ídl
;

106 
˚º
 << "Unknow¿swôch " << 
c
 << 
ídl
;

107 
	`ußge
(
¨gv
[0]);

113 
åy
 {

114 
Uæ
 
	`uæ
(
¨gv
[1]);

115 
AudioC¨d
 
	`audioC¨d
(
Ál£
);

116 
m≠
<,
Encodî
> 
ícodîM≠
;

118 
li°
<
Såómî
>::
ôî©‹
 
p
 = 
°ªamîLi°
.
	`begö
();

119 
p
 !
uæLi°
.
	`íd
();Ö++) {

120 
p
->
	`Logö
();

123 
LameEncodî
 
	`ícodî
(
audioC¨d
, 
°ªam
.
	`gëBôøã
());

125 
buf
[
øwD©aBlockSize
];

126 
mp3Buf
[
øwD©aBlockSize
];

128 
audioC¨d
.
	`Ród
(
buf
);

129 
ªt
 = 
ícodî
.
	`EncodeBuf„r
(
buf
, 
øwD©aBlockSize
,

130 
mp3Buf
, (mp3Buf));

131 i‡(
ªt
 > 0) {

132 
°ªamî
.
	`Wrôe
(
mp3Buf
, 
ªt
);

135 } 
	`ˇtch
 (
Eº‹
 &
e
) {

136 
˚º
 << 
e
.
	`gëMesßge
(Ë<< 
ídl
;

140 
	}
}

	@lameflags.h

3 
	mnum_ßm∂es
;

4 
	mnum_ch™√ls
;

5 
	mö_ßm∂î©e
;

6 
	mout_ßm∂î©e
;

10 
	mgtkÊag
;

11 
	mbWrôeVbrTag
;

12 
	mquÆôy
;

13 
	msûít
;

14 
	mmode
;

15 
	mmode_fixed
;

16 
	mf‹˚_ms
;

17 
	mbøã
;

20 
	mc›yright
;

21 
	m‹igöÆ
;

22 
	mîr‹_¥Ÿe˘i⁄
;

23 
	m∑ddög_ty≥
;

24 
	mexãnsi⁄
;

27 
	mdißbÀ_ª£rvoú
;

28 
	mex≥rimíèlX
;

29 
	mex≥rimíèlY
;

30 
	mex≥rimíèlZ
;

33 
	mVBR
;

34 
	mVBR_q
;

35 
	mVBR_mö_bôøã_kbps
;

36 
	mVBR_max_bôøã_kbps
;

40 
	mlow∑ss‰eq
;

41 
	mhigh∑ss‰eq
;

42 
	mlow∑sswidth
;

43 
	mhigh∑sswidth
;

47 
sound_fûe_f‹m©
 
	möput_f‹m©
;

48 
	msw≠byãs
;

49 *
	möP©h
;

50 *
	moutP©h
;

57 
	mATH⁄ly
;

58 
	mnoATH
;

59 
	mcwlimô
;

60 
	mÆlow_diff_sh‹t
;

61 
	mno_sh‹t_blocks
;

62 
	memphasis
;

70 
	m‰ameNum
;

71 
	mtŸÆ‰ames
;

72 
	mícodî_dñay
;

73 
	m‰amesize
;

74 
	mvîsi⁄
;

75 
	m∑ddög
;

76 
	mmode_gr
;

77 
	m°îeo
;

78 
	mVBR_mö_bôøã
;

79 
	mVBR_max_bôøã
;

80 
	mªßm∂e_øtio
;

81 
	mbôøã_ödex
;

82 
	mßm∂î©e_ödex
;

83 
	mmode_ext
;

86 
	mlow∑ss1
, 
	mlow∑ss2
;

87 
	mhigh∑ss1
, 
	mhigh∑ss2
;

90 
	mlow∑ss_b™d
;

91 
	mhigh∑ss_b™d
;

95 
	mfûãr_ty≥
;

96 
	mqu™tiz©i⁄
;

97 
	mnoi£_sh≠ög
;

102 
	mnoi£_sh≠ög_°›
;

109 
	mpsymodñ
;

110 
	mu£_be°_huffm™
;

113 } 
	tœme_globÆ_Êags
;

	@mp3-read.c

5 
	~<°dio.h
>

6 
	~<î∫o.h
>

7 
	~<as£π.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<uni°d.h
>

12 
	~"mp3.h
"

13 
	~"bv.h
"

20 
	$mp3_ªad_si
(
mp3_‰ame_t
 *
‰ame
) {

21 
	`as£π
(
‰ame
 !
NULL
);

22 
	`as£π
((
‰ame
->
si_bôsize
 != 0) ||

25 *
±r
 = 
‰ame
->
øw
 + 4;

26 i‡–
‰ame
->
¥Ÿ
 == 0)

27 
±r
 += 2;

29 
bv_t
 
bv
;

30 
	`bv_öô
(&
bv
, 
±r
, 
‰ame
->
si_bôsize
);

33 
‰ame
->
si
.
ch™√l
[0].
gønuÀ
[0].
∑π2_3_Àngth
 = 0;

34 
‰ame
->
si
.
ch™√l
[0].
gønuÀ
[1].
∑π2_3_Àngth
 = 0;

35 
‰ame
->
si
.
ch™√l
[1].
gønuÀ
[0].
∑π2_3_Àngth
 = 0;

36 
‰ame
->
si
.
ch™√l
[1].
gønuÀ
[1].
∑π2_3_Àngth
 = 0;

38 
mp3_si_t
 *
si
 = &
‰ame
->si;

40 
nch
 = (
‰ame
->
mode
 != 3) ? 2 : 1;

42 
‰ame
->
adu_bôsize
 = 0;

53 
si
->
maö_d©a_íd
 = 
	`bv_gë_bôs
(&
bv
, 9);

61 
si
->
¥iv©e_bôs
 = 
nch
 =2 ? 
	`bv_gë_bôs
(&
bv
, 3)

62 : 
	`bv_gë_bôs
(&
bv
, 5);

81 
i
;

82 
i
 = 0; i < 
nch
; i++) {

83 
b™d
;

84 
b™d
 = 0; band < 4; band++)

85 
si
->
ch™√l
[
i
].
scfsi
[
b™d
] = 
	`bv_gë_bôs
(&
bv
, 1);

88 
gri
;

89 
gri
 = 0; gri < 2; gri++) {

90 
i
 = 0; i < 
nch
; i++) {

91 
mp3_gønuÀ_t
 *
gr
 = &
si
->
ch™√l
[
i
].
gønuÀ
[
gri
];

103 
gr
->
∑π2_3_Àngth
 = 
	`bv_gë_bôs
(&
bv
, 12);

105 
‰ame
->
adu_bôsize
 +
gr
->
∑π2_3_Àngth
;

140 
gr
->
big_vÆues
 = 
	`bv_gë_bôs
(&
bv
, 9);

141 
	`as£π
((
gr
->
big_vÆues
 <= 288) || "big_valuesáreÅooÜarge");

152 
gr
->
globÆ_gaö
 = 
	`bv_gë_bôs
(&
bv
, 8);

211 
gr
->
sˇÀ_comp
 = 
	`bv_gë_bôs
(&
bv
, 4);

230 
gr
->
block•lô_Êag
 = 
	`bv_gë_bôs
(&
bv
, 1);

232 i‡(
gr
->
block•lô_Êag
 != 0) {

268 
gr
->
block_ty≥
 = 
	`bv_gë_bôs
(&
bv
, 2);

271 i‡(
gr
->
block_ty≥
 == 0) {

272 
	`Ârötf
(
°dîr
, "Frame hasÑeserved windowingÅype, skipping...\n");

308 
gr
->
swôch_poöt
 = 
	`bv_gë_bôs
(&
bv
, 1);

318 
gr
->
tbl_£l
[0] = 
	`bv_gë_bôs
(&
bv
, 5);

319 
gr
->
tbl_£l
[1] = 
	`bv_gë_bôs
(&
bv
, 5);

320 
gr
->
tbl_£l
[2] = 0;

331 
j
;

332 
j
 = 0; j < 3; j++)

333 
gr
->
sub_gaö
[
j
] = 
	`bv_gë_bôs
(&
bv
, 3);

336 i‡(
gr
->
block_ty≥
 == 2)

337 
gr
->
ªg0_˙t
 = 9;

339 
gr
->
ªg0_˙t
 = 8;

340 
gr
->
ªg1_˙t
 = 0;

343 
j
;

344 
j
 = 0; j < 3; j++)

345 
gr
->
tbl_£l
[
j
] = 
	`bv_gë_bôs
(&
bv
, 5);

385 
gr
->
ªg0_˙t
 = 
	`bv_gë_bôs
(&
bv
, 4);

395 
gr
->
ªg1_˙t
 = 
	`bv_gë_bôs
(&
bv
, 3);

398 
gr
->
block_ty≥
 = 0;

399 
gr
->
swôch_poöt
 = 0;

412 
gr
->
¥eÊag
 = 
	`bv_gë_bôs
(&
bv
, 1);

423 
gr
->
sˇÀ_sˇÀ
 = 
	`bv_gë_bôs
(&
bv
, 1);

435 
gr
->
˙t1tbl_£l
 = 
	`bv_gë_bôs
(&
bv
, 1);

442 c⁄° 
¶í_èbÀ
[2][16] = {

458 
gr
->
¶í0
 = 
¶í_èbÀ
[0][gr->
sˇÀ_comp
];

459 
gr
->
¶í1
 = 
¶í_èbÀ
[1][gr->
sˇÀ_comp
];

467 i‡(
gr
->
block_ty≥
 == 2) {

468 i‡(
gr
->
swôch_poöt
 != 0)

469 
gr
->
∑π2_Àngth
 = 17 * gr->
¶í0
 + 18 * gr->
¶í1
;

471 
gr
->
∑π2_Àngth
 = 18 * gr->
¶í0
 + 18 * gr->
¶í1
;

473 
gr
->
∑π2_Àngth
 = 11 * gr->
¶í0
 + 10 * gr->
¶í1
;

476 
gr
->
∑π3_Àngth
 = gr->
∑π2_3_Àngth
 - gr->
∑π2_Àngth
;

480 
‰ame
->
adu_size
 = (‰ame->
adu_bôsize
 + 7) / 8;

483 
	}
}

488 
	$mp3_ªad_hdr
(
mp3_‰ame_t
 *
‰ame
) {

489 
	`as£π
(
‰ame
 !
NULL
);

491 
bv_t
 
bv
;

492 
	`bv_öô
(&
bv
, 
‰ame
->
øw
, 4 * 8);

499 i‡(
	`bv_gë_bôs
(&
bv
, 12) != 0xFFF)

508 
‰ame
->
id
 = 
	`bv_gë_bôs
(&
bv
, 1);

510 i‡(
‰ame
->
id
 == 0)

528 
‰ame
->
œyî
 = 
	`bv_gë_bôs
(&
bv
, 2);

531 i‡(
‰ame
->
œyî
 != 1)

542 
‰ame
->
¥Ÿ
 = 
	`bv_gë_bôs
(&
bv
, 1);

588 
‰ame
->
bôøã_ödex
 = 
	`bv_gë_bôs
(&
bv
, 4);

607 
‰ame
->
ßm∂îfödex
 = 
	`bv_gë_bôs
(&
bv
, 2);

617 
‰ame
->
∑ddög_bô
 = 
	`bv_gë_bôs
(&
bv
, 1);

625 
‰ame
->
¥iv©e_bô
 = 
	`bv_gë_bôs
(&
bv
, 1);

643 
‰ame
->
mode
 = 
	`bv_gë_bôs
(&
bv
, 2);

668 
‰ame
->
mode_ext
 = 
	`bv_gë_bôs
(&
bv
, 2);

676 
‰ame
->
c›yright
 = 
	`bv_gë_bôs
(&
bv
, 1);

684 
‰ame
->
‹igöÆ
 = 
	`bv_gë_bôs
(&
bv
, 1);

697 
‰ame
->
emphasis
 = 
	`bv_gë_bôs
(&
bv
, 2);

699 i‡(
‰ame
->
¥Ÿ
 == 0) {

700 
‰ame
->
¸c
[0] = føme->
øw
[4];

701 
‰ame
->
¸c
[1] = føme->
øw
[5];

704 
	`mp3_ˇlc_hdr
(
‰ame
);

707 
	}
}

712 
	$mp3_skù_id3v2
(
fûe_t
 *
mp3
, 
mp3_‰ame_t
 *
‰ame
) {

713 
	`as£π
(
mp3
 !
NULL
);

714 
	`as£π
(
‰ame
 !
NULL
);

716 
id3v2_hdr
[10];

717 
	`mem˝y
(
id3v2_hdr
, 
‰ame
->
øw
, 4);

718 i‡((
id3v2_hdr
[0] != 'I') ||

719 (
id3v2_hdr
[1] != 'D') ||

720 (
id3v2_hdr
[2] != '3'))

723 i‡(
	`fûe_ªad
(
mp3
, 
id3v2_hdr
 + 4, 6) != 6)

724  
EEOF
;

727 
size_t
 
èg_size
 = (((
id3v2_hdr
[6] & 0x7F) << 21) |

728 ((
id3v2_hdr
[7] & 0x7F) << 14) |

729 ((
id3v2_hdr
[8] & 0x7F) << 7) |

730 (
id3v2_hdr
[9] & 0x7F)) +

731 (
id3v2_hdr
[5] & 0x10 ? 10 : 0);

733 i‡(!
	`fûe_£ek_fwd
(
mp3
, 
èg_size
))

737 
	}
}

742 
	$mp3_√xt_‰ame
(
fûe_t
 *
mp3
, 
mp3_‰ame_t
 *
‰ame
) {

743 
	`as£π
(
mp3
 !
NULL
);

744 
	`as£π
(
‰ame
 !
NULL
);

746 
ªsync
 = 0;

747 
agaö
:

748 i‡(
ªsync
 != 0) {

750 
‰ame
->
øw
[0] = frame->raw[1];

751 
‰ame
->
øw
[1] = frame->raw[2];

752 
‰ame
->
øw
[2] = frame->raw[3];

754 i‡(
	`fûe_ªad
(
mp3
, 
‰ame
->
øw
 + 3, 1) <= 0)

755  
EEOF
;

757 i‡(
	`fûe_ªad
(
mp3
, 
‰ame
->
øw
, 
MP3_HDR_SIZE
) <= 0)

758  
EEOF
;

761 i‡((
‰ame
->
øw
[0] == 0xFF) &&

762 (((
‰ame
->
øw
[1] >> 4) & 0xF) == 0xF)) {

763 i‡(!
	`mp3_ªad_hdr
(
‰ame
))

764 
ªsync
;

766 
ªsync
 = 0;

767 } i‡((
‰ame
->
øw
[0] == 'I') &&

768 (
‰ame
->
øw
[1] == 'D') &&

769 (
‰ame
->
øw
[2] == '3')) {

770 i‡(!
	`mp3_skù_id3v2
(
mp3
, 
‰ame
)) {

771 
ªsync
;

773 
ªsync
 = 0;

774 
agaö
;

777 
ªsync
;

780 i‡(
	`fûe_ªad
(
mp3
, 
‰ame
->
øw
 + 4, føme->
‰ame_size
 - 4) <= 0)

781  
EEOF
;

783 i‡(!
	`mp3_ªad_si
(
‰ame
))

784 
agaö
;

788 
ªsync
:

789 
‰ame
->
syncskù
++;

790 i‡(
ªsync
++ > 
MP3_MAX_SYNC
) {

791 
	`Ârötf
(
°dîr
, "Max syn¯ex˚eded: %d\n", 
ªsync
);

792  
ESYNC
;

794 
agaö
;

795 
	}
}

800 
	$mp3_u≈ack
(
mp3_‰ame_t
 *
‰ame
) {

801 i‡(!
	`mp3_ªad_hdr
(
‰ame
))

803 i‡(!
	`mp3_ªad_si
(
‰ame
))

807 
	}
}

812 #ifde‡
MP3_TEST


813 
	$maö
(
¨gc
, *
¨gv
[]) {

814 
mp3_fûe_t
 
fûe
;

815 
mp3_‰ame_t
 
‰ame
;

817 *
f
;

818 i‡(!(
f
 = *++
¨gv
)) {

819 
	`Ârötf
(
°dîr
, "Usage: mp3test mp3file\n");

823 i‡(!
	`mp3_›í_ªad
(&
fûe
, 
f
)) {

824 
	`Ârötf
(
°dîr
, "CouldÇŸ o≥¿mp3 fûe: %s\n", 
f
);

828 
	`mp3_√xt_‰ame
(&
fûe
, &
‰ame
) > 0) {

829 
	`¥ötf
("‰amêmaö_d©a_íd %d\n", 
‰ame
.
si
.
maö_d©a_íd
);

830 
	`fgëc
(
°dö
);

833 
	`mp3_˛o£
(&
fûe
);

836 
	}
}

	@mp3-sf.c

5 
	~<as£π.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

9 
	~"bv.h
"

10 
	~"mp3.h
"

15 
	$mp3_ªad_sf
(
mp3_‰ame_t
 *
‰ame
) {

16 
	`as£π
(
‰ame
 !
NULL
);

18 
gønuÀ_off£t
 = 0;

20 
i
;

21 
i
 = 0; i < 2; i++) {

22 
nch
 = (
‰ame
->
mode
 != 3) ? 2 : 1;

24 
j
;

25 
j
 = 0; j < 
nch
; j++) {

26 
mp3_gønuÀ_t
 *
gr
 = &
‰ame
->
si
.
ch™√l
[
j
].
gønuÀ
[
i
];

27 
mp3_sf_t
 *
sf
 = &
gr
->sf;

29 
bô0
 = 
gønuÀ_off£t
 & 7;

30 
bv_t
 
bv
;

31 
	`bv_öô
(&
bv
, 
	`mp3_‰ame_d©a_begö
(
‰ame
Ë+ (
gønuÀ_off£t
 >> 3),

32 
gr
->
∑π2_Àngth
 + 
bô0
);

33 i‡(
bô0
)

34 
	`bv_gë_bôs
(&
bv
, 
bô0
);

35 
gønuÀ_off£t
 +
gr
->
∑π2_3_Àngth
;

37 i‡((
gr
->
block•lô_Êag
 == 1) &&

38 (
gr
->
block_ty≥
 == 2)) {

41 i‡(
gr
->
swôch_poöt
) {

43 
sfb
;

45 i‡(
gr
->
¶í0
 > 0) {

46 
sfb
 = 0; sfb < 8; sfb++)

47 
sf
->
l
[
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í0
);

48 
sfb
 = 3; sfb < 6; sfb++) {

49 
sf
->
s
[0][
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í0
);

50 
sf
->
s
[1][
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í0
);

51 
sf
->
s
[2][
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í0
);

55 i‡(
gr
->
¶í1
 > 0) {

56 
sfb
 = 6; sfb < 12; sfb++) {

57 
sf
->
s
[0][
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í1
);

58 
sf
->
s
[1][
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í1
);

59 
sf
->
s
[2][
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í1
);

64 
sfb
;

66 i‡(
gr
->
¶í0
 > 0) {

67 
sfb
 = 0; sfb < 6; sfb ++) {

68 
sf
->
s
[0][
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í0
);

69 
sf
->
s
[1][
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í0
);

70 
sf
->
s
[2][
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í0
);

74 i‡(
gr
->
¶í1
 > 0) {

75 
sfb
 = 6; sfb < 12; sfb++) {

76 
sf
->
s
[0][
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í1
);

77 
sf
->
s
[1][
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í1
);

78 
sf
->
s
[2][
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í1
);

85 i‡(
i
 == 0) {

88 
sfb
;

89 i‡(
gr
->
¶í0
 > 0)

90 
sfb
 = 0; sfb < 11; sfb++)

91 
sf
->
l
[
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í0
);

93 i‡(
gr
->
¶í1
 > 0)

94 
sfb
 = 11; sfb < 21; sfb++)

95 
sf
->
l
[
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í1
);

99 
mp3_ch™√l_t
 *
ch™√l
 = &
‰ame
->
si
.ch™√l[
j
];

100 
mp3_sf_t
 *
sf1
 = &
ch™√l
->
gønuÀ
[0].
sf
;

101 
sfb
;

103 i‡(
gr
->
¶í0
 > 0) {

105 i‡(
ch™√l
->
scfsi
[0]) {

106 
sfb
 = 0; sfb < 6; sfb++)

107 
sf
->
l
[
sfb
] = 
sf1
->l[sfb];

109 
sfb
 = 0; sfb < 6; sfb++)

110 
sf
->
l
[
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í0
);

113 i‡(
ch™√l
->
scfsi
[1]) {

114 
sfb
 = 6; sfb < 11; sfb++)

115 
sf
->
l
[
sfb
] = 
sf1
->l[sfb];

117 
sfb
 = 6; sfb < 11; sfb++)

118 
sf
->
l
[
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í0
);

122 i‡(
gr
->
¶í1
 > 0) {

124 i‡(
ch™√l
->
scfsi
[2]) {

125 
sfb
 = 11; sfb < 16; sfb++)

126 
sf
->
l
[
sfb
] = 
sf1
->l[sfb];

128 
sfb
 = 11; sfb < 16; sfb++)

129 
sf
->
l
[
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í1
);

132 i‡(
ch™√l
->
scfsi
[3]) {

133 
sfb
 = 16; sfb < 21; sfb++)

134 
sf
->
l
[
sfb
] = 
sf1
->l[sfb];

136 
sfb
 = 16; sfb < 21; sfb++)

137 
sf
->
l
[
sfb
] = 
	`bv_gë_bôs
(&
bv
, 
gr
->
¶í1
);

146 
	}
}

151 
	$mp3_fûl_sf
(
mp3_‰ame_t
 *
‰ame
) {

152 
	`as£π
(
‰ame
 !
NULL
);

154 
gønuÀ_off£t
 = 0;

156 
i
;

157 
i
 = 0; i < 2; i++) {

158 
nch
 = (
‰ame
->
mode
 != 3) ? 2 : 1;

160 
j
;

161 
j
 = 0; j < 
nch
; j++) {

162 
mp3_gønuÀ_t
 *
gr
 = &
‰ame
->
si
.
ch™√l
[
j
].
gønuÀ
[
i
];

163 
mp3_sf_t
 *
sf
 = &
gr
->sf;

165 
bô0
 = 
gønuÀ_off£t
 & 7;

166 
bv_t
 
bv
;

167 
	`bv_öô
(&
bv
, 
	`mp3_‰ame_d©a_begö
(
‰ame
Ë+ (
gønuÀ_off£t
 >> 3),

168 
gr
->
∑π2_Àngth
 + 
bô0
);

169 i‡(
bô0
)

170 
	`bv_gë_bôs
(&
bv
, 
bô0
);

171 
gønuÀ_off£t
 +
gr
->
∑π2_3_Àngth
;

173 i‡((
gr
->
block•lô_Êag
 == 1) &&

174 (
gr
->
block_ty≥
 == 2)) {

177 i‡(
gr
->
swôch_poöt
) {

179 
sfb
;

181 i‡(
gr
->
¶í0
 > 0) {

182 
sfb
 = 0; sfb < 8; sfb++)

183 
	`bv_put_bôs
(&
bv
, 
sf
->
l
[
sfb
], 
gr
->
¶í0
);

184 
sfb
 = 3; sfb < 6; sfb++) {

185 
	`bv_put_bôs
(&
bv
, 
sf
->
s
[0][
sfb
], 
gr
->
¶í0
);

186 
	`bv_put_bôs
(&
bv
, 
sf
->
s
[1][
sfb
], 
gr
->
¶í0
);

187 
	`bv_put_bôs
(&
bv
, 
sf
->
s
[2][
sfb
], 
gr
->
¶í0
);

191 i‡(
gr
->
¶í1
 > 0) {

192 
sfb
 = 6; sfb < 12; sfb++) {

193 
	`bv_put_bôs
(&
bv
, 
sf
->
s
[0][
sfb
], 
gr
->
¶í1
);

194 
	`bv_put_bôs
(&
bv
, 
sf
->
s
[1][
sfb
], 
gr
->
¶í1
);

195 
	`bv_put_bôs
(&
bv
, 
sf
->
s
[2][
sfb
], 
gr
->
¶í1
);

200 
sfb
;

202 i‡(
gr
->
¶í0
 > 0) {

203 
sfb
 = 0; sfb < 6; sfb ++) {

204 
	`bv_put_bôs
(&
bv
, 
sf
->
s
[0][
sfb
], 
gr
->
¶í0
);

205 
	`bv_put_bôs
(&
bv
, 
sf
->
s
[1][
sfb
], 
gr
->
¶í0
);

206 
	`bv_put_bôs
(&
bv
, 
sf
->
s
[2][
sfb
], 
gr
->
¶í0
);

210 i‡(
gr
->
¶í1
 > 0) {

211 
sfb
 = 6; sfb < 12; sfb++) {

212 
	`bv_put_bôs
(&
bv
, 
sf
->
s
[0][
sfb
], 
gr
->
¶í1
);

213 
	`bv_put_bôs
(&
bv
, 
sf
->
s
[1][
sfb
], 
gr
->
¶í1
);

214 
	`bv_put_bôs
(&
bv
, 
sf
->
s
[2][
sfb
], 
gr
->
¶í1
);

221 i‡(
i
 == 0) {

224 
sfb
;

226 i‡(
gr
->
¶í0
 > 0)

227 
sfb
 = 0; sfb < 11; sfb++)

228 
	`bv_put_bôs
(&
bv
, 
sf
->
l
[
sfb
], 
gr
->
¶í0
);

230 i‡(
gr
->
¶í1
 > 0)

231 
sfb
 = 11; sfb < 21; sfb++)

232 
	`bv_put_bôs
(&
bv
, 
sf
->
l
[
sfb
], 
gr
->
¶í1
);

236 
mp3_ch™√l_t
 *
ch™√l
 = &
‰ame
->
si
.ch™√l[
j
];

238 
sfb
;

240 i‡(
gr
->
¶í0
 > 0) {

242 i‡(!
ch™√l
->
scfsi
[0])

243 
sfb
 = 0; sfb < 6; sfb++)

244 
	`bv_put_bôs
(&
bv
, 
sf
->
l
[
sfb
], 
gr
->
¶í0
);

246 i‡(!
ch™√l
->
scfsi
[1])

247 
sfb
 = 6; sfb < 11; sfb++)

248 
	`bv_put_bôs
(&
bv
, 
sf
->
l
[
sfb
], 
gr
->
¶í0
);

251 i‡(
gr
->
¶í1
 > 0) {

253 i‡(!
ch™√l
->
scfsi
[2])

254 
sfb
 = 11; sfb < 16; sfb++)

255 
	`bv_put_bôs
(&
bv
, 
sf
->
l
[
sfb
], 
gr
->
¶í1
);

257 i‡(!
ch™√l
->
scfsi
[3])

258 
sfb
 = 16; sfb < 21; sfb++)

259 
	`bv_put_bôs
(&
bv
, 
sf
->
l
[
sfb
], 
gr
->
¶í1
);

267 
	}
}

272 #ifde‡
MP3SF_TEST


273 
	~<°dio.h
>

274 
	~<°rögs.h
>

276 
	~"aq.h
"

278 
	$cksum
(*
buf
, 
˙t
) {

279 
ªs
 = 0;

281 
i
;

282 
i
 = 0; i < 
˙t
; i++)

283 
ªs
 +
buf
[
i
];

285  
ªs
;

286 
	}
}

288 
	$maö
(
¨gc
, *
¨gv
[]) {

289 *
f
[2];

291 i‡(!(
f
[0] = *++
¨gv
) || !(f[1] = *++argv)) {

292 
	`Ârötf
(
°dîr
, "Usage: mp3-write mp3in mp3out\n");

296 
mp3_fûe_t
 
ö
;

297 i‡(!
	`mp3_›í_ªad
(&
ö
, 
f
[0])) {

298 
	`Ârötf
(
°dîr
, "CouldÇŸ o≥¿mp3 fûêf‹Ñód: %s\n", 
f
[0]);

302 
mp3_fûe_t
 
out
;

303 i‡(!
	`mp3_›í_wrôe
(&
out
, 
f
[1])) {

304 
	`Ârötf
(
°dîr
, "CouldÇŸ o≥¿mp3 fûêf‹ wrôe: %s\n", 
f
[1]);

305 
	`mp3_˛o£
(&
ö
);

309 
aq_t
 
qö
, 
qout
;

310 
	`aq_öô
(&
qö
);

311 
	`aq_öô
(&
qout
);

313 
mp3_‰ame_t
 
‰ame
 = {0};

314 
	`mp3_√xt_‰ame
(&
ö
, &
‰ame
) > 0) {

315 
cö
 = 0;

316 
	`¥ötf
("%d in, cksum %ld\n", 
cö
++,

317 
	`cksum
(
‰ame
.
øw
, føme.
‰ame_size
));

319 i‡(
	`aq_add_‰ame
(&
qö
, &
‰ame
)) {

320 
adu_t
 *
adu
 = 
	`aq_gë_adu
(&
qö
);

321 
	`as£π
(
adu
 !
NULL
);

323 
ˇdu
 = 0;

324 
	`mp3_ªad_sf
(
adu
);

325 
	`¥ötf
("‰amê%d\n", 
ˇdu
);

326 
i
;

327 
i
 = 0; i < 2; i++) {

328 
j
;

329 
j
 = 0; j < 2; j++) {

330 
l
;

331 
	`¥ötf
("ch %d, g∏%d: ", 
j
, 
i
);

332 
l
 = 0;Ü < 22;Ü++)

333 
	`¥ötf
("%d, ", 
adu
->
si
.
ch™√l
[
j
].
gønuÀ
[
i
].
sf
.
l
[l]);

334 
	`¥ötf
("\n");

337 
ﬁdck
 = 
	`cksum
(
adu
->
øw
, 
MP3_RAW_SIZE
);

338 
	`mp3_fûl_sf
(
adu
);

339 
√wck
 = 
	`cksum
(
adu
->
øw
, 
MP3_RAW_SIZE
);

340 i‡(
√wck
 !
ﬁdck
)

341 
	`¥ötf
("c‹ru±i⁄ o¿‰amê%d\n", 
ˇdu
);

342 
	`mp3_ªad_sf
(
adu
);

343 
i
 = 0; i < 2; i++) {

344 
j
;

345 
j
 = 0; j < 2; j++) {

346 
l
;

347 
	`¥ötf
("ch %d, g∏%d: ", 
j
, 
i
);

348 
l
 = 0;Ü < 22;Ü++)

349 
	`¥ötf
("%d, ", 
adu
->
si
.
ch™√l
[
j
].
gønuÀ
[
i
].
sf
.
l
[l]);

350 
	`¥ötf
("\n");

353 
ˇdu
++;

355 i‡(
	`aq_add_adu
(&
qout
, 
adu
)) {

357 
mp3_‰ame_t
 *
‰ame_out
 = 
	`aq_gë_‰ame
(&
qout
);

358 
	`as£π
(
‰ame_out
 !
NULL
);

360 
cout
 = 0;

362 
	`mem£t
(
‰ame_out
->
øw
, 0, 4 + føme_out->
si_size
);

363 i‡(!
	`mp3_fûl_hdr
(
‰ame_out
) ||

364 !
	`mp3_fûl_si
(
‰ame_out
) ||

365 (
	`mp3_wrôe_‰ame
(&
out
, 
‰ame_out
) <= 0)) {

366 
	`Ârötf
(
°dîr
, "CouldÇot write frame\n");

367 
	`mp3_˛o£
(&
ö
);

368 
	`mp3_˛o£
(&
out
);

372 
	`¥ötf
("%d out, cksum %ld\n", 
cout
++,

373 
	`cksum
(
‰ame_out
->
øw
,

374 
‰ame_out
->
‰ame_size
));

376 
	`‰ì
(
‰ame_out
);

379 
	`‰ì
(
adu
);

385 
	`mp3_˛o£
(&
ö
);

386 
	`mp3_˛o£
(&
out
);

388 
	`aq_de°roy
(&
qö
);

389 
	`aq_de°roy
(&
qout
);

392 
	}
}

	@mp3-write.c

5 
	~<°dio.h
>

6 
	~<î∫o.h
>

7 
	~<as£π.h
>

8 
	~<°dlib.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<°rög.h
>

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

15 
	~"mp3.h
"

16 
	~"bv.h
"

21 
	$mp3_fûl_si
(
mp3_‰ame_t
 *
‰ame
) {

22 
	`as£π
(
‰ame
 !
NULL
);

23 
	`as£π
((
‰ame
->
si_bôsize
 != 0) ||

26 *
±r
 = 
‰ame
->
øw
 + 4;

27 i‡(
‰ame
->
¥Ÿ
 == 0)

28 
±r
 += 2;

30 
bv_t
 
bv
;

31 
	`bv_öô
(&
bv
, 
±r
, 
‰ame
->
si_bôsize
);

33 
mp3_si_t
 *
si
 = &
‰ame
->si;

34 
nch
 = (
‰ame
->
mode
 != 3) ? 2 : 1;

36 
	`bv_put_bôs
(&
bv
, 
si
->
maö_d©a_íd
, 9);

37 
	`bv_put_bôs
(&
bv
, 
si
->
¥iv©e_bôs
, 
nch
 == 2 ? 3 : 5);

39 
i
;

40 
i
 = 0; i < 
nch
; i++) {

41 
b™d
;

42 
b™d
 = 0; band < 4; band++)

43 
	`bv_put_bôs
(&
bv
, 
si
->
ch™√l
[
i
].
scfsi
[
b™d
], 1);

46 
gri
;

47 
gri
 = 0; gri < 2; gri++) {

48 
i
 = 0; i < 
nch
; i++) {

49 
mp3_gønuÀ_t
 *
gr
 = &
si
->
ch™√l
[
i
].
gønuÀ
[
gri
];

51 
	`bv_put_bôs
(&
bv
, 
gr
->
∑π2_3_Àngth
, 12);

52 
	`bv_put_bôs
(&
bv
, 
gr
->
big_vÆues
, 9);

53 
	`bv_put_bôs
(&
bv
, 
gr
->
globÆ_gaö
, 8);

54 
	`bv_put_bôs
(&
bv
, 
gr
->
sˇÀ_comp
, 4);

55 
	`bv_put_bôs
(&
bv
, 
gr
->
block•lô_Êag
, 1);

57 i‡(
gr
->
block•lô_Êag
) {

58 
	`bv_put_bôs
(&
bv
, 
gr
->
block_ty≥
, 2);

59 
	`bv_put_bôs
(&
bv
, 
gr
->
swôch_poöt
, 1);

60 
	`bv_put_bôs
(&
bv
, 
gr
->
tbl_£l
[0], 5);

61 
	`bv_put_bôs
(&
bv
, 
gr
->
tbl_£l
[1], 5);

63 
j
;

64 
j
 = 0; j < 3; j++)

65 
	`bv_put_bôs
(&
bv
, 
gr
->
sub_gaö
[
j
], 3);

67 
j
;

68 
j
 = 0; j < 3; j++)

69 
	`bv_put_bôs
(&
bv
, 
gr
->
tbl_£l
[
j
], 5);

71 
	`bv_put_bôs
(&
bv
, 
gr
->
ªg0_˙t
, 4);

72 
	`bv_put_bôs
(&
bv
, 
gr
->
ªg1_˙t
, 3);

75 
	`bv_put_bôs
(&
bv
, 
gr
->
¥eÊag
, 1);

76 
	`bv_put_bôs
(&
bv
, 
gr
->
sˇÀ_sˇÀ
, 1);

77 
	`bv_put_bôs
(&
bv
, 
gr
->
˙t1tbl_£l
, 1);

81 
	`as£π
((
bv
.
Àn
 =bv.
idx
) || "Bitvector isÇot filled completely");

84 
	}
}

86 
bôøãèbÀ
[16];

87 
ßm∂î©ëabÀ
[4];

91 
	$mp3_fûl_hdr
(
mp3_‰ame_t
 *
‰ame
) {

92 
	`as£π
(
‰ame
 !
NULL
);

94 
bv_t
 
bv
;

95 
	`bv_öô
(&
bv
, 
‰ame
->
øw
, 4 * 8);

97 
	`bv_put_bôs
(&
bv
, 0xFFF, 12);

98 
	`bv_put_bôs
(&
bv
, 
‰ame
->
id
, 1);

99 
	`bv_put_bôs
(&
bv
, 
‰ame
->
œyî
, 2);

100 
	`bv_put_bôs
(&
bv
, 
‰ame
->
¥Ÿ
, 1);

101 
	`bv_put_bôs
(&
bv
, 
‰ame
->
bôøã_ödex
, 4);

102 
	`bv_put_bôs
(&
bv
, 
‰ame
->
ßm∂îfödex
, 2);

103 
	`bv_put_bôs
(&
bv
, 
‰ame
->
∑ddög_bô
, 1);

104 
	`bv_put_bôs
(&
bv
, 
‰ame
->
¥iv©e_bô
, 1);

105 
	`bv_put_bôs
(&
bv
, 
‰ame
->
mode
, 2);

106 
	`bv_put_bôs
(&
bv
, 
‰ame
->
mode_ext
, 2);

107 
	`bv_put_bôs
(&
bv
, 
‰ame
->
c›yright
, 1);

108 
	`bv_put_bôs
(&
bv
, 
‰ame
->
‹igöÆ
, 1);

109 
	`bv_put_bôs
(&
bv
, 
‰ame
->
emphasis
, 2);

110 i‡(
‰ame
->
¥Ÿ
 == 0) {

111 
‰ame
->
øw
[4] = føme->
¸c
[0];

112 
‰ame
->
øw
[5] = føme->
¸c
[1];

115 
	`as£π
((
bv
.
idx
 =bv.
Àn
) || "Bitvector isÇot filled completely");

117 
	`mp3_ˇlc_hdr
(
‰ame
);

120 
	}
}

124 
	$mp3_wrôe_‰ame
(
fûe_t
 *
mp3
, 
mp3_‰ame_t
 *
‰ame
) {

125 
	`as£π
(
mp3
 !
NULL
);

126 
	`as£π
(
‰ame
 !
NULL
);

128 i‡(
	`fûe_wrôe
(
mp3
, 
‰ame
->
øw
, føme->
‰ame_size
) <= 0)

129  
EEOF
;

132 
	}
}

137 #ifde‡
MP3_TEST


138 
	$maö
(
¨gc
, *
¨gv
[]) {

139 *
f
[2];

141 i‡(!(
f
[0] = *++
¨gv
) || !(f[1] = *++argv)) {

142 
	`Ârötf
(
°dîr
, "Usage: mp3-write mp3in mp3out\n");

146 
mp3_fûe_t
 
ö
;

147 i‡(!
	`mp3_›í_ªad
(&
ö
, 
f
[0])) {

148 
	`Ârötf
(
°dîr
, "CouldÇŸ o≥¿mp3 fûêf‹Ñód: %s\n", 
f
[0]);

152 
mp3_fûe_t
 
out
;

153 i‡(!
	`mp3_›í_wrôe
(&
out
, 
f
[1])) {

154 
	`Ârötf
(
°dîr
, "CouldÇŸ o≥¿mp3 fûêf‹ wrôe: %s\n", 
f
[1]);

155 
	`mp3_˛o£
(&
ö
);

159 
mp3_‰ame_t
 
‰ame
;

160 
	`mp3_√xt_‰ame
(&
ö
, &
‰ame
) > 0) {

161 
	`mem£t
(
‰ame
.
øw
, 0, 4 + føme.
si_size
);

162 i‡(!
	`mp3_fûl_hdr
(&
‰ame
) ||

163 !
	`mp3_fûl_si
(&
‰ame
) ||

164 (
	`mp3_wrôe_‰ame
(&
out
, &
‰ame
) <= 0)) {

165 
	`Ârötf
(
°dîr
, "CouldÇot write frame\n");

166 
	`mp3_˛o£
(&
ö
);

167 
	`mp3_˛o£
(&
out
);

172 
	`mp3_˛o£
(&
ö
);

173 
	`mp3_˛o£
(&
out
);

176 
	}
}

	@mp3.c

5 
	~<as£π.h
>

6 
	~<°dlib.h
>

8 
	~"mp3.h
"

15 
	gbôøãèbÀ
[16] = {

22 
	gßm∂î©ëabÀ
[4] = {

33 
	$mp3_ˇlc_hdr
(
mp3_‰ame_t
 *
‰ame
) {

34 
	`as£π
(
‰ame
 !
NULL
);

36 
‰ame
->
bôøã
 = 
bôøãèbÀ
[‰ame->
bôøã_ödex
];

37 
‰ame
->
ßm∂î©e
 = 
ßm∂î©ëabÀ
[‰ame->
ßm∂îfödex
];

38 
‰ame
->
ßm∂ñí
 = 1152;

39 
‰ame
->
si_size
 = føme->
mode
 != ()3 ? 32 : 17;

40 
‰ame
->
si_bôsize
 = føme->
si_size
 * 8;

43 
‰ame
->
‰ame_size
 = 144000 * føme->
bôøã
;

44 
‰ame
->
‰ame_size
 /‰ame->
ßm∂î©e
;

45 
‰ame
->
‰ame_size
 +‰ame->
∑ddög_bô
;

47 
‰ame
->
‰ame_d©a_size
 = føme->
‰ame_size
 - 4 - føme->
si_size
;

48 i‡(
‰ame
->
¥Ÿ
 == 0)

49 
‰ame
->
‰ame_d©a_size
 -= 2;

51 
‰ame
->
u£c
 = ()‰ame->
‰ame_size
 * 8 * 1000.0 /

52 (()
‰ame
->
bôøã
);

53 
	}
}

55 
	$mp3_‰ame_size
(
mp3_‰ame_t
 *
‰ame
) {

56  
MP3_HDR_SIZE
 + 
‰ame
->
si_size
 + føme->
adu_size
 + (‰ame->
¥Ÿ
 ? 0 : 2);

57 
	}
}

	@mp3.h

5 #i‚de‡
MP3_H__


6 
	#MP3_H__


	)

13 
	#MP3_RAW_SIZE
 4000

	)

18 
	#MP3_MAX_SYNC
 4000

	)

22 
	#MP3_HDR_SIZE
 4

	)

24 #ifde‡
__˝lu•lus


32 
l
[23];

33 
s
[3][13];

34 } 
	tmp3_sf_t
;

37 
s
;

38 
x
;

39 } 
	tmp3_ßm∂e_t
;

44 
	smp3_gønuÀ_s
 {

45 
∑π2_3_Àngth
;

46 
∑π2_Àngth
;

47 
∑π3_Àngth
;

49 
big_vÆues
;

50 
globÆ_gaö
;

52 
sˇÀ_comp
;

53 
¶í0
;

54 
¶í1
;

56 
block•lô_Êag
;

57 
block_ty≥
;

58 
swôch_poöt
;

59 
tbl_£l
[3];

60 
ªg0_˙t
;

61 
ªg1_˙t
;

62 
sub_gaö
[3];

63 
maxb™d
[3];

64 
maxb™dl
;

65 
maxb
;

66 
ªgi⁄1°¨t
;

67 
ªgi⁄2°¨t
;

68 
¥eÊag
;

69 
sˇÀ_sˇÀ
;

70 
˙t1tbl_£l
;

71 *
fuŒ_gaö
[3];

72 *
pow2gaö
;

74 
mp3_sf_t
 
sf
;

75 
mp3_ßm∂e_t
 
ßm∂es
[576];

76 } 
	tmp3_gønuÀ_t
;

81 
	smp3_ch™√l_s
 {

82 
scfsi
[4];

83 
mp3_gønuÀ_t
 
gønuÀ
[2];

84 } 
	tmp3_ch™√l_t
;

91 
	smp3_si_s
 {

92 
maö_d©a_íd
;

93 
¥iv©e_bôs
;

95 
mp3_ch™√l_t
 
ch™√l
[2];

96 } 
	tmp3_si_t
;

101 
	smp3_‰ame_s
 {

102 
id
;

103 
œyî
;

104 
¥Ÿ
;

105 
bôøã_ödex
;

106 
ßm∂îfödex
;

107 
∑ddög_bô
;

108 
¥iv©e_bô
;

109 
mode
;

110 
mode_ext
;

111 
c›yright
;

112 
‹igöÆ
;

113 
emphasis
;

115 
¸c
[2];

117 
mp3_si_t
 
si
;

118 
si_size
;

119 
si_bôsize
;

120 
adu_bôsize
;

121 
adu_size
;

124 
syncskù
;

125 
bôøã
;

126 
ßm∂î©e
;

127 
ßm∂ñí
;

128 
‰ame_size
;

129 
‰ame_d©a_size
;

130 
u£c
;

133 
øw
[
MP3_RAW_SIZE
];

134 } 
	tmp3_‰ame_t
;

139 
	#mp3_‰ame_d©a_begö
(
f
) \

140 ((
f
)->
øw
 + 4 + ((f)->
¥Ÿe˘ed
 ? 0 : 2Ë+ (f)->
si_size
)

	)

142 
	~"fûe.h
"

144 
mp3_ªad_si
(
mp3_‰ame_t
 *
‰ame
);

145 
mp3_ªad_hdr
(
mp3_‰ame_t
 *
‰ame
);

146 
mp3_ªad_sf
(
mp3_‰ame_t
 *
‰ame
);

147 
mp3_√xt_‰ame
(
fûe_t
 *
mp3
, 
mp3_‰ame_t
 *
‰ame
);

148 
mp3_u≈ack
(
mp3_‰ame_t
 *
‰ame
);

150 
mp3_fûl_si
(
mp3_‰ame_t
 *
‰ame
);

151 
mp3_fûl_hdr
(
mp3_‰ame_t
 *
‰ame
);

152 
mp3_wrôe_‰ame
(
fûe_t
 *
fûe
, 
mp3_‰ame_t
 *
‰ame
);

154 
mp3_å™s_‰ame
(
mp3_‰ame_t
 *
‰ame
);

156 
mp3_ˇlc_hdr
(
mp3_‰ame_t
 *
‰ame
);

157 
mp3_‰ame_size
(
mp3_‰ame_t
 *
‰ame
);

159 #ifde‡
__˝lu•lus


	@mp3stream.cc

1 
	~<sys/ty≥s.h
>

2 
	~<sys/°©.h
>

3 
	~<sys/io˘l.h
>

4 
	~<sys/time.h
>

6 
	~<f˙é.h
>

7 
	~<°dio.h
>

8 
	~<time.h
>

10 
	~<as£π.h
>

11 
	~<°rög.h
>

12 
	~<î∫o.h
>

14 
	~<io°ªam
>

15 
	~<°rög
>

16 
	~<ve˘‹
>

17 
usög
 
«me•a˚
 
	g°d
;

19 
	~"Eº‹.h
"

20 
	~"AudioC¨d.h
"

23 ˛as†
	cMp3Eº‹
 : 
public
 
Eº‹
 {

24 
public
:

25 
	$Mp3Eº‹
(
°rög
 
msg
Ë: 
	$Eº‹
(
msg
) { }

26 
vútuÆ
 ~
	$Mp3Eº‹
(Ë{ 
	}
}

29 ˛as†
	cEncodîEº‹
 : 
public
 
Eº‹
 {

30 
public
:

31 
	$EncodîEº‹
(
°rög
 
msg
Ë: 
	$Eº‹
(
msg
) { }

32 
vútuÆ
 ~
	$EncodîEº‹
(Ë{ 
	}
}

37 
	~"mp3.h
"

38 
	~"fûe.h
"

40 ˛as†
	cMp3Fûe
 {

41 
	m¥Ÿe˘ed
:

42 
fûe_t
 
fûe
;

44 
	mpublic
:

45 
Mp3Fûe
(
°rög
 
∑th
);

46 
Mp3Fûe
(
fd
);

47 ~
Mp3Fûe
();

49 
C›yFømeAndRëu∫Duøti⁄
(
fûe_t
 *
tofûe
);

51 
	m¥Ÿe˘ed
:

52 
mp3_‰ame_t
 
‰ame
;

53 
RódFøme
();

56 ˛as†
	cMp3FûeFöished
 {

57 
	mpublic
:

58 
	$Mp3FûeFöished
() { }

59 ~
	$Mp3FûeFöished
(Ë{ 
	}
}

62 
	gMp3Fûe
::
	$Mp3Fûe
(
°rög
 
∑th
) {

63 i‡(!
	`fûe_›í_ªad
(&
fûe
, 
∑th
.
	`c_°r
())) {

64 
throw
 
	`Mp3Eº‹
("CouldÇŸ o≥¿\"" + 
∑th
 + "\" (›í): " + 
	`°rög
(
	`°ªº‹
(
î∫o
)));

66 
	}
}

68 
	gMp3Fûe
::
	$Mp3Fûe
(
fd
) {

69 i‡(!
	`fûe_›í_fd
(&
fûe
, 
fd
)) {

70 
throw
 
	`Mp3Eº‹
("CouldÇŸ o≥¿(›í): " + 
	`°rög
(
	`°ªº‹
(
î∫o
)));

72 
	}
}

74 
	gMp3Fûe
::~
	$Mp3Fûe
() {

75 
	`fûe_˛o£
(&
fûe
);

76 
	}
}

78 
	gMp3Fûe
::
	$RódFøme
() {

79 
ªt
 = 
	`mp3_√xt_‰ame
(&
fûe
, &
‰ame
);

80 i‡(
ªt
 =
EEOF
)

81 
throw
 
	`Mp3FûeFöished
();

82 i‡(
ªt
 < 0)

83 
throw
 
	`Mp3Eº‹
("CouldÇŸÑódÇexà‰ame: " + 
	`°rög
(
	`°ªº‹
(
î∫o
)));

84 
	}
}

86 
	gMp3Fûe
::
	$C›yFømeAndRëu∫Duøti⁄
(
fûe_t
 *
tofûe
) {

87 
	`RódFøme
();

88 
ªt
 = 
	`fûe_wrôe
(
tofûe
, 
‰ame
.
øw
, føme.
‰ame_size
);

89 i‡(
ªt
 !
‰ame
.
‰ame_size
)

90 
throw
 
	`Mp3Eº‹
("CouldÇŸ c›y føme: " + 
	`°rög
(
	`°ªº‹
(
î∫o
)));

91  
‰ame
.
u£c
;

92 
	}
}

95 
	~<löux/soundˇrd.h
>

100 ˛as†
	cLameEncodî
 {

101 
	m¥Ÿe˘ed
:

102 
pid_t
 
pid
;

104 
AudioC¨d
 *
	mˇrd
;

105 
	mbôR©e
;

106 
°rög
 
	mœmeComm™d
;

108 
	møwD©aFd
;

109 
	mmp3D©aFd
;

111 
	mpublic
:

112 
LameEncodî
(
AudioC¨d
 *
ˇrd
, 
bôR©e
 = 128000,

113 
°rög
 
œmeComm™d
 = "lame");

114 ~
LameEncodî
();

117 
WrôeRawD©a
(
buf
[
øwD©aBlockSize
]);

118 
RódMp3D©a
(*
buf
, 
maxSize
);

120 
	m¥Ÿe˘ed
:

121 
SèπEncodî
();

122 
SèπEncodîChûd
(
öputFd
, 
ouçutFd
, 
ve˘‹
<
°rög
> &
v¨gs
);

125 
	gLameEncodî
::
	$LameEncodî
(
AudioC¨d
 *
ˇrd
, 
bôR©e
, 
°rög
 
œmeComm™d
) :

126 
	`pid
(-1), 
	`ˇrd
(
ˇrd
), 
	`bôR©e
(
bôR©e
), 
	`œmeComm™d
(
œmeComm™d
),

127 
	`øwD©aFd
(-1), 
	`mp3D©aFd
(-1) {

128 
	`SèπEncodî
();

129 
	}
}

131 
	gLameEncodî
::~
	$LameEncodî
() {

132 
	`St›Encodî
();

133 
	}
}

135 
	gLameEncodî
::
	$St›Encodî
() {

136 i‡(
pid
 > 0) {

137 
ªt
 = 
	`kûl
(
pid
, 
SIGTERM
);

138 i‡(
ªt
 < 0)

139 
throw
 
	`EncodîEº‹
("CouldÇot kill (SIGTERM)ÑunningÜame (kill): " +

140 
	`°rög
(
	`°ªº‹
(
î∫o
)));

142 c⁄° 
max_ªåõs
 = 5;

143 c⁄° 
ªåy_dñay
 = 5000;

144 
ªåõs
 = 0; 
i
 < 
max_ªåõs
; i++) {

145 
ªt
 = 
	`waôpid
(
pid
, 
NULL
, 
WNOHANG
);

146 i‡(
ªt
 < 0)

147 
throw
 
	`EncodîEº‹
("CouldÇot wait forÅhe childÅoÉxit (waitpid): "

148 + 
	`°rög
(
	`°ªº‹
(
î∫o
)));

149 i‡(
ªt
 =
pid
)

151 
	`u¶ìp
(
ªåy_dñay
);

154 
ªt
 = 
	`kûl
(
pid
, 
SIGKILL
);

155 i‡(
ªt
 < 0)

156 
throw
 
	`EncodîEº‹
("CouldÇot kill (SIGKILL)ÑunningÜame (kill): " +

157 
	`°rög
(
	`°ªº‹
(
î∫o
)));

159 
	}
}

161 
	gLameEncodî
::
	$SèπEncodî
() {

162 
buf
[256];

163 
ve˘‹
<
°rög
> 
v¨gs
;

166 
v¨gs
.
	`push_back
("-m");

167 
v¨gs
.
	`push_back
(
ˇrd
->
	`gëSãªo
() ? "j" : "m");

170 
v¨gs
.
	`push_back
("-s");

171 
	`¢¥ötf
(
buf
, (buf), "%f", 
ˇrd
->
gëSam∂eR©e
 / 1000.0);

172 
v¨gs
.
	`push_back
(
buf
);

175 
v¨gs
.
	`push_back
("-b");

176 
	`¢¥ötf
(
buf
, (buf), "%d", 
bôøã
 / 1000.0);

177 
v¨gs
.
	`push_back
(
buf
);

180 
ídünTe°
 = 0xabcd;

181 *
±r
 = (*)&
ídünTe°
;

182 i‡(
±r
[0] == 0xcd)

183 
v¨gs
.
	`push_back
("-x");

186 
v¨gs
.
	`push_back
("-");

187 
v¨gs
.
	`push_back
("-");

189 
ícodîI≈ut
[2];

190 
ícodîOuçut
[2];

192 
pùîë
 = 
	`pùe
(
ícodîI≈ut
);

193 i‡(
pùîë
 < 0)

194 
throw
 
	`EncodîEº‹
("CouldÇot create inputÖipes forÅhe MP3Éncoder (pipe): " +

195 
	`°rög
(
	`°ªº‹
(
î∫o
)));

196 
pùîë
 = 
	`pùe
(
ícodîOuçut
);

197 i‡(
pùîë
 < 0) {

198 
	`˛o£
(
ícodîI≈ut
[0]);

199 
	`˛o£
(
ícodîI≈ut
[1]);

200 
throw
 
	`EncodîEº‹
("CouldÇot create outputÖipes forÅhe MP3Éncoder (pipe): " +

201 
	`°rög
(
	`°ªº‹
(
î∫o
)));

204 i‡((
pid
 = 
	`f‹k
()) == 0) {

205 
	`˛o£
(
ícodîI≈ut
[1]);

206 
	`˛o£
(
ícodîOuçut
[0]);

208 
åy
 {

209 
	`SèπEncodîChûd
(
ícodîI≈ut
[0], 
ícodîOuçut
[1], 
v¨gs
);

210 } 
	`ˇtch
 (...) {

211 
	`exô
(1);

214 
	`exô
(1);

216 
	`˛o£
(
ícodîI≈ut
[0]);

217 
	`˛o£
(
ícodîOuçut
[1]);

219 
øwD©aFd
 = 
ícodîI≈ut
[1];

220 
mp3D©aFd
 = 
ícodîOuçut
[0];

222 
	}
}

224 
	gLameEncodî
::
SèπEncodîChûd
(
öputFd
, 
ouçutFd
, 
ve˘‹
<
°rög
> &
v¨gs
) {

225 
	gªt
;

227 
˛o£
(0); close(1); close(2);

230 
	gªt
 = 
dup2
(
öputFd
, 0);

231 i‡(
	gªt
 < 0) {

232 
˛o£
(
öputFd
);

233 
˛o£
(
ouçutFd
);

234 
throw
 
EncodîEº‹
("CouldÇot duplicateÅhe inputÖipe fd (dup2): " +

235 
°rög
(
°ªº‹
(
î∫o
)));

238 
	gªt
 = 
dup2
(
ouçutFd
, 1);

239 i‡(
	gªt
 < 0) {

240 
˛o£
(
öputFd
);

241 
˛o£
(
ouçutFd
);

242 
throw
 
EncodîEº‹
("CouldÇot duplicateÅhe inputÖipe fd (dup2): " +

243 
°rög
(
°ªº‹
(
î∫o
)));

246 c⁄° *
	g¨gs
[
v¨gs
.
size
() + 1];

247 
	gi
 = 0; i < 
	gv¨gs
.
size
(); i++)

248 
	g¨gs
[
i
] = (
v¨gs
[i]).
c_°r
();

249 
	g¨gs
[
v¨gs
.
size
()] = 
NULL
;

251 
	gªt
 = 
execvp
(
œmeComm™d
.
c_°r
(), 
¨gs
);

252 i‡(
	gªt
 < 0)

253 
throw
 
EncodîEº‹
("CouldÇŸÉxe¯" + 
œmeComm™d
 + " (execvp): " +

254 
°rög
(
°ªº‹
(
î∫o
)));

258 c⁄° 
MAX_WAIT_TIME
 (1 * 1000 * 1000);

260 
	$GëCuºítTimeMs
() {

261 
timevÆ
 
tv
;

262 
	`gëtimeofday
(&
tv
, 
NULL
);

263  
tv
.
tv_£c
 * 1000000 +Åv.
tv_u£c
;

264 
	}
}

266 
	$maö
(
¨gc
, *
¨gv
[]) {

267 
åy
 {

268 
AudioC¨d
 
audio
;

269 
fûe_t
 
ouçut
;

270 i‡(!
	`fûe_›í_wrôe
(&
ouçut
, "/dev/null"))

271 
throw
 
	`Mp3Eº‹
("CouldÇŸ o≥¿/dev/nuŒ f‹ wrôög: " + 
	`°rög
(
	`°ªº‹
(
î∫o
)));

273 
waô_time
 = 0;

275 
i
 = 1; i < 
¨gc
; i++) {

276 
cout
 << "Såómög " << 
¨gv
[
i
] << "..." << 
ídl
;

277 
Mp3Fûe
 
	`fûe
(
¨gv
[
i
]);

278 
åy
 {

280 
°¨t
 = 
	`GëCuºítTimeMs
();

282 
waô_time
 +
fûe
.
	`C›yFømeAndRëu∫Duøti⁄
(&
ouçut
);

284 i‡(
waô_time
 > 1000)

285 
	`u¶ìp
(
waô_time
);

287 
waô_time
 -
	`GëCuºítTimeMs
(Ë- 
°¨t
;

288 i‡(
	`abs
(
waô_time
Ë> 
MAX_WAIT_TIME
)

289 
waô_time
 = 0;

291 } 
	`ˇtch
 (
Mp3FûeFöished
) {

294 } 
	`ˇtch
 (
Eº‹
 &
e
) {

295 
cout
 << "Caughà™Éº‹ whûê°ªamög: " << 
e
.
	`gëMesßge
(Ë<< 
ídl
;

299 
	}
}

	@urlTest.cc

1 
	~<°rög
>

2 
	~<io°ªam
>

3 
usög
 
«me•a˚
 
	g°d
;

5 
	~"Uæ.h
"

7 
	$¥ötUæ
(c⁄° 
Uæ
 &
uæ
) {

8 
cout
 << 
uæ
.
	`gëPrŸocﬁ
() << "://";

9 
°rög
 
logö
 = 
uæ
.
	`gëLogö
();

10 
°rög
 
∑ssw‹d
 = 
uæ
.
	`gëPassw‹d
();

11 
°rög
 
ho°
 = 
uæ
.
	`gëHo°
();

12 
p‹t
 = 
uæ
.
	`gëP‹t
();

14 i‡(
logö
 != "") {

15 
cout
 << 
logö
;

16 i‡(
∑ssw‹d
 != "") {

17 
cout
 << ":" << 
∑ssw‹d
;

19 
cout
 << "@";

21 
cout
 << 
ho°
;

22 i‡(
p‹t
 != 0) {

23 
cout
 << ":" << 
p‹t
;

25 
cout
 << "/" << 
uæ
.
	`gëP©h
();

26 
cout
 << 
ídl
;

27 
	}
}

29 
	$maö
() {

30 
Uæ
 
	`uæ
("file:///foobar/");

31 
	`¥ötUæ
(
uæ
);

33 
	`¥ötUæ
(
	`Uæ
("icy://localhost:8000/mp3test"));

34 
	`¥ötUæ
(
	`Uæ
("icy://manuel@localhost:8000/mp3test"));

35 
	`¥ötUæ
(
	`Uæ
(""));

38 
	}
}

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
ö_addr_t
 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/assert.h

23 #ifdef 
_ASSERT_H


25 #unde‡
_ASSERT_H


26 #unde‡
as£π


27 #unde‡
__ASSERT_VOID_CAST


29 #ifdef 
__USE_GNU


30 #unde‡
as£π_≥º‹


35 
	#_ASSERT_H
 1

	)

36 
	~<„©uªs.h
>

38 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

39 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

41 
	#__ASSERT_VOID_CAST
 ()

	)

49 #ifdef 
NDEBUG


51 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

59 #ifdef 
__USE_GNU


60 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

65 #i‚de‡
_ASSERT_H_DECLS


66 
	#_ASSERT_H_DECLS


	)

67 
__BEGIN_DECLS


70 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

71 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

72 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

75 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

76 
__löe
,

77 
__c⁄°
 *
__fun˘i⁄
)

78 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

83 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

84 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

87 
__END_DECLS


93 #i‡
	`__GNUC_PREREQ
 (3, 0)

94 
	#as£π
(
ex¥
) \

95 (
	`__ASSERT_VOID_CAST
 (
	`__buûtö_ex≥˘
 (!!(
ex¥
), 1) ? 0 : \

96 (
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, \

97 
__ASSERT_FUNCTION
), 0)))

	)

99 
	#as£π
(
ex¥
) \

100 (
	`__ASSERT_VOID_CAST
 ((
ex¥
) ? 0 : \

101 (
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, \

102 
__ASSERT_FUNCTION
), 0)))

	)

105 #ifdef 
__USE_GNU


106 #i‡
	`__GNUC_PREREQ
 (3, 0)

107 
	#as£π_≥º‹
(
î∫um
) \

108 (
	`__ASSERT_VOID_CAST
 (
	`__buûtö_ex≥˘
 (!(
î∫um
), 1) ? 0 : \

109 (
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, \

110 
__ASSERT_FUNCTION
), 0)))

	)

112 
	#as£π_≥º‹
(
î∫um
) \

113 (
	`__ASSERT_VOID_CAST
 (!(
î∫um
) ? 0 : \

114 (
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, \

115 
__ASSERT_FUNCTION
), 0)))

	)

124 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

125 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

127 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

128 
	#__ASSERT_FUNCTION
 
__func__


	)

130 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

23 #i‚def 
_FCNTL_H


24 
	#_FCNTL_H
 1

	)

26 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 
	~<bôs/f˙é.h
>

36 #ifde‡
__USE_XOPEN


37 
	~<sys/°©.h
>

40 #ifdef 
__USE_MISC


41 #i‚de‡
R_OK


44 
	#R_OK
 4

	)

45 
	#W_OK
 2

	)

46 
	#X_OK
 1

	)

47 
	#F_OK
 0

	)

52 #ifde‡
__USE_XOPEN


53 
	#SEEK_SET
 0

	)

54 
	#SEEK_CUR
 1

	)

55 
	#SEEK_END
 2

	)

63 
f˙é
 (
__fd
, 
__cmd
, ...);

71 #i‚de‡
__USE_FILE_OFFSET64


72 
›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...);

74 #ifde‡
__REDIRECT


75 
__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
);

77 
	#›í
 
›í64


	)

80 #ifde‡
__USE_LARGEFILE64


81 
›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...);

89 #i‚de‡
__USE_FILE_OFFSET64


90 
¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
);

92 #ifde‡
__REDIRECT


93 
__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

94 
¸ót64
);

96 
	#¸ót
 
¸ót64


	)

99 #ifde‡
__USE_LARGEFILE64


100 
¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
);

103 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

104 && !
deföed
 
	g__USE_POSIX
))

113 
	#F_ULOCK
 0

	)

114 
	#F_LOCK
 1

	)

115 
	#F_TLOCK
 2

	)

116 
	#F_TEST
 3

	)

118 #i‚de‡
__USE_FILE_OFFSET64


119 
lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

121 #ifde‡
__REDIRECT


122 
__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

124 
	#lockf
 
lockf64


	)

127 #ifde‡
__USE_LARGEFILE64


128 
lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

132 #ifde‡
__USE_XOPEN2K


135 #i‚de‡
__USE_FILE_OFFSET64


136 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

137 
__advi£
Ë
__THROW
;

139 #ifde‡
__REDIRECT


140 
	`__REDIRECT
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

141 
__off64_t
 
__Àn
, 
__advi£
Ë
__THROW
,

142 
posix_Ádvi£64
);

144 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

147 #ifde‡
__USE_LARGEFILE64


148 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

149 
__advi£
Ë
__THROW
;

157 #i‚de‡
__USE_FILE_OFFSET64


158 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

160 #ifde‡
__REDIRECT


161 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

162 
__off64_t
 
__Àn
),

163 
posix_ÁŒoˇã64
);

165 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

168 #ifde‡
__USE_LARGEFILE64


169 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

173 
__END_DECLS


	@/usr/include/lame/lame.h

23 #i‚de‡
LAME_LAME_H


24 
	#LAME_LAME_H


	)

26 
	~<°dio.h
>

27 
	~<°d¨g.h
>

29 #i‡
deföed
(
__˝lu•lus
)

33 #i‡
deföed
(
WIN32
)

34 #unde‡
CDECL


35 
	#CDECL
 
_cde˛


	)

37 
	#CDECL


	)

41 
	evbr_mode_e
 {

42 
vbr_off
=0,

43 
vbr_mt
,

44 
vbr_rh
,

45 
vbr_abr
,

46 
vbr_måh
,

47 
vbr_max_ödiˇt‹
,

48 
vbr_deÁu…
=
vbr_rh


49 } 
	tvbr_mode
;

53 
	eMPEG_mode_e
 {

54 
STEREO
 = 0,

55 
JOINT_STEREO
,

56 
DUAL_CHANNEL
,

57 
MONO
,

58 
NOT_SET
,

59 
MAX_INDICATOR


60 } 
	tMPEG_mode
;

63 
	ePaddög_ty≥_e
 {

64 
PAD_NO
 = 0,

65 
PAD_ALL
,

66 
PAD_ADJUST
,

67 
PAD_MAX_INDICATOR


68 } 
	tPaddög_ty≥
;

73 
	e¥e£t_mode_e
 {

76 
ABR_8
 = 8,

77 
ABR_320
 = 320,

79 
V9
 = 410,

80 
VBR_10
 = 410,

81 
V8
 = 420,

82 
VBR_20
 = 420,

83 
V7
 = 430,

84 
VBR_30
 = 430,

85 
V6
 = 440,

86 
VBR_40
 = 440,

87 
V5
 = 450,

88 
VBR_50
 = 450,

89 
V4
 = 460,

90 
VBR_60
 = 460,

91 
V3
 = 470,

92 
VBR_70
 = 470,

93 
V2
 = 480,

94 
VBR_80
 = 480,

95 
V1
 = 490,

96 
VBR_90
 = 490,

97 
V0
 = 500,

98 
VBR_100
 = 500,

103 
R3MIX
 = 1000,

104 
STANDARD
 = 1001,

105 
EXTREME
 = 1002,

106 
INSANE
 = 1003,

107 
STANDARD_FAST
 = 1004,

108 
EXTREME_FAST
 = 1005,

109 
MEDIUM
 = 1006,

110 
MEDIUM_FAST
 = 1007

111 } 
	t¥e£t_mode
;

115 
	easm_›timiz©i⁄s_e
 {

116 
MMX
 = 1,

117 
AMD_3DNOW
 = 2,

118 
SSE
 = 3

119 } 
	tasm_›timiz©i⁄s
;

123 
	ePsy_modñ_e
 {

124 
PSY_GPSYCHO
 = 1,

125 
PSY_NSPSYTUNE
 = 2

126 } 
	tPsy_modñ
;

129 
œme_globÆ_°ru˘
;

130 
œme_globÆ_°ru˘
 
	tœme_globÆ_Êags
;

131 
œme_globÆ_Êags
 *
	tœme_t
;

152 
œme_globÆ_Êags
 * 
CDECL
 
œme_öô
();

154 
CDECL
 
œme_öô_ﬁd
(
œme_globÆ_Êags
 *);

166 
CDECL
 
œme_£t_num_ßm∂es
(
œme_globÆ_Êags
 *, );

167 
CDECL
 
œme_gë_num_ßm∂es
(c⁄° 
œme_globÆ_Êags
 *);

170 
CDECL
 
œme_£t_ö_ßm∂î©e
(
œme_globÆ_Êags
 *, );

171 
CDECL
 
œme_gë_ö_ßm∂î©e
(c⁄° 
œme_globÆ_Êags
 *);

174 
CDECL
 
œme_£t_num_ch™√ls
(
œme_globÆ_Êags
 *, );

175 
CDECL
 
œme_gë_num_ch™√ls
(c⁄° 
œme_globÆ_Êags
 *);

181 
CDECL
 
œme_£t_sˇÀ
(
œme_globÆ_Êags
 *, );

182 
CDECL
 
œme_gë_sˇÀ
(c⁄° 
œme_globÆ_Êags
 *);

189 
CDECL
 
œme_£t_sˇÀ_À·
(
œme_globÆ_Êags
 *, );

190 
CDECL
 
œme_gë_sˇÀ_À·
(c⁄° 
œme_globÆ_Êags
 *);

197 
CDECL
 
œme_£t_sˇÀ_right
(
œme_globÆ_Êags
 *, );

198 
CDECL
 
œme_gë_sˇÀ_right
(c⁄° 
œme_globÆ_Êags
 *);

208 
CDECL
 
œme_£t_out_ßm∂î©e
(
œme_globÆ_Êags
 *, );

209 
CDECL
 
œme_gë_out_ßm∂î©e
(c⁄° 
œme_globÆ_Êags
 *);

216 
CDECL
 
œme_£t_™Æysis
(
œme_globÆ_Êags
 *, );

217 
CDECL
 
œme_gë_™Æysis
(c⁄° 
œme_globÆ_Êags
 *);

224 
CDECL
 
œme_£t_bWrôeVbrTag
(
œme_globÆ_Êags
 *, );

225 
CDECL
 
œme_gë_bWrôeVbrTag
(c⁄° 
œme_globÆ_Êags
 *);

228 
CDECL
 
œme_£t_decode_⁄ly
(
œme_globÆ_Êags
 *, );

229 
CDECL
 
œme_gë_decode_⁄ly
(c⁄° 
œme_globÆ_Êags
 *);

233 
CDECL
 
œme_£t_ogg
(
œme_globÆ_Êags
 *, );

234 
CDECL
 
œme_gë_ogg
(c⁄° 
œme_globÆ_Êags
 *);

244 
CDECL
 
œme_£t_quÆôy
(
œme_globÆ_Êags
 *, );

245 
CDECL
 
œme_gë_quÆôy
(c⁄° 
œme_globÆ_Êags
 *);

251 
CDECL
 
œme_£t_mode
(
œme_globÆ_Êags
 *, 
MPEG_mode
);

252 
MPEG_mode
 
CDECL
 
œme_gë_mode
(c⁄° 
œme_globÆ_Êags
 *);

259 
CDECL
 
œme_£t_mode_automs
(
œme_globÆ_Êags
 *, );

260 
CDECL
 
œme_gë_mode_automs
(c⁄° 
œme_globÆ_Êags
 *);

266 
CDECL
 
œme_£t_f‹˚_ms
(
œme_globÆ_Êags
 *, );

267 
CDECL
 
œme_gë_f‹˚_ms
(c⁄° 
œme_globÆ_Êags
 *);

270 
CDECL
 
œme_£t_‰ì_f‹m©
(
œme_globÆ_Êags
 *, );

271 
CDECL
 
œme_gë_‰ì_f‹m©
(c⁄° 
œme_globÆ_Êags
 *);

274 
CDECL
 
œme_£t_födRïœyGaö
(
œme_globÆ_Êags
 *, );

275 
CDECL
 
œme_gë_födRïœyGaö
(c⁄° 
œme_globÆ_Êags
 *);

281 
CDECL
 
œme_£t_decode_⁄_the_Êy
(
œme_globÆ_Êags
 *, );

282 
CDECL
 
œme_gë_decode_⁄_the_Êy
(c⁄° 
œme_globÆ_Êags
 *);

286 
CDECL
 
œme_£t_RïœyGaö_öput
(
œme_globÆ_Êags
 *, );

287 
CDECL
 
œme_gë_RïœyGaö_öput
(c⁄° 
œme_globÆ_Êags
 *);

292 
CDECL
 
œme_£t_RïœyGaö_decode
(
œme_globÆ_Êags
 *, );

293 
CDECL
 
œme_gë_RïœyGaö_decode
(c⁄° 
œme_globÆ_Êags
 *);

297 
CDECL
 
œme_£t_födPókSam∂e
(
œme_globÆ_Êags
 *, );

298 
CDECL
 
œme_gë_födPókSam∂e
(c⁄° 
œme_globÆ_Êags
 *);

313 
CDECL
 
œme_£t_îr‹f
(
œme_globÆ_Êags
 *,

314 (*
func
)(c⁄° *, 
va_li°
));

315 
CDECL
 
œme_£t_debugf
(
œme_globÆ_Êags
 *,

316 (*
func
)(c⁄° *, 
va_li°
));

317 
CDECL
 
œme_£t_msgf
 (
œme_globÆ_Êags
 *,

318 (*
func
)(c⁄° *, 
va_li°
));

323 
CDECL
 
œme_£t_bøã
(
œme_globÆ_Êags
 *, );

324 
CDECL
 
œme_gë_bøã
(c⁄° 
œme_globÆ_Êags
 *);

325 
CDECL
 
œme_£t_com¥essi⁄_øtio
(
œme_globÆ_Êags
 *, );

326 
CDECL
 
œme_gë_com¥essi⁄_øtio
(c⁄° 
œme_globÆ_Êags
 *);

329 
CDECL
 
œme_£t_¥e£t
–
œme_globÆ_Êags
* 
gÂ
, );

330 
CDECL
 
œme_£t_asm_›timiz©i⁄s
–
œme_globÆ_Êags
* 
gÂ
, , );

338 
CDECL
 
œme_£t_c›yright
(
œme_globÆ_Êags
 *, );

339 
CDECL
 
œme_gë_c›yright
(c⁄° 
œme_globÆ_Êags
 *);

342 
CDECL
 
œme_£t_‹igöÆ
(
œme_globÆ_Êags
 *, );

343 
CDECL
 
œme_gë_‹igöÆ
(c⁄° 
œme_globÆ_Êags
 *);

346 
CDECL
 
œme_£t_îr‹_¥Ÿe˘i⁄
(
œme_globÆ_Êags
 *, );

347 
CDECL
 
œme_gë_îr‹_¥Ÿe˘i⁄
(c⁄° 
œme_globÆ_Êags
 *);

350 
CDECL
 
œme_£t_∑ddög_ty≥
(
œme_globÆ_Êags
 *, 
Paddög_ty≥
);

351 
Paddög_ty≥
 
CDECL
 
œme_gë_∑ddög_ty≥
(c⁄° 
œme_globÆ_Êags
 *);

354 
CDECL
 
œme_£t_exãnsi⁄
(
œme_globÆ_Êags
 *, );

355 
CDECL
 
œme_gë_exãnsi⁄
(c⁄° 
œme_globÆ_Êags
 *);

358 
CDECL
 
œme_£t_°ri˘_ISO
(
œme_globÆ_Êags
 *, );

359 
CDECL
 
œme_gë_°ri˘_ISO
(c⁄° 
œme_globÆ_Êags
 *);

367 
CDECL
 
œme_£t_dißbÀ_ª£rvoú
(
œme_globÆ_Êags
 *, );

368 
CDECL
 
œme_gë_dißbÀ_ª£rvoú
(c⁄° 
œme_globÆ_Êags
 *);

371 
CDECL
 
œme_£t_qu™t_comp
(
œme_globÆ_Êags
 *, );

372 
CDECL
 
œme_gë_qu™t_comp
(c⁄° 
œme_globÆ_Êags
 *);

373 
CDECL
 
œme_£t_qu™t_comp_sh‹t
(
œme_globÆ_Êags
 *, );

374 
CDECL
 
œme_gë_qu™t_comp_sh‹t
(c⁄° 
œme_globÆ_Êags
 *);

376 
CDECL
 
œme_£t_ex≥rimíèlX
(
œme_globÆ_Êags
 *, );

377 
CDECL
 
œme_gë_ex≥rimíèlX
(c⁄° 
œme_globÆ_Êags
 *);

380 
CDECL
 
œme_£t_ex≥rimíèlY
(
œme_globÆ_Êags
 *, );

381 
CDECL
 
œme_gë_ex≥rimíèlY
(c⁄° 
œme_globÆ_Êags
 *);

384 
CDECL
 
œme_£t_ex≥rimíèlZ
(
œme_globÆ_Êags
 *, );

385 
CDECL
 
œme_gë_ex≥rimíèlZ
(c⁄° 
œme_globÆ_Êags
 *);

388 
CDECL
 
œme_£t_exp_n•sytu√
(
œme_globÆ_Êags
 *, );

389 
CDECL
 
œme_gë_exp_n•sytu√
(c⁄° 
œme_globÆ_Êags
 *);

391 
CDECL
 
œme_£t_msfix
(
œme_globÆ_Êags
 *, );

392 
CDECL
 
œme_gë_msfix
(c⁄° 
œme_globÆ_Êags
 *);

394 
œme_£t_exp_n•sytu√2_öt
–
œme_globÆ_Êags
*, , );

395 
œme_£t_exp_n•sytu√2_ªÆ
–
œme_globÆ_Êags
*, , );

396 * 
œme_£t_exp_n•sytu√2_poöãr
–
œme_globÆ_Êags
*, , *);

402 
CDECL
 
œme_£t_VBR
(
œme_globÆ_Êags
 *, 
vbr_mode
);

403 
vbr_mode
 
CDECL
 
œme_gë_VBR
(c⁄° 
œme_globÆ_Êags
 *);

406 
CDECL
 
œme_£t_VBR_q
(
œme_globÆ_Êags
 *, );

407 
CDECL
 
œme_gë_VBR_q
(c⁄° 
œme_globÆ_Êags
 *);

410 
CDECL
 
œme_£t_VBR_món_bôøã_kbps
(
œme_globÆ_Êags
 *, );

411 
CDECL
 
œme_gë_VBR_món_bôøã_kbps
(c⁄° 
œme_globÆ_Êags
 *);

413 
CDECL
 
œme_£t_VBR_mö_bôøã_kbps
(
œme_globÆ_Êags
 *, );

414 
CDECL
 
œme_gë_VBR_mö_bôøã_kbps
(c⁄° 
œme_globÆ_Êags
 *);

416 
CDECL
 
œme_£t_VBR_max_bôøã_kbps
(
œme_globÆ_Êags
 *, );

417 
CDECL
 
œme_gë_VBR_max_bôøã_kbps
(c⁄° 
œme_globÆ_Êags
 *);

423 
CDECL
 
œme_£t_VBR_h¨d_mö
(
œme_globÆ_Êags
 *, );

424 
CDECL
 
œme_gë_VBR_h¨d_mö
(c⁄° 
œme_globÆ_Êags
 *);

427 
CDECL
 
œme_£t_¥e£t_exp›ts
(
œme_globÆ_Êags
 *, );

434 
CDECL
 
œme_£t_low∑ss‰eq
(
œme_globÆ_Êags
 *, );

435 
CDECL
 
œme_gë_low∑ss‰eq
(c⁄° 
œme_globÆ_Êags
 *);

437 
CDECL
 
œme_£t_low∑sswidth
(
œme_globÆ_Êags
 *, );

438 
CDECL
 
œme_gë_low∑sswidth
(c⁄° 
œme_globÆ_Êags
 *);

441 
CDECL
 
œme_£t_high∑ss‰eq
(
œme_globÆ_Êags
 *, );

442 
CDECL
 
œme_gë_high∑ss‰eq
(c⁄° 
œme_globÆ_Êags
 *);

444 
CDECL
 
œme_£t_high∑sswidth
(
œme_globÆ_Êags
 *, );

445 
CDECL
 
œme_gë_high∑sswidth
(c⁄° 
œme_globÆ_Êags
 *);

454 
CDECL
 
œme_£t_ATH⁄ly
(
œme_globÆ_Êags
 *, );

455 
CDECL
 
œme_gë_ATH⁄ly
(c⁄° 
œme_globÆ_Êags
 *);

458 
CDECL
 
œme_£t_ATHsh‹t
(
œme_globÆ_Êags
 *, );

459 
CDECL
 
œme_gë_ATHsh‹t
(c⁄° 
œme_globÆ_Êags
 *);

462 
CDECL
 
œme_£t_noATH
(
œme_globÆ_Êags
 *, );

463 
CDECL
 
œme_gë_noATH
(c⁄° 
œme_globÆ_Êags
 *);

466 
CDECL
 
œme_£t_ATHty≥
(
œme_globÆ_Êags
 *, );

467 
CDECL
 
œme_gë_ATHty≥
(c⁄° 
œme_globÆ_Êags
 *);

470 
CDECL
 
œme_£t_ATHlowî
(
œme_globÆ_Êags
 *, );

471 
CDECL
 
œme_gë_ATHlowî
(c⁄° 
œme_globÆ_Êags
 *);

474 
CDECL
 
œme_£t_©hØ_ty≥
–
œme_globÆ_Êags
 *, );

475 
CDECL
 
œme_gë_©hØ_ty≥
–c⁄° 
œme_globÆ_Êags
 *);

478 
CDECL
 
œme_£t_©hØ_loud≠¥ox
–
œme_globÆ_Êags
 *, );

479 
CDECL
 
œme_gë_©hØ_loud≠¥ox
–c⁄° 
œme_globÆ_Êags
 *);

482 
CDECL
 
œme_£t_©hØ_£nsôivôy
–
œme_globÆ_Êags
 *, );

483 
CDECL
 
œme_gë_©hØ_£nsôivôy
–c⁄° 
œme_globÆ_Êags
* );

486 
CDECL
 
œme_£t_cwlimô
(
œme_globÆ_Êags
 *, );

487 
CDECL
 
œme_gë_cwlimô
(c⁄° 
œme_globÆ_Êags
 *);

493 
CDECL
 
œme_£t_Ælow_diff_sh‹t
(
œme_globÆ_Êags
 *, );

494 
CDECL
 
œme_gë_Ælow_diff_sh‹t
(c⁄° 
œme_globÆ_Êags
 *);

497 
CDECL
 
œme_£t_u£Temp‹Æ
(
œme_globÆ_Êags
 *, );

498 
CDECL
 
œme_gë_u£Temp‹Æ
(c⁄° 
œme_globÆ_Êags
 *);

501 
CDECL
 
œme_£t_öãrChR©io
(
œme_globÆ_Êags
 *, );

502 
CDECL
 
œme_gë_öãrChR©io
(c⁄° 
œme_globÆ_Êags
 *);

505 
CDECL
 
œme_£t_no_sh‹t_blocks
(
œme_globÆ_Êags
 *, );

506 
CDECL
 
œme_gë_no_sh‹t_blocks
(c⁄° 
œme_globÆ_Êags
 *);

509 
CDECL
 
œme_£t_f‹˚_sh‹t_blocks
(
œme_globÆ_Êags
 *, );

510 
CDECL
 
œme_gë_f‹˚_sh‹t_blocks
(c⁄° 
œme_globÆ_Êags
 *);

516 
CDECL
 
œme_£t_emphasis
(
œme_globÆ_Êags
 *, );

517 
CDECL
 
œme_gë_emphasis
(c⁄° 
œme_globÆ_Êags
 *);

526 
CDECL
 
œme_gë_vîsi⁄
(c⁄° 
œme_globÆ_Êags
 *);

529 
CDECL
 
œme_gë_ícodî_dñay
(c⁄° 
œme_globÆ_Êags
 *);

537 
CDECL
 
œme_gë_ícodî_∑ddög
(c⁄° 
œme_globÆ_Êags
 *);

540 
CDECL
 
œme_gë_‰amesize
(c⁄° 
œme_globÆ_Êags
 *);

543 
CDECL
 
œme_gë_mf_ßm∂es_to_ícode
–c⁄° 
œme_globÆ_Êags
* 
gÂ
 );

552 
CDECL
 
œme_gë_size_mp3buf„r
–c⁄° 
œme_globÆ_Êags
* 
gÂ
 );

555 
CDECL
 
œme_gë_‰ameNum
(c⁄° 
œme_globÆ_Êags
 *);

561 
CDECL
 
œme_gë_tŸÆ‰ames
(c⁄° 
œme_globÆ_Êags
 *);

564 
CDECL
 
œme_gë_RadioGaö
(c⁄° 
œme_globÆ_Êags
 *);

567 
CDECL
 
œme_gë_Audi›hûeGaö
(c⁄° 
œme_globÆ_Êags
 *);

570 
CDECL
 
œme_gë_PókSam∂e
(c⁄° 
œme_globÆ_Êags
 *);

573 
CDECL
 
œme_gë_decode_⁄_the_Êy
(c⁄° 
œme_globÆ_Êags
 *);

576 
CDECL
 
œme_gë_födRïœyGaö
(c⁄° 
œme_globÆ_Êags
 *);

581 
CDECL
 
œme_gë_no˛ùGaöCh™ge
(c⁄° 
œme_globÆ_Êags
 *);

587 
CDECL
 
œme_gë_no˛ùSˇÀ
(c⁄° 
œme_globÆ_Êags
 *);

600 
CDECL
 
œme_öô_∑øms
(
œme_globÆ_Êags
 * const );

608 c⁄° * 
CDECL
 
gë_œme_vîsi⁄
 ( );

609 c⁄° * 
CDECL
 
gë_œme_sh‹t_vîsi⁄
 ( );

610 c⁄° * 
CDECL
 
gë_œme_vîy_sh‹t_vîsi⁄
 ( );

611 c⁄° * 
CDECL
 
gë_psy_vîsi⁄
 ( );

612 c⁄° * 
CDECL
 
gë_œme_uæ
 ( );

620 
maj‹
;

621 
mö‹
;

622 
Æpha
;

623 
bëa
;

626 
psy_maj‹
;

627 
psy_mö‹
;

628 
psy_Æpha
;

629 
psy_bëa
;

632 c⁄° *
„©uªs
;

633 } 
	tœme_vîsi⁄_t
;

634 
CDECL
 
gë_œme_vîsi⁄_numîiˇl
 ( 
œme_vîsi⁄_t
 *const );

641 
CDECL
 
œme_¥öt_c⁄fig
(c⁄° 
œme_globÆ_Êags
* 
gÂ
);

643 
CDECL
 
œme_¥öt_öã∫Æs
–c⁄° 
œme_globÆ_Êags
 *
gÂ
);

678 
CDECL
 
œme_ícode_buf„r
 (

679 
œme_globÆ_Êags
* 
gÂ
,

680 c⁄° 
buf„r_l
 [],

681 c⁄° 
buf„r_r
 [],

682 c⁄° 
nßm∂es
,

683 * 
mp3buf
,

684 c⁄° 
mp3buf_size
 );

693 
CDECL
 
œme_ícode_buf„r_öãæóved
(

694 
œme_globÆ_Êags
* 
gÂ
,

695 
pcm
[],

697 
num_ßm∂es
,

700 * 
mp3buf
,

701 
mp3buf_size
 );

709 
CDECL
 
œme_ícode_buf„r_Êﬂt
(

710 
œme_globÆ_Êags
* 
gÂ
,

711 c⁄° 
buf„r_l
 [],

712 c⁄° 
buf„r_r
 [],

713 c⁄° 
nßm∂es
,

714 * 
mp3buf
,

715 c⁄° 
mp3buf_size
 );

727 
CDECL
 
œme_ícode_buf„r_l⁄g
(

728 
œme_globÆ_Êags
* 
gÂ
,

729 c⁄° 
buf„r_l
 [],

730 c⁄° 
buf„r_r
 [],

731 c⁄° 
nßm∂es
,

732 * 
mp3buf
,

733 c⁄° 
mp3buf_size
 );

741 
CDECL
 
œme_ícode_buf„r_l⁄g2
(

742 
œme_globÆ_Êags
* 
gÂ
,

743 c⁄° 
buf„r_l
 [],

744 c⁄° 
buf„r_r
 [],

745 c⁄° 
nßm∂es
,

746 * 
mp3buf
,

747 c⁄° 
mp3buf_size
 );

759 
CDECL
 
œme_ícode_buf„r_öt
(

760 
œme_globÆ_Êags
* 
gÂ
,

761 c⁄° 
buf„r_l
 [],

762 c⁄° 
buf„r_r
 [],

763 c⁄° 
nßm∂es
,

764 * 
mp3buf
,

765 c⁄° 
mp3buf_size
 );

784 
CDECL
 
œme_ícode_Êush
(

785 
œme_globÆ_Êags
 * 
gÂ
,

786 * 
mp3buf
,

787 
size
);

806 
CDECL
 
œme_ícode_Êush_nog≠
(

807 
œme_globÆ_Êags
 * 
gÂ
,

808 * 
mp3buf
,

809 
size
);

818 
CDECL
 
œme_öô_bô°ªam
(

819 
œme_globÆ_Êags
 * 
gÂ
);

837 
CDECL
 
œme_bôøã_hi°
(

838 c⁄° 
œme_globÆ_Êags
 *c⁄° 
gÂ
,

839 
bôøã_cou¡
[14] );

840 
CDECL
 
œme_bôøã_kbps
(

841 c⁄° 
œme_globÆ_Êags
 *c⁄° 
gÂ
,

842 
bôøã_kbps
 [14] );

843 
CDECL
 
œme_°îeo_mode_hi°
(

844 c⁄° 
œme_globÆ_Êags
 *c⁄° 
gÂ
,

845 
°îeo_mode_cou¡
[4] );

847 
CDECL
 
œme_bôøã_°îeo_mode_hi°
 (

848 c⁄° 
œme_globÆ_Êags
 * c⁄° 
gÂ
,

849 
bôøã_°mode_cou¡
 [14] [4] );

851 
CDECL
 
œme_block_ty≥_hi°
 (

852 c⁄° 
œme_globÆ_Êags
 * c⁄° 
gÂ
,

853 
bty≥_cou¡
[6] );

855 
CDECL
 
œme_bôøã_block_ty≥_hi°
 (

856 c⁄° 
œme_globÆ_Êags
 * c⁄° 
gÂ
,

857 
bôøã_bty≥_cou¡
[14][6] );

871 
CDECL
 
œme_mp3_ègs_fid
(
œme_globÆ_Êags
 *,
FILE
* 
fid
);

878 
CDECL
 
œme_˛o£
 (
œme_globÆ_Êags
 *);

887 
CDECL
 
œme_ícode_föish
(

888 
œme_globÆ_Êags
* 
gÂ
,

889 * 
mp3buf
,

890 
size
 );

907 
hódî_∑r£d
;

909 
°îeo
;

910 
ßm∂î©e
;

911 
bôøã
;

912 
mode
;

913 
mode_ext
;

914 
‰amesize
;

917 
nßmp
;

918 
tŸÆ‰ames
;

921 
‰amíum
;

922 } 
	tmp3d©a_°ru˘
;

928 
CDECL
 
œme_decode_öô
();

947 
CDECL
 
œme_decode
(

948 * 
mp3buf
,

949 
Àn
,

950 
pcm_l
[],

951 
pcm_r
[] );

954 
CDECL
 
œme_decode_hódîs
(

955 * 
mp3buf
,

956 
Àn
,

957 
pcm_l
[],

958 
pcm_r
[],

959 
mp3d©a_°ru˘
* 
mp3d©a
 );

962 
CDECL
 
œme_decode1
(

963 * 
mp3buf
,

964 
Àn
,

965 
pcm_l
[],

966 
pcm_r
[] );

969 
CDECL
 
œme_decode1_hódîs
(

970 * 
mp3buf
,

971 
Àn
,

972 
pcm_l
[],

973 
pcm_r
[],

974 
mp3d©a_°ru˘
* 
mp3d©a
 );

978 
CDECL
 
œme_decode1_hódîsB
(

979 * 
mp3buf
,

980 
Àn
,

981 
pcm_l
[],

982 
pcm_r
[],

983 
mp3d©a_°ru˘
* 
mp3d©a
,

984 *
íc_dñay
,

985 *
íc_∑ddög
 );

989 
CDECL
 
œme_decode_exô
();

1020 
id3èg_gíª_li°
(

1021 (*
h™dÀr
)(, const *, *),

1022 * 
cookõ
);

1024 
id3èg_öô
 (
œme_globÆ_Êags
 *
gÂ
);

1027 
id3èg_add_v2
 (
œme_globÆ_Êags
 *
gÂ
);

1030 
id3èg_v1_⁄ly
 (
œme_globÆ_Êags
 *
gÂ
);

1033 
id3èg_v2_⁄ly
 (
œme_globÆ_Êags
 *
gÂ
);

1036 
id3èg_•a˚_v1
 (
œme_globÆ_Êags
 *
gÂ
);

1039 
id3èg_∑d_v2
 (
œme_globÆ_Êags
 *
gÂ
);

1041 
id3èg_£t_tôÀ
(

1042 
œme_globÆ_Êags
* 
gÂ
,

1043 c⁄° * 
tôÀ
 );

1044 
id3èg_£t_¨ti°
(

1045 
œme_globÆ_Êags
* 
gÂ
,

1046 c⁄° * 
¨ti°
 );

1047 
id3èg_£t_Æbum
(

1048 
œme_globÆ_Êags
* 
gÂ
,

1049 c⁄° * 
Æbum
 );

1050 
id3èg_£t_yór
(

1051 
œme_globÆ_Êags
* 
gÂ
,

1052 c⁄° * 
yór
 );

1053 
id3èg_£t_commít
(

1054 
œme_globÆ_Êags
* 
gÂ
,

1055 c⁄° * 
commít
 );

1056 
id3èg_£t_åack
(

1057 
œme_globÆ_Êags
* 
gÂ
,

1058 c⁄° * 
åack
 );

1061 
id3èg_£t_gíª
(

1062 
œme_globÆ_Êags
* 
gÂ
,

1063 c⁄° * 
gíª
 );

1072 c⁄° 
bôøã_èbÀ
 [3] [16];

1073 c⁄° 
ßm∂î©e_èbÀ
 [3] [ 4];

1080 
	#LAME_MAXMP3BUFFER
 16384

	)

1084 
	gLAME_OKAY
 = 0,

1085 
	gLAME_NOERROR
 = 0,

1086 
	gLAME_GENERICERROR
 = -1,

1087 
	gLAME_NOMEM
 = -10,

1088 
	gLAME_BADBITRATE
 = -11,

1089 
	gLAME_BADSAMPFREQ
 = -12,

1090 
	gLAME_INTERNALERROR
 = -13,

1092 
	gFRONTEND_READERROR
 = -80,

1093 
	gFRONTEND_WRITEERROR
 = -81,

1094 
	gFRONTEND_FILETOOLARGE
 = -82

1096 } 
	tœme_îr‹codes_t
;

1098 #i‡
deföed
(
__˝lu•lus
)

	@/usr/include/limits.h

23 #i‚de‡
_LIBC_LIMITS_H_


24 
	#_LIBC_LIMITS_H_
 1

	)

26 
	~<„©uªs.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

129 #ifde‡
__USE_ISOC99


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 
LONG_LONG_MIN


	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
LONG_LONG_MAX


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 
ULONG_LONG_MAX


	)

142 #ifdef 
__USE_POSIX


144 
	~<bôs/posix1_lim.h
>

147 #ifdef 
__USE_POSIX2


148 
	~<bôs/posix2_lim.h
>

151 #ifdef 
__USE_XOPEN


152 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/soundcard.h

1 #i‚de‡
SOUNDCARD_H


2 
	#SOUNDCARD_H


	)

36 
	#SOUND_VERSION
 0x030802

	)

37 
	#OPEN_SOUND_SYSTEM


	)

40 
	~<löux/io˘l.h
>

46 
	#SNDCARD_ADLIB
 1

	)

47 
	#SNDCARD_SB
 2

	)

48 
	#SNDCARD_PAS
 3

	)

49 
	#SNDCARD_GUS
 4

	)

50 
	#SNDCARD_MPU401
 5

	)

51 
	#SNDCARD_SB16
 6

	)

52 
	#SNDCARD_SB16MIDI
 7

	)

53 
	#SNDCARD_UART6850
 8

	)

54 
	#SNDCARD_GUS16
 9

	)

55 
	#SNDCARD_MSS
 10

	)

56 
	#SNDCARD_PSS
 11

	)

57 
	#SNDCARD_SSCAPE
 12

	)

58 
	#SNDCARD_PSS_MPU
 13

	)

59 
	#SNDCARD_PSS_MSS
 14

	)

60 
	#SNDCARD_SSCAPE_MSS
 15

	)

61 
	#SNDCARD_TRXPRO
 16

	)

62 
	#SNDCARD_TRXPRO_SB
 17

	)

63 
	#SNDCARD_TRXPRO_MPU
 18

	)

64 
	#SNDCARD_MAD16
 19

	)

65 
	#SNDCARD_MAD16_MPU
 20

	)

66 
	#SNDCARD_CS4232
 21

	)

67 
	#SNDCARD_CS4232_MPU
 22

	)

68 
	#SNDCARD_MAUI
 23

	)

69 
	#SNDCARD_PSEUDO_MSS
 24

	)

70 
	#SNDCARD_GUSPNP
 25

	)

71 
	#SNDCARD_UART401
 26

	)

78 #i‚de‡
_SIOWR


79 #i‡
deföed
(
_IOWR
Ë&& (deföed(
_AIX
Ë|| (!deföed(
sun
Ë&& !deföed(
•¨c
Ë&& !deföed(
__•¨c__
Ë&& !deföed(
__INCio˘lh
Ë&& !deföed(
__Lynx__
)))

81 
	#SIOCPARM_MASK
 
IOCPARM_MASK


	)

82 
	#SIOC_VOID
 
IOC_VOID


	)

83 
	#SIOC_OUT
 
IOC_OUT


	)

84 
	#SIOC_IN
 
IOC_IN


	)

85 
	#SIOC_INOUT
 
IOC_INOUT


	)

86 
	#_SIOC_SIZE
 
_IOC_SIZE


	)

87 
	#_SIOC_DIR
 
_IOC_DIR


	)

88 
	#_SIOC_NONE
 
_IOC_NONE


	)

89 
	#_SIOC_READ
 
_IOC_READ


	)

90 
	#_SIOC_WRITE
 
_IOC_WRITE


	)

91 
	#_SIO
 
_IO


	)

92 
	#_SIOR
 
_IOR


	)

93 
	#_SIOW
 
_IOW


	)

94 
	#_SIOWR
 
_IOWR


	)

104 
	#SIOCPARM_MASK
 0x1ff‡

	)

105 
	#SIOC_VOID
 0x00000000

	)

106 
	#SIOC_OUT
 0x20000000

	)

107 
	#SIOC_IN
 0x40000000

	)

108 
	#SIOC_INOUT
 (
SIOC_IN
|
SIOC_OUT
)

	)

110 
	#_SIO
(
x
,
y
Ë(()(
SIOC_VOID
|(x<<8)|y))

	)

111 
	#_SIOR
(
x
,
y
,
t
Ë(()(
SIOC_OUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

112 
	#_SIOW
(
x
,
y
,
t
Ë(()(
SIOC_IN
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

114 
	#_SIOWR
(
x
,
y
,
t
Ë(()(
SIOC_INOUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

115 
	#_SIOC_SIZE
(
x
Ë((x>>16)&
SIOCPARM_MASK
)

	)

116 
	#_SIOC_DIR
(
x
Ë(x & 0xf0000000)

	)

117 
	#_SIOC_NONE
 
SIOC_VOID


	)

118 
	#_SIOC_READ
 
SIOC_OUT


	)

119 
	#_SIOC_WRITE
 
SIOC_IN


	)

123 
	#SNDCTL_SEQ_RESET
 
	`_SIO
 ('Q', 0)

	)

124 
	#SNDCTL_SEQ_SYNC
 
	`_SIO
 ('Q', 1)

	)

125 
	#SNDCTL_SYNTH_INFO
 
	`_SIOWR
('Q', 2, 
sy¡h_öfo
)

	)

126 
	#SNDCTL_SEQ_CTRLRATE
 
	`_SIOWR
('Q', 3, Ë

	)

127 
	#SNDCTL_SEQ_GETOUTCOUNT
 
	`_SIOR
 ('Q', 4, )

	)

128 
	#SNDCTL_SEQ_GETINCOUNT
 
	`_SIOR
 ('Q', 5, )

	)

129 
	#SNDCTL_SEQ_PERCMODE
 
	`_SIOW
 ('Q', 6, )

	)

130 
	#SNDCTL_FM_LOAD_INSTR
 
	`_SIOW
 ('Q', 7, 
sbi_ö°rumít
Ë

	)

131 
	#SNDCTL_SEQ_TESTMIDI
 
	`_SIOW
 ('Q', 8, )

	)

132 
	#SNDCTL_SEQ_RESETSAMPLES
 
	`_SIOW
 ('Q', 9, )

	)

133 
	#SNDCTL_SEQ_NRSYNTHS
 
	`_SIOR
 ('Q',10, )

	)

134 
	#SNDCTL_SEQ_NRMIDIS
 
	`_SIOR
 ('Q',11, )

	)

135 
	#SNDCTL_MIDI_INFO
 
	`_SIOWR
('Q',12, 
midi_öfo
)

	)

136 
	#SNDCTL_SEQ_THRESHOLD
 
	`_SIOW
 ('Q',13, )

	)

137 
	#SNDCTL_SYNTH_MEMAVL
 
	`_SIOWR
('Q',14, Ë

	)

138 
	#SNDCTL_FM_4OP_ENABLE
 
	`_SIOW
 ('Q',15, Ë

	)

139 
	#SNDCTL_SEQ_PANIC
 
	`_SIO
 ('Q',17)

	)

140 
	#SNDCTL_SEQ_OUTOFBAND
 
	`_SIOW
 ('Q',18, 
£q_evít_ªc
)

	)

141 
	#SNDCTL_SEQ_GETTIME
 
	`_SIOR
 ('Q',19, )

	)

142 
	#SNDCTL_SYNTH_ID
 
	`_SIOWR
('Q',20, 
sy¡h_öfo
)

	)

143 
	#SNDCTL_SYNTH_CONTROL
 
	`_SIOWR
('Q',21, 
sy¡h_c⁄åﬁ
)

	)

144 
	#SNDCTL_SYNTH_REMOVESAMPLE
 
	`_SIOWR
('Q',22, 
ªmove_ßm∂e
)

	)

146 
	ssy¡h_c⁄åﬁ


148 
	mdevno
;

149 
	md©a
[4000];

150 }
	tsy¡h_c⁄åﬁ
;

152 
	sªmove_ßm∂e


154 
	mdevno
;

155 
	mb™kno
;

156 
	mö°∫o
;

157 } 
	tªmove_ßm∂e
;

159 
	s£q_evít_ªc
 {

160 
	m¨r
[8];

161 } 
	t£q_evít_ªc
;

163 
	#SNDCTL_TMR_TIMEBASE
 
	`_SIOWR
('T', 1, )

	)

164 
	#SNDCTL_TMR_START
 
	`_SIO
 ('T', 2)

	)

165 
	#SNDCTL_TMR_STOP
 
	`_SIO
 ('T', 3)

	)

166 
	#SNDCTL_TMR_CONTINUE
 
	`_SIO
 ('T', 4)

	)

167 
	#SNDCTL_TMR_TEMPO
 
	`_SIOWR
('T', 5, )

	)

168 
	#SNDCTL_TMR_SOURCE
 
	`_SIOWR
('T', 6, )

	)

169 
	#TMR_INTERNAL
 0x00000001

	)

170 
	#TMR_EXTERNAL
 0x00000002

	)

171 
	#TMR_MODE_MIDI
 0x00000010

	)

172 
	#TMR_MODE_FSK
 0x00000020

	)

173 
	#TMR_MODE_CLS
 0x00000040

	)

174 
	#TMR_MODE_SMPTE
 0x00000080

	)

175 
	#SNDCTL_TMR_METRONOME
 
	`_SIOW
 ('T', 7, )

	)

176 
	#SNDCTL_TMR_SELECT
 
	`_SIOW
 ('T', 8, )

	)

182 #i‡
deföed
(
_AIX
Ë|| deföed(
AIX
Ë|| deföed(
•¨c
Ë|| deföed(
__•¨c__
Ë|| deföed(
HPPA
Ë|| deföed(
PPC
Ë|| deföed(
__mc68000__
)

184 
	#_PATCHKEY
(
id
Ë(0xfd00|id)

	)

185 
	#AFMT_S16_NE
 
AFMT_S16_BE


	)

187 
	#_PATCHKEY
(
id
Ë((id<<8)|0xfd)

	)

188 
	#AFMT_S16_NE
 
AFMT_S16_LE


	)

201 
	s∑tch_öfo
 {

202 
	mkey
;

203 
	#WAVE_PATCH
 
	`_PATCHKEY
(0x04)

	)

204 
	#GUS_PATCH
 
WAVE_PATCH


	)

205 
	#WAVEFRONT_PATCH
 
	`_PATCHKEY
(0x06)

	)

207 
	mdevi˚_no
;

208 
	mö°r_no
;

210 
	mmode
;

215 
	#WAVE_16_BITS
 0x01

	)

216 
	#WAVE_UNSIGNED
 0x02

	)

217 
	#WAVE_LOOPING
 0x04

	)

218 
	#WAVE_BIDIR_LOOP
 0x08

	)

219 
	#WAVE_LOOP_BACK
 0x10

	)

220 
	#WAVE_SUSTAIN_ON
 0x20

	)

221 
	#WAVE_ENVELOPES
 0x40

	)

222 
	#WAVE_FAST_RELEASE
 0x80

	)

225 
	#WAVE_VIBRATO
 0x00010000

	)

226 
	#WAVE_TREMOLO
 0x00020000

	)

227 
	#WAVE_SCALE
 0x00040000

	)

228 
	#WAVE_FRACTIONS
 0x00080000

	)

230 
	#WAVE_ROM
 0x40000000

	)

231 
	#WAVE_MULAW
 0x20000000

	)

234 
	mÀn
;

235 
	mlo›_°¨t
, 
	mlo›_íd
;

253 
	mba£_‰eq
;

254 
	mba£_nŸe
;

255 
	mhigh_nŸe
;

256 
	mlow_nŸe
;

257 
	m∑¬ög
;

258 
	mdëunög
;

263 
	mív_øã
[ 6 ];

264 
	mív_off£t
[ 6 ];

272 
	måemﬁo_swìp
;

273 
	måemﬁo_øã
;

274 
	måemﬁo_dïth
;

276 
	mvibøto_swìp
;

277 
	mvibøto_øã
;

278 
	mvibøto_dïth
;

280 
	msˇÀ_‰equícy
;

281 
	msˇÀ_Á˘‹
;

283 
	mvﬁume
;

284 
	m‰a˘i⁄s
;

285 
	mª£rved1
;

286 
	m•¨e
[2];

287 
	md©a
[1];

290 
	ssy£x_öfo
 {

291 
	mkey
;

292 
	#SYSEX_PATCH
 
	`_PATCHKEY
(0x05)

	)

293 
	#MAUI_PATCH
 
	`_PATCHKEY
(0x06)

	)

294 
	mdevi˚_no
;

295 
	mÀn
;

296 
	md©a
[1];

319 
	#SEQ_NOTEOFF
 0

	)

320 
	#SEQ_FMNOTEOFF
 
SEQ_NOTEOFF


	)

321 
	#SEQ_NOTEON
 1

	)

322 
	#SEQ_FMNOTEON
 
SEQ_NOTEON


	)

323 
	#SEQ_WAIT
 
TMR_WAIT_ABS


	)

324 
	#SEQ_PGMCHANGE
 3

	)

325 
	#SEQ_FMPGMCHANGE
 
SEQ_PGMCHANGE


	)

326 
	#SEQ_SYNCTIMER
 
TMR_START


	)

327 
	#SEQ_MIDIPUTC
 5

	)

328 
	#SEQ_DRUMON
 6

	)

329 
	#SEQ_DRUMOFF
 7

	)

330 
	#SEQ_ECHO
 
TMR_ECHO


	)

331 
	#SEQ_AFTERTOUCH
 9

	)

332 
	#SEQ_CONTROLLER
 10

	)

346 
	#CTL_BANK_SELECT
 0x00

	)

347 
	#CTL_MODWHEEL
 0x01

	)

348 
	#CTL_BREATH
 0x02

	)

350 
	#CTL_FOOT
 0x04

	)

351 
	#CTL_PORTAMENTO_TIME
 0x05

	)

352 
	#CTL_DATA_ENTRY
 0x06

	)

353 
	#CTL_MAIN_VOLUME
 0x07

	)

354 
	#CTL_BALANCE
 0x08

	)

356 
	#CTL_PAN
 0x0a

	)

357 
	#CTL_EXPRESSION
 0x0b

	)

362 
	#CTL_GENERAL_PURPOSE1
 0x10

	)

363 
	#CTL_GENERAL_PURPOSE2
 0x11

	)

364 
	#CTL_GENERAL_PURPOSE3
 0x12

	)

365 
	#CTL_GENERAL_PURPOSE4
 0x13

	)

375 
	#CTL_DAMPER_PEDAL
 0x40

	)

376 
	#CTL_SUSTAIN
 0x40

	)

377 
	#CTL_HOLD
 0x40

	)

378 
	#CTL_PORTAMENTO
 0x41

	)

379 
	#CTL_SOSTENUTO
 0x42

	)

380 
	#CTL_SOFT_PEDAL
 0x43

	)

382 
	#CTL_HOLD2
 0x45

	)

385 
	#CTL_GENERAL_PURPOSE5
 0x50

	)

386 
	#CTL_GENERAL_PURPOSE6
 0x51

	)

387 
	#CTL_GENERAL_PURPOSE7
 0x52

	)

388 
	#CTL_GENERAL_PURPOSE8
 0x53

	)

390 
	#CTL_EXT_EFF_DEPTH
 0x5b

	)

391 
	#CTL_TREMOLO_DEPTH
 0x5c

	)

392 
	#CTL_CHORUS_DEPTH
 0x5d

	)

393 
	#CTL_DETUNE_DEPTH
 0x5e

	)

394 
	#CTL_CELESTE_DEPTH
 0x5ê

	)

395 
	#CTL_PHASER_DEPTH
 0x5f

	)

396 
	#CTL_DATA_INCREMENT
 0x60

	)

397 
	#CTL_DATA_DECREMENT
 0x61

	)

398 
	#CTL_NONREG_PARM_NUM_LSB
 0x62

	)

399 
	#CTL_NONREG_PARM_NUM_MSB
 0x63

	)

400 
	#CTL_REGIST_PARM_NUM_LSB
 0x64

	)

401 
	#CTL_REGIST_PARM_NUM_MSB
 0x65

	)

406 
	#CTRL_PITCH_BENDER
 255

	)

407 
	#CTRL_PITCH_BENDER_RANGE
 254

	)

408 
	#CTRL_EXPRESSION
 253

	)

409 
	#CTRL_MAIN_VOLUME
 252

	)

410 
	#SEQ_BALANCE
 11

	)

411 
	#SEQ_VOLMODE
 12

	)

417 
	#VOL_METHOD_ADAGIO
 1

	)

418 
	#VOL_METHOD_LINEAR
 2

	)

429 
	#SEQ_FULLSIZE
 0xfd

	)

450 
	#SEQ_PRIVATE
 0x„

	)

451 
	#SEQ_EXTENDED
 0xf‡

	)

457 
	tsbi_ö°r_d©a
[32];

459 
	ssbi_ö°rumít
 {

460 
	mkey
;

461 
	#FM_PATCH
 
	`_PATCHKEY
(0x01)

	)

462 
	#OPL3_PATCH
 
	`_PATCHKEY
(0x03)

	)

463 
	mdevi˚
;

464 
	mch™√l
;

465 
sbi_ö°r_d©a
 
	m›î©‹s
;

468 
	ssy¡h_öfo
 {

469 
	m«me
[30];

470 
	mdevi˚
;

471 
	msy¡h_ty≥
;

472 
	#SYNTH_TYPE_FM
 0

	)

473 
	#SYNTH_TYPE_SAMPLE
 1

	)

474 
	#SYNTH_TYPE_MIDI
 2

	)

476 
	msy¡h_subty≥
;

477 
	#FM_TYPE_ADLIB
 0x00

	)

478 
	#FM_TYPE_OPL3
 0x01

	)

479 
	#MIDI_TYPE_MPU401
 0x401

	)

481 
	#SAMPLE_TYPE_BASIC
 0x10

	)

482 
	#SAMPLE_TYPE_GUS
 
SAMPLE_TYPE_BASIC


	)

483 
	#SAMPLE_TYPE_WAVEFRONT
 0x11

	)

485 
	m≥rc_mode
;

486 
	mƒ_voi˚s
;

487 
	mƒ_drums
;

488 
	mö°r_b™k_size
;

489 
	mˇ∑bûôõs
;

490 
	#SYNTH_CAP_PERCMODE
 0x00000001

	)

491 
	#SYNTH_CAP_OPL3
 0x00000002

	)

492 
	#SYNTH_CAP_INPUT
 0x00000004

	)

493 
	mdummõs
[19];

496 
	ssound_timî_öfo
 {

497 
	m«me
[32];

498 
	mˇps
;

501 
	#MIDI_CAP_MPU401
 1

	)

503 
	smidi_öfo
 {

504 
	m«me
[30];

505 
	mdevi˚
;

506 
	mˇ∑bûôõs
;

507 
	mdev_ty≥
;

508 
	mdummõs
[18];

515 
	mcmd
;

516 
	mƒ_¨gs
, 
	mƒ_ªtu∫s
;

517 
	md©a
[30];

518 } 
	tmpu_comm™d_ªc
;

520 
	#SNDCTL_MIDI_PRETIME
 
	`_SIOWR
('m', 0, )

	)

521 
	#SNDCTL_MIDI_MPUMODE
 
	`_SIOWR
('m', 1, )

	)

522 
	#SNDCTL_MIDI_MPUCMD
 
	`_SIOWR
('m', 2, 
mpu_comm™d_ªc
)

	)

528 
	#SNDCTL_DSP_RESET
 
	`_SIO
 ('P', 0)

	)

529 
	#SNDCTL_DSP_SYNC
 
	`_SIO
 ('P', 1)

	)

530 
	#SNDCTL_DSP_SPEED
 
	`_SIOWR
('P', 2, )

	)

531 
	#SNDCTL_DSP_STEREO
 
	`_SIOWR
('P', 3, )

	)

532 
	#SNDCTL_DSP_GETBLKSIZE
 
	`_SIOWR
('P', 4, )

	)

533 
	#SNDCTL_DSP_SAMPLESIZE
 
SNDCTL_DSP_SETFMT


	)

534 
	#SNDCTL_DSP_CHANNELS
 
	`_SIOWR
('P', 6, )

	)

535 
	#SOUND_PCM_WRITE_CHANNELS
 
SNDCTL_DSP_CHANNELS


	)

536 
	#SOUND_PCM_WRITE_FILTER
 
	`_SIOWR
('P', 7, )

	)

537 
	#SNDCTL_DSP_POST
 
	`_SIO
 ('P', 8)

	)

538 
	#SNDCTL_DSP_SUBDIVIDE
 
	`_SIOWR
('P', 9, )

	)

539 
	#SNDCTL_DSP_SETFRAGMENT
 
	`_SIOWR
('P',10, )

	)

542 
	#SNDCTL_DSP_GETFMTS
 
	`_SIOR
 ('P',11, Ë

	)

543 
	#SNDCTL_DSP_SETFMT
 
	`_SIOWR
('P',5, Ë

	)

544 
	#AFMT_QUERY
 0x00000000

	)

545 
	#AFMT_MU_LAW
 0x00000001

	)

546 
	#AFMT_A_LAW
 0x00000002

	)

547 
	#AFMT_IMA_ADPCM
 0x00000004

	)

548 
	#AFMT_U8
 0x00000008

	)

549 
	#AFMT_S16_LE
 0x00000010

	)

550 
	#AFMT_S16_BE
 0x00000020

	)

551 
	#AFMT_S8
 0x00000040

	)

552 
	#AFMT_U16_LE
 0x00000080

	)

553 
	#AFMT_U16_BE
 0x00000100

	)

554 
	#AFMT_MPEG
 0x00000200

	)

555 
	#AFMT_AC3
 0x00000400

	)

560 
	saudio_buf_öfo
 {

561 
	m‰agmíts
;

562 
	m‰ag°ŸÆ
;

563 
	m‰agsize
;

565 
	mbyãs
;

567 } 
	taudio_buf_öfo
;

569 
	#SNDCTL_DSP_GETOSPACE
 
	`_SIOR
 ('P',12, 
audio_buf_öfo
)

	)

570 
	#SNDCTL_DSP_GETISPACE
 
	`_SIOR
 ('P',13, 
audio_buf_öfo
)

	)

571 
	#SNDCTL_DSP_NONBLOCK
 
	`_SIO
 ('P',14)

	)

572 
	#SNDCTL_DSP_GETCAPS
 
	`_SIOR
 ('P',15, )

	)

573 
	#DSP_CAP_REVISION
 0x000000f‡

	)

574 
	#DSP_CAP_DUPLEX
 0x00000100

	)

575 
	#DSP_CAP_REALTIME
 0x00000200

	)

576 
	#DSP_CAP_BATCH
 0x00000400

	)

580 
	#DSP_CAP_COPROC
 0x00000800

	)

583 
	#DSP_CAP_TRIGGER
 0x00001000

	)

584 
	#DSP_CAP_MMAP
 0x00002000

	)

585 
	#DSP_CAP_MULTI
 0x00004000

	)

586 
	#DSP_CAP_BIND
 0x00008000

	)

589 
	#SNDCTL_DSP_GETTRIGGER
 
	`_SIOR
 ('P',16, )

	)

590 
	#SNDCTL_DSP_SETTRIGGER
 
	`_SIOW
 ('P',16, )

	)

591 
	#PCM_ENABLE_INPUT
 0x00000001

	)

592 
	#PCM_ENABLE_OUTPUT
 0x00000002

	)

594 
	scou¡_öfo
 {

595 
	mbyãs
;

596 
	mblocks
;

597 
	m±r
;

598 } 
	tcou¡_öfo
;

600 
	#SNDCTL_DSP_GETIPTR
 
	`_SIOR
 ('P',17, 
cou¡_öfo
)

	)

601 
	#SNDCTL_DSP_GETOPTR
 
	`_SIOR
 ('P',18, 
cou¡_öfo
)

	)

603 
	sbuffmem_desc
 {

604 *
	mbuf„r
;

605 
	msize
;

606 } 
	tbuffmem_desc
;

607 
	#SNDCTL_DSP_MAPINBUF
 
	`_SIOR
 ('P', 19, 
buffmem_desc
)

	)

608 
	#SNDCTL_DSP_MAPOUTBUF
 
	`_SIOR
 ('P', 20, 
buffmem_desc
)

	)

609 
	#SNDCTL_DSP_SETSYNCRO
 
	`_SIO
 ('P', 21)

	)

610 
	#SNDCTL_DSP_SETDUPLEX
 
	`_SIO
 ('P', 22)

	)

611 
	#SNDCTL_DSP_GETODELAY
 
	`_SIOR
 ('P', 23, )

	)

613 
	#SNDCTL_DSP_GETCHANNELMASK
 
	`_SIOWR
('P', 64, )

	)

614 
	#SNDCTL_DSP_BIND_CHANNEL
 
	`_SIOWR
('P', 65, )

	)

615 
	#DSP_BIND_QUERY
 0x00000000

	)

616 
	#DSP_BIND_FRONT
 0x00000001

	)

617 
	#DSP_BIND_SURR
 0x00000002

	)

618 
	#DSP_BIND_CENTER_LFE
 0x00000004

	)

619 
	#DSP_BIND_HANDSET
 0x00000008

	)

620 
	#DSP_BIND_MIC
 0x00000010

	)

621 
	#DSP_BIND_MODEM1
 0x00000020

	)

622 
	#DSP_BIND_MODEM2
 0x00000040

	)

623 
	#DSP_BIND_I2S
 0x00000080

	)

624 
	#DSP_BIND_SPDIF
 0x00000100

	)

626 
	#SNDCTL_DSP_SETSPDIF
 
	`_SIOW
 ('P', 66, )

	)

627 
	#SNDCTL_DSP_GETSPDIF
 
	`_SIOR
 ('P', 67, )

	)

628 
	#SPDIF_PRO
 0x0001

	)

629 
	#SPDIF_N_AUD
 0x0002

	)

630 
	#SPDIF_COPY
 0x0004

	)

631 
	#SPDIF_PRE
 0x0008

	)

632 
	#SPDIF_CC
 0x07f0

	)

633 
	#SPDIF_L
 0x0800

	)

634 
	#SPDIF_DRS
 0x4000

	)

635 
	#SPDIF_V
 0x8000

	)

648 
	#SNDCTL_DSP_PROFILE
 
	`_SIOW
 ('P', 23, )

	)

649 
	#APF_NORMAL
 0

	)

650 
	#APF_NETWORK
 1

	)

651 
	#APF_CPUINTENS
 2

	)

653 
	#SOUND_PCM_READ_RATE
 
	`_SIOR
 ('P', 2, )

	)

654 
	#SOUND_PCM_READ_CHANNELS
 
	`_SIOR
 ('P', 6, )

	)

655 
	#SOUND_PCM_READ_BITS
 
	`_SIOR
 ('P', 5, )

	)

656 
	#SOUND_PCM_READ_FILTER
 
	`_SIOR
 ('P', 7, )

	)

659 
	#SOUND_PCM_WRITE_BITS
 
SNDCTL_DSP_SETFMT


	)

660 
	#SOUND_PCM_WRITE_RATE
 
SNDCTL_DSP_SPEED


	)

661 
	#SOUND_PCM_POST
 
SNDCTL_DSP_POST


	)

662 
	#SOUND_PCM_RESET
 
SNDCTL_DSP_RESET


	)

663 
	#SOUND_PCM_SYNC
 
SNDCTL_DSP_SYNC


	)

664 
	#SOUND_PCM_SUBDIVIDE
 
SNDCTL_DSP_SUBDIVIDE


	)

665 
	#SOUND_PCM_SETFRAGMENT
 
SNDCTL_DSP_SETFRAGMENT


	)

666 
	#SOUND_PCM_GETFMTS
 
SNDCTL_DSP_GETFMTS


	)

667 
	#SOUND_PCM_SETFMT
 
SNDCTL_DSP_SETFMT


	)

668 
	#SOUND_PCM_GETOSPACE
 
SNDCTL_DSP_GETOSPACE


	)

669 
	#SOUND_PCM_GETISPACE
 
SNDCTL_DSP_GETISPACE


	)

670 
	#SOUND_PCM_NONBLOCK
 
SNDCTL_DSP_NONBLOCK


	)

671 
	#SOUND_PCM_GETCAPS
 
SNDCTL_DSP_GETCAPS


	)

672 
	#SOUND_PCM_GETTRIGGER
 
SNDCTL_DSP_GETTRIGGER


	)

673 
	#SOUND_PCM_SETTRIGGER
 
SNDCTL_DSP_SETTRIGGER


	)

674 
	#SOUND_PCM_SETSYNCRO
 
SNDCTL_DSP_SETSYNCRO


	)

675 
	#SOUND_PCM_GETIPTR
 
SNDCTL_DSP_GETIPTR


	)

676 
	#SOUND_PCM_GETOPTR
 
SNDCTL_DSP_GETOPTR


	)

677 
	#SOUND_PCM_MAPINBUF
 
SNDCTL_DSP_MAPINBUF


	)

678 
	#SOUND_PCM_MAPOUTBUF
 
SNDCTL_DSP_MAPOUTBUF


	)

685 
	sc›r_buf„r
 {

686 
	mcomm™d
;

687 
	mÊags
;

688 
	#CPF_NONE
 0x0000

	)

689 
	#CPF_FIRST
 0x0001

	)

690 
	#CPF_LAST
 0x0002

	)

691 
	mÀn
;

692 
	moffs
;

694 
	md©a
[4000];

695 } 
	tc›r_buf„r
;

697 
	sc›r_debug_buf
 {

698 
	mcomm™d
;

699 
	m∑rm1
;

700 
	m∑rm2
;

701 
	mÊags
;

702 
	mÀn
;

703 } 
	tc›r_debug_buf
;

705 
	sc›r_msg
 {

706 
	mÀn
;

707 
	md©a
[4000];

708 } 
	tc›r_msg
;

710 
	#SNDCTL_COPR_RESET
 
	`_SIO
 ('C', 0)

	)

711 
	#SNDCTL_COPR_LOAD
 
	`_SIOWR
('C', 1, 
c›r_buf„r
)

	)

712 
	#SNDCTL_COPR_RDATA
 
	`_SIOWR
('C', 2, 
c›r_debug_buf
)

	)

713 
	#SNDCTL_COPR_RCODE
 
	`_SIOWR
('C', 3, 
c›r_debug_buf
)

	)

714 
	#SNDCTL_COPR_WDATA
 
	`_SIOW
 ('C', 4, 
c›r_debug_buf
)

	)

715 
	#SNDCTL_COPR_WCODE
 
	`_SIOW
 ('C', 5, 
c›r_debug_buf
)

	)

716 
	#SNDCTL_COPR_RUN
 
	`_SIOWR
('C', 6, 
c›r_debug_buf
)

	)

717 
	#SNDCTL_COPR_HALT
 
	`_SIOWR
('C', 7, 
c›r_debug_buf
)

	)

718 
	#SNDCTL_COPR_SENDMSG
 
	`_SIOWR
('C', 8, 
c›r_msg
)

	)

719 
	#SNDCTL_COPR_RCVMSG
 
	`_SIOR
 ('C', 9, 
c›r_msg
)

	)

734 
	#SOUND_MIXER_NRDEVICES
 25

	)

735 
	#SOUND_MIXER_VOLUME
 0

	)

736 
	#SOUND_MIXER_BASS
 1

	)

737 
	#SOUND_MIXER_TREBLE
 2

	)

738 
	#SOUND_MIXER_SYNTH
 3

	)

739 
	#SOUND_MIXER_PCM
 4

	)

740 
	#SOUND_MIXER_SPEAKER
 5

	)

741 
	#SOUND_MIXER_LINE
 6

	)

742 
	#SOUND_MIXER_MIC
 7

	)

743 
	#SOUND_MIXER_CD
 8

	)

744 
	#SOUND_MIXER_IMIX
 9

	)

745 
	#SOUND_MIXER_ALTPCM
 10

	)

746 
	#SOUND_MIXER_RECLEV
 11

	)

747 
	#SOUND_MIXER_IGAIN
 12

	)

748 
	#SOUND_MIXER_OGAIN
 13

	)

755 
	#SOUND_MIXER_LINE1
 14

	)

756 
	#SOUND_MIXER_LINE2
 15

	)

757 
	#SOUND_MIXER_LINE3
 16

	)

758 
	#SOUND_MIXER_DIGITAL1
 17

	)

759 
	#SOUND_MIXER_DIGITAL2
 18

	)

760 
	#SOUND_MIXER_DIGITAL3
 19

	)

761 
	#SOUND_MIXER_PHONEIN
 20

	)

762 
	#SOUND_MIXER_PHONEOUT
 21

	)

763 
	#SOUND_MIXER_VIDEO
 22

	)

764 
	#SOUND_MIXER_RADIO
 23

	)

765 
	#SOUND_MIXER_MONITOR
 24

	)

769 
	#SOUND_ONOFF_MIN
 28

	)

770 
	#SOUND_ONOFF_MAX
 30

	)

773 
	#SOUND_MIXER_NONE
 31

	)

779 
	#SOUND_MIXER_ENHANCE
 
SOUND_MIXER_NONE


	)

780 
	#SOUND_MIXER_MUTE
 
SOUND_MIXER_NONE


	)

781 
	#SOUND_MIXER_LOUD
 
SOUND_MIXER_NONE


	)

784 
	#SOUND_DEVICE_LABELS
 {"Vol ", "Bass ", "Trebl", "Synth", "Pcm ", "Spkr ", "Line ", \

787 "Ph⁄eIn", "Ph⁄eOut", "Video", "Radio", "M⁄ô‹"}

	)

789 
	#SOUND_DEVICE_NAMES
 {"vol", "bass", "treble", "synth", "pcm", "speaker", "line", \

792 "phö", "phout", "video", "ødio", "m⁄ô‹"}

	)

796 
	#SOUND_MIXER_RECSRC
 0xf‡

	)

797 
	#SOUND_MIXER_DEVMASK
 0x„

	)

798 
	#SOUND_MIXER_RECMASK
 0xfd

	)

799 
	#SOUND_MIXER_CAPS
 0xfc

	)

800 
	#SOUND_CAP_EXCL_INPUT
 0x00000001

	)

801 
	#SOUND_MIXER_STEREODEVS
 0xfb

	)

802 
	#SOUND_MIXER_OUTSRC
 0xÁ

	)

803 
	#SOUND_MIXER_OUTMASK
 0xf9

	)

807 
	#SOUND_MASK_VOLUME
 (1 << 
SOUND_MIXER_VOLUME
)

	)

808 
	#SOUND_MASK_BASS
 (1 << 
SOUND_MIXER_BASS
)

	)

809 
	#SOUND_MASK_TREBLE
 (1 << 
SOUND_MIXER_TREBLE
)

	)

810 
	#SOUND_MASK_SYNTH
 (1 << 
SOUND_MIXER_SYNTH
)

	)

811 
	#SOUND_MASK_PCM
 (1 << 
SOUND_MIXER_PCM
)

	)

812 
	#SOUND_MASK_SPEAKER
 (1 << 
SOUND_MIXER_SPEAKER
)

	)

813 
	#SOUND_MASK_LINE
 (1 << 
SOUND_MIXER_LINE
)

	)

814 
	#SOUND_MASK_MIC
 (1 << 
SOUND_MIXER_MIC
)

	)

815 
	#SOUND_MASK_CD
 (1 << 
SOUND_MIXER_CD
)

	)

816 
	#SOUND_MASK_IMIX
 (1 << 
SOUND_MIXER_IMIX
)

	)

817 
	#SOUND_MASK_ALTPCM
 (1 << 
SOUND_MIXER_ALTPCM
)

	)

818 
	#SOUND_MASK_RECLEV
 (1 << 
SOUND_MIXER_RECLEV
)

	)

819 
	#SOUND_MASK_IGAIN
 (1 << 
SOUND_MIXER_IGAIN
)

	)

820 
	#SOUND_MASK_OGAIN
 (1 << 
SOUND_MIXER_OGAIN
)

	)

821 
	#SOUND_MASK_LINE1
 (1 << 
SOUND_MIXER_LINE1
)

	)

822 
	#SOUND_MASK_LINE2
 (1 << 
SOUND_MIXER_LINE2
)

	)

823 
	#SOUND_MASK_LINE3
 (1 << 
SOUND_MIXER_LINE3
)

	)

824 
	#SOUND_MASK_DIGITAL1
 (1 << 
SOUND_MIXER_DIGITAL1
)

	)

825 
	#SOUND_MASK_DIGITAL2
 (1 << 
SOUND_MIXER_DIGITAL2
)

	)

826 
	#SOUND_MASK_DIGITAL3
 (1 << 
SOUND_MIXER_DIGITAL3
)

	)

827 
	#SOUND_MASK_PHONEIN
 (1 << 
SOUND_MIXER_PHONEIN
)

	)

828 
	#SOUND_MASK_PHONEOUT
 (1 << 
SOUND_MIXER_PHONEOUT
)

	)

829 
	#SOUND_MASK_RADIO
 (1 << 
SOUND_MIXER_RADIO
)

	)

830 
	#SOUND_MASK_VIDEO
 (1 << 
SOUND_MIXER_VIDEO
)

	)

831 
	#SOUND_MASK_MONITOR
 (1 << 
SOUND_MIXER_MONITOR
)

	)

834 
	#SOUND_MASK_MUTE
 (1 << 
SOUND_MIXER_MUTE
)

	)

835 
	#SOUND_MASK_ENHANCE
 (1 << 
SOUND_MIXER_ENHANCE
)

	)

836 
	#SOUND_MASK_LOUD
 (1 << 
SOUND_MIXER_LOUD
)

	)

838 
	#MIXER_READ
(
dev
Ë
	`_SIOR
('M', dev, )

	)

839 
	#SOUND_MIXER_READ_VOLUME
 
	`MIXER_READ
(
SOUND_MIXER_VOLUME
)

	)

840 
	#SOUND_MIXER_READ_BASS
 
	`MIXER_READ
(
SOUND_MIXER_BASS
)

	)

841 
	#SOUND_MIXER_READ_TREBLE
 
	`MIXER_READ
(
SOUND_MIXER_TREBLE
)

	)

842 
	#SOUND_MIXER_READ_SYNTH
 
	`MIXER_READ
(
SOUND_MIXER_SYNTH
)

	)

843 
	#SOUND_MIXER_READ_PCM
 
	`MIXER_READ
(
SOUND_MIXER_PCM
)

	)

844 
	#SOUND_MIXER_READ_SPEAKER
 
	`MIXER_READ
(
SOUND_MIXER_SPEAKER
)

	)

845 
	#SOUND_MIXER_READ_LINE
 
	`MIXER_READ
(
SOUND_MIXER_LINE
)

	)

846 
	#SOUND_MIXER_READ_MIC
 
	`MIXER_READ
(
SOUND_MIXER_MIC
)

	)

847 
	#SOUND_MIXER_READ_CD
 
	`MIXER_READ
(
SOUND_MIXER_CD
)

	)

848 
	#SOUND_MIXER_READ_IMIX
 
	`MIXER_READ
(
SOUND_MIXER_IMIX
)

	)

849 
	#SOUND_MIXER_READ_ALTPCM
 
	`MIXER_READ
(
SOUND_MIXER_ALTPCM
)

	)

850 
	#SOUND_MIXER_READ_RECLEV
 
	`MIXER_READ
(
SOUND_MIXER_RECLEV
)

	)

851 
	#SOUND_MIXER_READ_IGAIN
 
	`MIXER_READ
(
SOUND_MIXER_IGAIN
)

	)

852 
	#SOUND_MIXER_READ_OGAIN
 
	`MIXER_READ
(
SOUND_MIXER_OGAIN
)

	)

853 
	#SOUND_MIXER_READ_LINE1
 
	`MIXER_READ
(
SOUND_MIXER_LINE1
)

	)

854 
	#SOUND_MIXER_READ_LINE2
 
	`MIXER_READ
(
SOUND_MIXER_LINE2
)

	)

855 
	#SOUND_MIXER_READ_LINE3
 
	`MIXER_READ
(
SOUND_MIXER_LINE3
)

	)

858 
	#SOUND_MIXER_READ_MUTE
 
	`MIXER_READ
(
SOUND_MIXER_MUTE
)

	)

859 
	#SOUND_MIXER_READ_ENHANCE
 
	`MIXER_READ
(
SOUND_MIXER_ENHANCE
)

	)

860 
	#SOUND_MIXER_READ_LOUD
 
	`MIXER_READ
(
SOUND_MIXER_LOUD
)

	)

862 
	#SOUND_MIXER_READ_RECSRC
 
	`MIXER_READ
(
SOUND_MIXER_RECSRC
)

	)

863 
	#SOUND_MIXER_READ_DEVMASK
 
	`MIXER_READ
(
SOUND_MIXER_DEVMASK
)

	)

864 
	#SOUND_MIXER_READ_RECMASK
 
	`MIXER_READ
(
SOUND_MIXER_RECMASK
)

	)

865 
	#SOUND_MIXER_READ_STEREODEVS
 
	`MIXER_READ
(
SOUND_MIXER_STEREODEVS
)

	)

866 
	#SOUND_MIXER_READ_CAPS
 
	`MIXER_READ
(
SOUND_MIXER_CAPS
)

	)

868 
	#MIXER_WRITE
(
dev
Ë
	`_SIOWR
('M', dev, )

	)

869 
	#SOUND_MIXER_WRITE_VOLUME
 
	`MIXER_WRITE
(
SOUND_MIXER_VOLUME
)

	)

870 
	#SOUND_MIXER_WRITE_BASS
 
	`MIXER_WRITE
(
SOUND_MIXER_BASS
)

	)

871 
	#SOUND_MIXER_WRITE_TREBLE
 
	`MIXER_WRITE
(
SOUND_MIXER_TREBLE
)

	)

872 
	#SOUND_MIXER_WRITE_SYNTH
 
	`MIXER_WRITE
(
SOUND_MIXER_SYNTH
)

	)

873 
	#SOUND_MIXER_WRITE_PCM
 
	`MIXER_WRITE
(
SOUND_MIXER_PCM
)

	)

874 
	#SOUND_MIXER_WRITE_SPEAKER
 
	`MIXER_WRITE
(
SOUND_MIXER_SPEAKER
)

	)

875 
	#SOUND_MIXER_WRITE_LINE
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE
)

	)

876 
	#SOUND_MIXER_WRITE_MIC
 
	`MIXER_WRITE
(
SOUND_MIXER_MIC
)

	)

877 
	#SOUND_MIXER_WRITE_CD
 
	`MIXER_WRITE
(
SOUND_MIXER_CD
)

	)

878 
	#SOUND_MIXER_WRITE_IMIX
 
	`MIXER_WRITE
(
SOUND_MIXER_IMIX
)

	)

879 
	#SOUND_MIXER_WRITE_ALTPCM
 
	`MIXER_WRITE
(
SOUND_MIXER_ALTPCM
)

	)

880 
	#SOUND_MIXER_WRITE_RECLEV
 
	`MIXER_WRITE
(
SOUND_MIXER_RECLEV
)

	)

881 
	#SOUND_MIXER_WRITE_IGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_IGAIN
)

	)

882 
	#SOUND_MIXER_WRITE_OGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_OGAIN
)

	)

883 
	#SOUND_MIXER_WRITE_LINE1
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE1
)

	)

884 
	#SOUND_MIXER_WRITE_LINE2
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE2
)

	)

885 
	#SOUND_MIXER_WRITE_LINE3
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE3
)

	)

888 
	#SOUND_MIXER_WRITE_MUTE
 
	`MIXER_WRITE
(
SOUND_MIXER_MUTE
)

	)

889 
	#SOUND_MIXER_WRITE_ENHANCE
 
	`MIXER_WRITE
(
SOUND_MIXER_ENHANCE
)

	)

890 
	#SOUND_MIXER_WRITE_LOUD
 
	`MIXER_WRITE
(
SOUND_MIXER_LOUD
)

	)

892 
	#SOUND_MIXER_WRITE_RECSRC
 
	`MIXER_WRITE
(
SOUND_MIXER_RECSRC
)

	)

894 
	smixî_öfo


896 
	mid
[16];

897 
	m«me
[32];

898 
	mmodify_cou¡î
;

899 
	mfûÀrs
[10];

900 } 
	tmixî_öfo
;

902 
	s_ﬁd_mixî_öfo


904 
	mid
[16];

905 
	m«me
[32];

906 } 
	t_ﬁd_mixî_öfo
;

908 
	#SOUND_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
mixî_öfo
)

	)

909 
	#SOUND_OLD_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
_ﬁd_mixî_öfo
)

	)

917 
	tmixî_ªc‹d
[128];

919 
	#SOUND_MIXER_ACCESS
 
	`_SIOWR
('M', 102, 
mixî_ªc‹d
)

	)

924 
	#SOUND_MIXER_AGC
 
	`_SIOWR
('M', 103, )

	)

925 
	#SOUND_MIXER_3DSE
 
	`_SIOWR
('M', 104, )

	)

931 
	#SOUND_MIXER_PRIVATE1
 
	`_SIOWR
('M', 111, )

	)

932 
	#SOUND_MIXER_PRIVATE2
 
	`_SIOWR
('M', 112, )

	)

933 
	#SOUND_MIXER_PRIVATE3
 
	`_SIOWR
('M', 113, )

	)

934 
	#SOUND_MIXER_PRIVATE4
 
	`_SIOWR
('M', 114, )

	)

935 
	#SOUND_MIXER_PRIVATE5
 
	`_SIOWR
('M', 115, )

	)

945 
	smixî_vﬁ_èbÀ
 {

946 
	mnum
;

947 
	m«me
[32];

948 
	mÀvñs
[32];

949 } 
	tmixî_vﬁ_èbÀ
;

951 
	#SOUND_MIXER_GETLEVELS
 
	`_SIOWR
('M', 116, 
mixî_vﬁ_èbÀ
)

	)

952 
	#SOUND_MIXER_SETLEVELS
 
	`_SIOWR
('M', 117, 
mixî_vﬁ_èbÀ
)

	)

960 
	#OSS_GETVERSION
 
	`_SIOR
 ('M', 118, )

	)

980 
	#EV_SEQ_LOCAL
 0x80

	)

981 
	#EV_TIMING
 0x81

	)

982 
	#EV_CHN_COMMON
 0x92

	)

983 
	#EV_CHN_VOICE
 0x93

	)

984 
	#EV_SYSEX
 0x94

	)

994 
	#MIDI_NOTEOFF
 0x80

	)

995 
	#MIDI_NOTEON
 0x90

	)

996 
	#MIDI_KEY_PRESSURE
 0xA0

	)

1002 
	#MIDI_CTL_CHANGE
 0xB0

	)

1003 
	#MIDI_PGM_CHANGE
 0xC0

	)

1004 
	#MIDI_CHN_PRESSURE
 0xD0

	)

1005 
	#MIDI_PITCH_BEND
 0xE0

	)

1007 
	#MIDI_SYSTEM_PREFIX
 0xF0

	)

1012 
	#TMR_WAIT_REL
 1

	)

1013 
	#TMR_WAIT_ABS
 2

	)

1014 
	#TMR_STOP
 3

	)

1015 
	#TMR_START
 4

	)

1016 
	#TMR_CONTINUE
 5

	)

1017 
	#TMR_TEMPO
 6

	)

1018 
	#TMR_ECHO
 8

	)

1019 
	#TMR_CLOCK
 9

	)

1020 
	#TMR_SPP
 10

	)

1021 
	#TMR_TIMESIG
 11

	)

1026 
	#LOCL_STARTAUDIO
 1

	)

1028 #i‡(!
deföed
(
__KERNEL__
Ë&& !deföed(
KERNEL
Ë&& !deföed(
INKERNEL
Ë&& !deföed(
_KERNEL
)Ë|| deföed(
USE_SEQ_MACROS
)

1035 
	#SEQ_DECLAREBUF
(Ë
	`SEQ_USE_EXTBUF
()

	)

1037 
£qbuf_dump
();

1039 
OSS_öô
(
£qfd
, 
buÊí
);

1040 
OSS_£qbuf_dump
(
fd
, *
buf
, 
buÊí
);

1041 
OSS_£q_advbuf
(
Àn
, 
fd
, *
buf
, 
buÊí
);

1042 
OSS_£q_√edbuf
(
Àn
, 
fd
, *
buf
, 
buÊí
);

1043 
OSS_∑tch_ˇchög
(
dev
, 
chn
, 
∑tch
,

1044 
fd
, *
buf
, 
buÊí
);

1045 
OSS_drum_ˇchög
(
dev
, 
chn
, 
∑tch
,

1046 
fd
, *
buf
, 
buÊí
);

1047 
OSS_wrôe_∑tch
(
fd
, *
buf
, 
Àn
);

1048 
OSS_wrôe_∑tch2
(
fd
, *
buf
, 
Àn
);

1050 
	#SEQ_PM_DEFINES
 
__foo_b¨___


	)

1051 #ifde‡
OSSLIB


1052 
	#SEQ_USE_EXTBUF
() \

1053 *
_£qbuf
; \

1054 
_£qbuÊí
;
_£qbuÂå


	)

1055 
	#SEQ_DEFINEBUF
(
Àn
Ë
	`SEQ_USE_EXTBUF
();
_ªque°ed_£qbuÊí
=
	)
len

1056 
	#_SEQ_ADVBUF
(
Àn
Ë
	`OSS_£q_advbuf
÷í, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1057 
	#_SEQ_NEEDBUF
(
Àn
Ë
	`OSS_£q_√edbuf
÷í, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1058 
	#SEQ_DUMPBUF
(Ë
	`OSS_£qbuf_dump
(
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1060 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
) \

1061 
	`OSS_∑tch_ˇchög
(
dev
, -1, 
ö°r
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1062 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
) \

1063 
	`OSS_drum_ˇchög
(
dev
, -1, 
drum
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1066 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
)

	)

1067 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
)

	)

1069 
	#SEQ_USE_EXTBUF
() \

1070 
_£qbuf
[]; \

1071 
_£qbuÊí
;
_£qbuÂå


	)

1073 #i‚de‡
USE_SIMPLE_MACROS


1093 
	#SEQ_DEFINEBUF
(
Àn
Ë
_£qbuf
[Àn]; 
_£qbuÊí
 =Üí;
_£qbuÂå
 = 0

	)

1094 
	#_SEQ_NEEDBUF
(
Àn
Ëi‡((
_£qbuÂå
+÷í)Ë> 
_£qbuÊí
Ë
	`£qbuf_dump
()

	)

1095 
	#_SEQ_ADVBUF
(
Àn
Ë
_£qbuÂå
 +
	)
len

1096 
	#SEQ_DUMPBUF
 
£qbuf_dump


	)

1112 
	#_SEQ_NEEDBUF
(
Àn
Ë

	)

1116 
	#SEQ_VOLUME_MODE
(
dev
, 
mode
Ë{
	`_SEQ_NEEDBUF
(8);\

1117 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1118 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_VOLMODE
;\

1119 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1120 
_£qbuf
[
_£qbuÂå
+3] = (
mode
);\

1121 
_£qbuf
[
_£qbuÂå
+4] = 0;\

1122 
_£qbuf
[
_£qbuÂå
+5] = 0;\

1123 
_£qbuf
[
_£qbuÂå
+6] = 0;\

1124 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1125 
	`_SEQ_ADVBUF
(8);}

	)

1131 
	#_CHN_VOICE
(
dev
, 
evít
, 
chn
, 
nŸe
, 
∑rm
) \

1132 {
	`_SEQ_NEEDBUF
(8);\

1133 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_VOICE
;\

1134 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1135 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1136 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1137 
_£qbuf
[
_£qbuÂå
+4] = (
nŸe
);\

1138 
_£qbuf
[
_£qbuÂå
+5] = (
∑rm
);\

1139 
_£qbuf
[
_£qbuÂå
+6] = (0);\

1140 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1141 
	`_SEQ_ADVBUF
(8);}

	)

1143 
	#SEQ_START_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1144 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEON
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1146 
	#SEQ_STOP_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1147 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEOFF
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1149 
	#SEQ_KEY_PRESSURE
(
dev
, 
chn
, 
nŸe
, 
¥essuª
) \

1150 
	`_CHN_VOICE
(
dev
, 
MIDI_KEY_PRESSURE
, 
chn
, 
nŸe
, 
¥essuª
)

	)

1156 
	#_CHN_COMMON
(
dev
, 
evít
, 
chn
, 
p1
, 
p2
, 
w14
) \

1157 {
	`_SEQ_NEEDBUF
(8);\

1158 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_COMMON
;\

1159 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1160 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1161 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1162 
_£qbuf
[
_£qbuÂå
+4] = (
p1
);\

1163 
_£qbuf
[
_£qbuÂå
+5] = (
p2
);\

1164 *(*)&
_£qbuf
[
_£qbuÂå
+6] = (
w14
);\

1165 
	`_SEQ_ADVBUF
(8);}

	)

1181 
	#SEQ_SYSEX
(
dev
, 
buf
, 
Àn
) \

1182 {
ii
, 
Œ
=(
Àn
); \

1183 *
buÂ
=
buf
;\

1184 i‡(
Œ
>6)ll=6;\

1185 
	`_SEQ_NEEDBUF
(8);\

1186 
_£qbuf
[
_£qbuÂå
] = 
EV_SYSEX
;\

1187 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1188 
ii
=0;ii<
Œ
;ii++)\

1189 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 
buÂ
[ii];\

1190 
ii
=
Œ
;ii<6;ii++)\

1191 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 0xff;\

1192 
	`_SEQ_ADVBUF
(8);}

	)

1194 
	#SEQ_CHN_PRESSURE
(
dev
, 
chn
, 
¥essuª
) \

1195 
	`_CHN_COMMON
(
dev
, 
MIDI_CHN_PRESSURE
, 
chn
, 
¥essuª
, 0, 0)

	)

1197 
	#SEQ_SET_PATCH
 
SEQ_PGM_CHANGE


	)

1198 #ifde‡
OSSLIB


1199 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
) \

1200 {
	`OSS_∑tch_ˇchög
(
dev
, 
chn
, 
∑tch
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
); \

1201 
	`_CHN_COMMON
(
dev
, 
MIDI_PGM_CHANGE
, 
chn
, 
∑tch
, 0, 0);}

	)

1203 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
) \

1204 
	`_CHN_COMMON
(
dev
, 
MIDI_PGM_CHANGE
, 
chn
, 
∑tch
, 0, 0)

	)

1207 
	#SEQ_CONTROL
(
dev
, 
chn
, 
c⁄åﬁÀr
, 
vÆue
) \

1208 
	`_CHN_COMMON
(
dev
, 
MIDI_CTL_CHANGE
, 
chn
, 
c⁄åﬁÀr
, 0, 
vÆue
)

	)

1210 
	#SEQ_BENDER
(
dev
, 
chn
, 
vÆue
) \

1211 
	`_CHN_COMMON
(
dev
, 
MIDI_PITCH_BEND
, 
chn
, 0, 0, 
vÆue
)

	)

1214 
	#SEQ_V2_X_CONTROL
(
dev
, 
voi˚
, 
c⁄åﬁÀr
, 
vÆue
Ë{
	`_SEQ_NEEDBUF
(8);\

1215 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1216 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_CONTROLLER
;\

1217 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1218 
_£qbuf
[
_£qbuÂå
+3] = (
voi˚
);\

1219 
_£qbuf
[
_£qbuÂå
+4] = (
c⁄åﬁÀr
);\

1220 
_£qbuf
[
_£qbuÂå
+5] = ((
vÆue
)&0xff);\

1221 
_£qbuf
[
_£qbuÂå
+6] = ((
vÆue
>>8)&0xff);\

1222 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1223 
	`_SEQ_ADVBUF
(8);}

	)

1228 
	#SEQ_PITCHBEND
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER
, vÆue)

	)

1229 
	#SEQ_BENDER_RANGE
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER_RANGE
, vÆue)

	)

1230 
	#SEQ_EXPRESSION
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_EXPRESSION
, vÆue*128)

	)

1231 
	#SEQ_MAIN_VOLUME
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_MAIN_VOLUME
, (vÆue*16383)/100)

	)

1232 
	#SEQ_PANNING
(
dev
, 
voi˚
, 
pos
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_PAN
, (pos+128Ë/ 2)

	)

1238 
	#_TIMER_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1239 
_£qbuf
[
_£qbuÂå
+0] = 
EV_TIMING
; \

1240 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1241 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1242 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1243 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1244 
	`_SEQ_ADVBUF
(8);}

	)

1246 
	#SEQ_START_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_START
, 0)

	)

1247 
	#SEQ_STOP_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_STOP
, 0)

	)

1248 
	#SEQ_CONTINUE_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_CONTINUE
, 0)

	)

1249 
	#SEQ_WAIT_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_ABS
,Åicks)

	)

1250 
	#SEQ_DELTA_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_REL
,Åicks)

	)

1251 
	#SEQ_ECHO_BACK
(
key
Ë
	`_TIMER_EVENT
(
TMR_ECHO
, key)

	)

1252 
	#SEQ_SET_TEMPO
(
vÆue
Ë
	`_TIMER_EVENT
(
TMR_TEMPO
, vÆue)

	)

1253 
	#SEQ_SONGPOS
(
pos
Ë
	`_TIMER_EVENT
(
TMR_SPP
,Öos)

	)

1254 
	#SEQ_TIME_SIGNATURE
(
sig
Ë
	`_TIMER_EVENT
(
TMR_TIMESIG
, sig)

	)

1260 
	#_LOCAL_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1261 
_£qbuf
[
_£qbuÂå
+0] = 
EV_SEQ_LOCAL
; \

1262 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1263 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1264 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1265 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1266 
	`_SEQ_ADVBUF
(8);}

	)

1268 
	#SEQ_PLAYAUDIO
(
devmask
Ë
	`_LOCAL_EVENT
(
LOCL_STARTAUDIO
, devmask)

	)

1273 
	#SEQ_MIDIOUT
(
devi˚
, 
byã
Ë{
	`_SEQ_NEEDBUF
(4);\

1274 
_£qbuf
[
_£qbuÂå
] = 
SEQ_MIDIPUTC
;\

1275 
_£qbuf
[
_£qbuÂå
+1] = (
byã
);\

1276 
_£qbuf
[
_£qbuÂå
+2] = (
devi˚
);\

1277 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1278 
	`_SEQ_ADVBUF
(4);}

	)

1283 #ifde‡
OSSLIB


1284 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
) \

1285 
	`OSS_wrôe_∑tch
(
£qfd
, (*)(
∑tchx
), 
Àn
)

	)

1286 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
) \

1287 
	`OSS_wrôe_∑tch2
(
£qfd
, (*)(
∑tchx
), 
Àn
)

	)

1289 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
) \

1290 {i‡(
_£qbuÂå
Ë
	`SEQ_DUMPBUF
();\

1291 i‡(
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
)==-1) \

1292 
	`≥º‹
("Wrôê∑tch: /dev/£quí˚r");}

	)

1293 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
) \

1294 (
	`SEQ_DUMPBUF
(), 
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
))

	)

	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#NETDB_INTERNAL
 -1

	)

66 
	#NETDB_SUCCESS
 0

	)

67 
	#HOST_NOT_FOUND
 1

	)

68 
	#TRY_AGAIN
 2

	)

70 
	#NO_RECOVERY
 3

	)

72 
	#NO_DATA
 4

	)

74 
	#NO_ADDRESS
 
NO_DATA


	)

76 #ifde‡
__USE_XOPEN2K


78 
	#IPPORT_RESERVED
 1024

	)

81 #ifde‡
__USE_GNU


83 
	#SCOPE_DELIMITER
 '%'

	)

88 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

91 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

96 
	sho°ít


98 *
h_«me
;

99 **
h_Æü£s
;

100 
h_addπy≥
;

101 
h_Àngth
;

102 **
h_addr_li°
;

103 
	#h_addr
 
h_addr_li°
[0]

	)

111 
	`£tho°ít
 (
__°ay_›í
);

117 
	`ídho°ít
 ();

124 
ho°ít
 *
	`gëho°ít
 ();

131 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

132 
__ty≥
);

138 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

140 #ifde‡
__USE_MISC


149 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

161 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

163 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

164 *
__ª°ri˘
 
__h_î∫›
);

166 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

167 
__ty≥
,

168 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

192 
	`£äëít
 (
__°ay_›í
);

198 
	`íd√ã¡
 ();

205 
√ã¡
 *
	`gë√ã¡
 ();

212 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

218 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

220 #ifdef 
__USE_MISC


231 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

232 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

233 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

234 *
__ª°ri˘
 
__h_î∫›
);

236 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

237 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

251 
	s£rvít


253 *
s_«me
;

254 **
s_Æü£s
;

255 
s_p‹t
;

256 *
s_¥Ÿo
;

264 
	`£t£rvít
 (
__°ay_›í
);

270 
	`íd£rvít
 ();

277 
£rvít
 *
	`gë£rvít
 ();

284 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

285 
__c⁄°
 *
__¥Ÿo
);

292 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

295 #ifdef 
__USE_MISC


303 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

304 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

305 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

307 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

308 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

309 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

310 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

311 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

313 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

321 
	s¥Ÿ€¡


323 *
p_«me
;

324 **
p_Æü£s
;

325 
p_¥Ÿo
;

333 
	`£çrŸ€¡
 (
__°ay_›í
);

339 
	`íd¥Ÿ€¡
 ();

346 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

352 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

358 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

361 #ifdef 
__USE_MISC


369 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

370 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

371 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

373 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

374 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

390 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

398 
	`íd√tgª¡
 ();

407 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

408 **
__ª°ri˘
 
__u£Ω
,

409 **
__ª°ri˘
 
__domaöp
);

418 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

419 
__c⁄°
 *
__u£r
, __c⁄° *
domaö
);

427 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

428 **
__ª°ri˘
 
__u£Ω
,

429 **
__ª°ri˘
 
__domaöp
,

430 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

434 #ifde‡
__USE_BSD


446 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

447 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

448 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

449 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

458 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

459 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

460 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

461 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

462 
ß_Ámûy_t
 
__af
);

474 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

475 
__c⁄°
 *
__ª°ri˘
 
__«me
,

476 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

477 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

486 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

487 
__c⁄°
 *
__ª°ri˘
 
__«me
,

488 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

489 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

490 
ß_Ámûy_t
 
__af
);

500 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

501 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

510 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

511 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

512 
ß_Ámûy_t
 
__af
);

522 
	`ºesvp‹t
 (*
__Æp‹t
);

531 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

536 #ifdef 
__USE_POSIX


538 
	saddröfo


540 
ai_Êags
;

541 
ai_Ámûy
;

542 
ai_sockty≥
;

543 
ai_¥Ÿocﬁ
;

544 
sockÀn_t
 
ai_addæí
;

545 
sockaddr
 *
ai_addr
;

546 *
ai_ˇn⁄«me
;

547 
addröfo
 *
ai_√xt
;

550 #ifde‡
__USE_GNU


552 
	sgaicb


554 c⁄° *
¨_«me
;

555 c⁄° *
¨_£rvi˚
;

556 c⁄° 
addröfo
 *
¨_ªque°
;

557 
addröfo
 *
¨_ªsu…
;

559 
__ªtu∫
;

560 
__unu£d
[5];

564 
	#GAI_WAIT
 0

	)

565 
	#GAI_NOWAIT
 1

	)

569 
	#AI_PASSIVE
 0x0001

	)

570 
	#AI_CANONNAME
 0x0002

	)

571 
	#AI_NUMERICHOST
 0x0004

	)

572 
	#AI_V4MAPPED
 0x0008

	)

573 
	#AI_ALL
 0x0010

	)

574 
	#AI_ADDRCONFIG
 0x0020

	)

578 
	#EAI_BADFLAGS
 -1

	)

579 
	#EAI_NONAME
 -2

	)

580 
	#EAI_AGAIN
 -3

	)

581 
	#EAI_FAIL
 -4

	)

582 
	#EAI_NODATA
 -5

	)

583 
	#EAI_FAMILY
 -6

	)

584 
	#EAI_SOCKTYPE
 -7

	)

585 
	#EAI_SERVICE
 -8

	)

586 
	#EAI_ADDRFAMILY
 -9

	)

587 
	#EAI_MEMORY
 -10

	)

588 
	#EAI_SYSTEM
 -11

	)

589 #ifde‡
__USE_GNU


590 
	#EAI_INPROGRESS
 -100

	)

591 
	#EAI_CANCELED
 -101

	)

592 
	#EAI_NOTCANCELED
 -102

	)

593 
	#EAI_ALLDONE
 -103

	)

594 
	#EAI_INTR
 -104

	)

597 
	#NI_MAXHOST
 1025

	)

598 
	#NI_MAXSERV
 32

	)

600 
	#NI_NUMERICHOST
 1

	)

601 
	#NI_NUMERICSERV
 2

	)

602 
	#NI_NOFQDN
 4

	)

603 
	#NI_NAMEREQD
 8

	)

604 
	#NI_DGRAM
 16

	)

611 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

612 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

613 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

614 
addröfo
 **
__ª°ri˘
 
__∑i
);

617 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

620 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

626 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

627 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

628 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

629 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

632 #ifde‡
__USE_GNU


641 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

642 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

652 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

653 
__c⁄°
 
time•ec
 *
__timeout
);

656 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

659 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

662 
__END_DECLS


	@/usr/include/netinet/in.h

19 #i‚def 
_NETINET_IN_H


20 
	#_NETINET_IN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°döt.h
>

24 
	~<sys/sockë.h
>

25 
	~<bôs/ty≥s.h
>

28 
__BEGIN_DECLS


33 
	mIPPROTO_IP
 = 0,

34 
	#IPPROTO_IP
 
IPPROTO_IP


	)

35 
	mIPPROTO_HOPOPTS
 = 0,

36 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

37 
	mIPPROTO_ICMP
 = 1,

38 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

39 
	mIPPROTO_IGMP
 = 2,

40 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

41 
	mIPPROTO_IPIP
 = 4,

42 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

43 
	mIPPROTO_TCP
 = 6,

44 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

45 
	mIPPROTO_EGP
 = 8,

46 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

47 
	mIPPROTO_PUP
 = 12,

48 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

49 
	mIPPROTO_UDP
 = 17,

50 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

51 
	mIPPROTO_IDP
 = 22,

52 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

53 
	mIPPROTO_TP
 = 29,

54 
	#IPPROTO_TP
 
IPPROTO_TP


	)

55 
	mIPPROTO_IPV6
 = 41,

56 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

57 
	mIPPROTO_ROUTING
 = 43,

58 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

59 
	mIPPROTO_FRAGMENT
 = 44,

60 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

61 
	mIPPROTO_RSVP
 = 46,

62 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

63 
	mIPPROTO_GRE
 = 47,

64 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

65 
	mIPPROTO_ESP
 = 50,

66 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

67 
	mIPPROTO_AH
 = 51,

68 
	#IPPROTO_AH
 
IPPROTO_AH


	)

69 
	mIPPROTO_ICMPV6
 = 58,

70 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

71 
	mIPPROTO_NONE
 = 59,

72 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

73 
	mIPPROTO_DSTOPTS
 = 60,

74 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

75 
	mIPPROTO_MTP
 = 92,

76 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

77 
	mIPPROTO_ENCAP
 = 98,

78 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

79 
	mIPPROTO_PIM
 = 103,

80 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

81 
	mIPPROTO_COMP
 = 108,

82 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

83 
	mIPPROTO_SCTP
 = 132,

84 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

85 
	mIPPROTO_RAW
 = 255,

86 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

87 
	mIPPROTO_MAX


92 
uöt16_t
 
	tö_p‹t_t
;

97 
	mIPPORT_ECHO
 = 7,

98 
	mIPPORT_DISCARD
 = 9,

99 
	mIPPORT_SYSTAT
 = 11,

100 
	mIPPORT_DAYTIME
 = 13,

101 
	mIPPORT_NETSTAT
 = 15,

102 
	mIPPORT_FTP
 = 21,

103 
	mIPPORT_TELNET
 = 23,

104 
	mIPPORT_SMTP
 = 25,

105 
	mIPPORT_TIMESERVER
 = 37,

106 
	mIPPORT_NAMESERVER
 = 42,

107 
	mIPPORT_WHOIS
 = 43,

108 
	mIPPORT_MTP
 = 57,

110 
	mIPPORT_TFTP
 = 69,

111 
	mIPPORT_RJE
 = 77,

112 
	mIPPORT_FINGER
 = 79,

113 
	mIPPORT_TTYLINK
 = 87,

114 
	mIPPORT_SUPDUP
 = 95,

117 
	mIPPORT_EXECSERVER
 = 512,

118 
	mIPPORT_LOGINSERVER
 = 513,

119 
	mIPPORT_CMDSERVER
 = 514,

120 
	mIPPORT_EFSSERVER
 = 520,

123 
	mIPPORT_BIFFUDP
 = 512,

124 
	mIPPORT_WHOSERVER
 = 513,

125 
	mIPPORT_ROUTESERVER
 = 520,

128 
	mIPPORT_RESERVED
 = 1024,

131 
	mIPPORT_USERRESERVED
 = 5000

136 
uöt32_t
 
	tö_addr_t
;

137 
	sö_addr


139 
ö_addr_t
 
	ms_addr
;

148 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

149 
	#IN_CLASSA_NET
 0xff000000

	)

150 
	#IN_CLASSA_NSHIFT
 24

	)

151 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

152 
	#IN_CLASSA_MAX
 128

	)

154 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

155 
	#IN_CLASSB_NET
 0xffff0000

	)

156 
	#IN_CLASSB_NSHIFT
 16

	)

157 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

158 
	#IN_CLASSB_MAX
 65536

	)

160 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

161 
	#IN_CLASSC_NET
 0xffffff00

	)

162 
	#IN_CLASSC_NSHIFT
 8

	)

163 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

165 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

166 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

168 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

169 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

172 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

174 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

176 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

179 
	#IN_LOOPBACKNET
 127

	)

181 #i‚de‡
INADDR_LOOPBACK


182 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

186 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

187 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

188 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

189 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

193 
	sö6_addr


197 
uöt8_t
 
	mu6_addr8
[16];

198 
uöt16_t
 
	mu6_addr16
[8];

199 
uöt32_t
 
	mu6_addr32
[4];

200 } 
	mö6_u
;

201 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

202 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

203 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

206 c⁄° 
ö6_addr
 
ö6addr_™y
;

207 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

208 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

209 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

211 
	#INET_ADDRSTRLEN
 16

	)

212 
	#INET6_ADDRSTRLEN
 46

	)

215 
	~<bôs/sockë.h
>

219 
	ssockaddr_ö


221 
__SOCKADDR_COMMON
 (
sö_
);

222 
ö_p‹t_t
 
	msö_p‹t
;

223 
ö_addr
 
	msö_addr
;

226 
	msö_zîo
[ (
sockaddr
) -

227 
__SOCKADDR_COMMON_SIZE
 -

228  (
ö_p‹t_t
) -

229  (
ö_addr
)];

233 
	ssockaddr_ö6


235 
__SOCKADDR_COMMON
 (
sö6_
);

236 
ö_p‹t_t
 
	msö6_p‹t
;

237 
uöt32_t
 
	msö6_Êowöfo
;

238 
ö6_addr
 
	msö6_addr
;

239 
uöt32_t
 
	msö6_sc›e_id
;

243 
	sùv6_mªq


246 
ö6_addr
 
	mùv6mr_mu…üddr
;

249 
	mùv6mr_öãrÁ˚
;

253 
	~<bôs/ö.h
>

262 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

263 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

264 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

265 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

266 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

267 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

268 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	~<ídün.h
>

273 
	~<bôs/byãsw≠.h
>

275 #ifde‡
__OPTIMIZE__


279 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


282 
	#¡ohl
(
x
Ë(x)

	)

283 
	#¡ohs
(
x
Ë(x)

	)

284 
	#ht⁄l
(
x
Ë(x)

	)

285 
	#ht⁄s
(
x
Ë(x)

	)

287 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


288 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

289 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

290 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

291 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

296 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

297 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

298 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

299 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

300 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

302 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

303 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

304 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

305 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

306 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

308 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

310 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

311 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

312 =
	`ht⁄l
 (0x„800000))

	)

314 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

315 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

316 =
	`ht⁄l
 (0x„c00000))

	)

318 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

319 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

320 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

321 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

323 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

324 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

325 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

326 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

327 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

329 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

330 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

331 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

332 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

333 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

336 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

339 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

340 
__THROW
;

343 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

344 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

345 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

347 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

348 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

349 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

351 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

352 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

353 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

355 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

356 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

357 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

359 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

360 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

361 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

364 
	sö6_pktöfo


366 
ö6_addr
 
ùi6_addr
;

367 
ùi6_ifödex
;

371 #ifde‡
__USE_GNU


373 
	`öë6_›ti⁄_•a˚
 (
__nbyãs
);

374 
	`öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

375 
__ty≥
);

376 
	`öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

377 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

378 
__∂usy
);

379 
uöt8_t
 *
	`öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

380 
__mu…x
, 
__∂usy
);

381 
	`öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

382 
uöt8_t
 **
__çåp
);

383 
	`öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

384 
uöt8_t
 **
__çåp
, 
__ty≥
);

387 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
__BEGIN_NAMESPACE_STD


46 
_IO_FILE
 
	tFILE
;

47 
	g__END_NAMESPACE_STD


48 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

49 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

50 || 
deföed
 
__USE_POSIX2


51 
	$__USING_NAMESPACE_STD
(
FILE
)

54 
	#__FILE_deföed
 1

	)

56 #unde‡
__√ed_FILE


59 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


62 
_IO_FILE
 
	t__FILE
;

64 
	#____FILE_deföed
 1

	)

66 #unde‡
__√ed___FILE


69 #ifdef 
_STDIO_H


70 
	#_STDIO_USES_IOSTREAM


	)

72 
	~<libio.h
>

74 #ifde‡
__USE_XOPEN


75 #ifde‡
__GNUC__


76 #i‚de‡
_VA_LIST_DEFINED


77 
_G_va_li°
 
	tva_li°
;

78 
	#_VA_LIST_DEFINED


	)

81 
	~<°d¨g.h
>

86 
__BEGIN_NAMESPACE_STD


87 #i‚de‡
__USE_FILE_OFFSET64


88 
_G_Âos_t
 
	tÂos_t
;

90 
_G_Âos64_t
 
	tÂos_t
;

92 
__END_NAMESPACE_STD


93 #ifde‡
__USE_LARGEFILE64


94 
_G_Âos64_t
 
	tÂos64_t
;

98 
	#_IOFBF
 0

	)

99 
	#_IOLBF
 1

	)

100 
	#_IONBF
 2

	)

104 #i‚de‡
BUFSIZ


105 
	#BUFSIZ
 
_IO_BUFSIZ


	)

111 #i‚de‡
EOF


112 
	#EOF
 (-1)

	)

118 
	#SEEK_SET
 0

	)

119 
	#SEEK_CUR
 1

	)

120 
	#SEEK_END
 2

	)

123 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


125 
	#P_tmpdú
 "/tmp"

	)

138 
	~<bôs/°dio_lim.h
>

142 
_IO_FILE
 *
°dö
;

143 
_IO_FILE
 *
°dout
;

144 
_IO_FILE
 *
°dîr
;

146 
	#°dö
 
°dö


	)

147 
	#°dout
 
°dout


	)

148 
	#°dîr
 
°dîr


	)

150 
__BEGIN_NAMESPACE_STD


152 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

154 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

155 
__END_NAMESPACE_STD


158 
__BEGIN_NAMESPACE_STD


163 #i‚de‡
__USE_FILE_OFFSET64


164 
FILE
 *
	`tmpfûe
 ();

166 #ifde‡
__REDIRECT


167 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
);

169 
	#tmpfûe
 
tmpfûe64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
FILE
 *
	`tmpfûe64
 ();

178 *
	$tm≤am
 (*
__s
Ë
__THROW
;

179 
__END_NAMESPACE_STD


181 #ifde‡
__USE_MISC


184 *
	$tm≤am_r
 (*
__s
Ë
__THROW
;

188 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


196 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

197 
__THROW
 
__©åibuã_mÆloc__
;

201 
__BEGIN_NAMESPACE_STD


206 
	`f˛o£
 (
FILE
 *
__°ªam
);

211 
	`fÊush
 (
FILE
 *
__°ªam
);

212 
__END_NAMESPACE_STD


214 #ifde‡
__USE_MISC


221 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

224 #ifde‡
__USE_GNU


231 
	`f˛o£Æl
 ();

235 
__BEGIN_NAMESPACE_STD


236 #i‚de‡
__USE_FILE_OFFSET64


241 
FILE
 *
	`f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

242 
__c⁄°
 *
__ª°ri˘
 
__modes
);

247 
FILE
 *
	`‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

248 
__c⁄°
 *
__ª°ri˘
 
__modes
,

249 
FILE
 *
__ª°ri˘
 
__°ªam
);

251 #ifde‡
__REDIRECT


252 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

253 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
);

254 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

255 
__c⁄°
 *
__ª°ri˘
 
__modes
,

256 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
);

258 
	#f›í
 
f›í64


	)

259 
	#‰e›í
 
‰e›í64


	)

262 
__END_NAMESPACE_STD


263 #ifde‡
__USE_LARGEFILE64


264 
FILE
 *
	`f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

265 
__c⁄°
 *
__ª°ri˘
 
__modes
);

266 
FILE
 *
	`‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

267 
__c⁄°
 *
__ª°ri˘
 
__modes
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
);

271 #ifdef 
__USE_POSIX


273 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
;

276 #ifdef 
__USE_GNU


279 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
;

284 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
Ë
__THROW
;

289 
FILE
 *
	$›í_mem°ªam
 (**
__ª°ri˘
 
__buÊoc
,

290 
size_t
 *
__ª°ri˘
 
__sizñoc
Ë
__THROW
;

294 
__BEGIN_NAMESPACE_STD


297 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

301 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

302 
__modes
, 
size_t
 
__n
Ë
__THROW
;

303 
__END_NAMESPACE_STD


305 #ifdef 
__USE_BSD


308 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
size_t
 
__size
Ë
__THROW
;

312 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

316 
__BEGIN_NAMESPACE_STD


321 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

322 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

327 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
	$•rötf
 (*
__ª°ri˘
 
__s
,

330 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

336 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

337 
_G_va_li°
 
__¨g
);

342 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

344 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

345 
_G_va_li°
 
__¨g
Ë
__THROW
;

346 
__END_NAMESPACE_STD


348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


349 
__BEGIN_NAMESPACE_C99


351 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

352 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

353 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

355 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

357 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

358 
__END_NAMESPACE_C99


361 #ifde‡
__USE_GNU


364 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

365 
_G_va_li°
 
__¨g
)

366 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

367 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

368 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

369 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

370 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

371 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

372 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

380 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

381 
_G_va_li°
 
__¨g
)

382 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

383 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

384 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

388 
__BEGIN_NAMESPACE_STD


393 
	`fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

394 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

399 
	`sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

401 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

402 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

403 
__END_NAMESPACE_STD


405 #ifdef 
__USE_ISOC99


406 
__BEGIN_NAMESPACE_C99


411 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

412 
_G_va_li°
 
__¨g
)

413 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

419 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 1, 0)));

423 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

424 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

425 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

426 
__END_NAMESPACE_C99


430 
__BEGIN_NAMESPACE_STD


435 
	`fgëc
 (
FILE
 *
__°ªam
);

436 
	`gëc
 (
FILE
 *
__°ªam
);

442 
	`gëch¨
 ();

443 
__END_NAMESPACE_STD


447 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

449 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


454 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

455 
	`gëch¨_u∆ocked
 ();

458 #ifde‡
__USE_MISC


465 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

469 
__BEGIN_NAMESPACE_STD


477 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

478 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

484 
	`putch¨
 (
__c
);

485 
__END_NAMESPACE_STD


489 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

491 #ifde‡
__USE_MISC


498 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

501 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


506 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

507 
	`putch¨_u∆ocked
 (
__c
);

511 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

512 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

514 
	`gëw
 (
FILE
 *
__°ªam
);

517 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

521 
__BEGIN_NAMESPACE_STD


526 *
	`fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
);

533 *
	`gës
 (*
__s
);

534 
__END_NAMESPACE_STD


536 #ifde‡
__USE_GNU


543 *
	`fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

544 
FILE
 *
__ª°ri˘
 
__°ªam
);

548 #ifdef 
__USE_GNU


559 
_IO_ssize_t
 
	`__gëdñim
 (**
__ª°ri˘
 
__löïå
,

560 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

561 
FILE
 *
__ª°ri˘
 
__°ªam
);

562 
_IO_ssize_t
 
	`gëdñim
 (**
__ª°ri˘
 
__löïå
,

563 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

564 
FILE
 *
__ª°ri˘
 
__°ªam
);

572 
_IO_ssize_t
 
	`gëlöe
 (**
__ª°ri˘
 
__löïå
,

573 
size_t
 *
__ª°ri˘
 
__n
,

574 
FILE
 *
__ª°ri˘
 
__°ªam
);

578 
__BEGIN_NAMESPACE_STD


583 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

589 
	`puts
 (
__c⁄°
 *
__s
);

596 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

603 
size_t
 
	`‰ód
 (*
__ª°ri˘
 
__±r
, size_à
__size
,

604 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

609 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

610 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

611 
__END_NAMESPACE_STD


613 #ifde‡
__USE_GNU


620 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

621 
FILE
 *
__ª°ri˘
 
__°ªam
);

624 #ifde‡
__USE_MISC


631 
size_t
 
	`‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, size_à
__size
,

632 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

633 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

634 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

638 
__BEGIN_NAMESPACE_STD


643 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

648 
	`·ñl
 (
FILE
 *
__°ªam
);

653 
	`ªwöd
 (
FILE
 *
__°ªam
);

654 
__END_NAMESPACE_STD


661 #ifde‡
__USE_LARGEFILE


662 #i‚de‡
__USE_FILE_OFFSET64


667 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

672 
__off_t
 
	`·ñlo
 (
FILE
 *
__°ªam
);

674 #ifde‡
__REDIRECT


675 
	`__REDIRECT
 (
f£eko
,

676 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

677 
f£eko64
);

678 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

680 
	#f£eko
 
f£eko64


	)

681 
	#·ñlo
 
·ñlo64


	)

686 
__BEGIN_NAMESPACE_STD


687 #i‚de‡
__USE_FILE_OFFSET64


692 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

697 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

699 #ifde‡
__REDIRECT


700 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

701 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

702 
	`__REDIRECT
 (
f£ços
,

703 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

705 
	#fgëpos
 
fgëpos64


	)

706 
	#f£ços
 
f£ços64


	)

709 
__END_NAMESPACE_STD


711 #ifde‡
__USE_LARGEFILE64


712 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

713 
__off64_t
 
	`·ñlo64
 (
FILE
 *
__°ªam
);

714 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

715 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

718 
__BEGIN_NAMESPACE_STD


720 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

722 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
;

724 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
;

725 
__END_NAMESPACE_STD


727 #ifde‡
__USE_MISC


729 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

730 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

731 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

735 
__BEGIN_NAMESPACE_STD


740 
	`≥º‹
 (
__c⁄°
 *
__s
);

741 
__END_NAMESPACE_STD


747 
	~<bôs/sys_îæi°.h
>

750 #ifdef 
__USE_POSIX


752 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
;

755 #ifde‡
__USE_MISC


757 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

761 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

762 
deföed
 
__USE_MISC
)

767 
FILE
 *
	`p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
);

773 
	`p˛o£
 (
FILE
 *
__°ªam
);

777 #ifdef 
__USE_POSIX


779 *
	$˘îmid
 (*
__s
Ë
__THROW
;

783 #ifde‡
__USE_XOPEN


785 *
	`cu£rid
 (*
__s
);

789 #ifdef 
__USE_GNU


790 
ob°ack
;

793 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

794 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

795 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

796 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

797 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

798 
_G_va_li°
 
__¨gs
)

799 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

803 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


807 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

811 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

814 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

817 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


821 
	#__√ed_gë›t


	)

822 
	~<gë›t.h
>

827 #ifde‡
__USE_EXTERN_INLINES


828 
	~<bôs/°dio.h
>

831 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 ({ uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; } 
__u
; \

53 
__u
.
__ö
 = (
°©us
); __u.
__i
; }))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

93 
__BEGIN_NAMESPACE_STD


97 
	mquŸ
;

98 
	mªm
;

99 } 
	tdiv_t
;

102 #i‚de‡
__ldiv_t_deföed


105 
	mquŸ
;

106 
	mªm
;

107 } 
	tldiv_t
;

108 
	#__ldiv_t_deföed
 1

	)

110 
	g__END_NAMESPACE_STD


112 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


113 
__BEGIN_NAMESPACE_C99


115 
__exãnsi⁄__
 struct

117 
	mquŸ
;

118 
	mªm
;

119 } 
	tŒdiv_t
;

120 
	#__Œdiv_t_deföed
 1

	)

121 
	g__END_NAMESPACE_C99


126 
	#RAND_MAX
 2147483647

	)

131 
	#EXIT_FAILURE
 1

	)

132 
	#EXIT_SUCCESS
 0

	)

136 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

137 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
;

140 
__BEGIN_NAMESPACE_STD


142 
	$©of
 (
__c⁄°
 *
__≈å
Ë
__THROW
 
__©åibuã_puª__
;

144 
	$©oi
 (
__c⁄°
 *
__≈å
Ë
__THROW
 
__©åibuã_puª__
;

146 
	$©ﬁ
 (
__c⁄°
 *
__≈å
Ë
__THROW
 
__©åibuã_puª__
;

147 
__END_NAMESPACE_STD


149 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

150 
__BEGIN_NAMESPACE_C99


152 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

153 
__THROW
 
__©åibuã_puª__
;

154 
__END_NAMESPACE_C99


157 
__BEGIN_NAMESPACE_STD


159 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

160 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

161 
__END_NAMESPACE_STD


163 #ifdef 
__USE_ISOC99


164 
__BEGIN_NAMESPACE_C99


166 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

167 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

169 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

170 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

171 
__END_NAMESPACE_C99


174 
__BEGIN_NAMESPACE_STD


176 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

179 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

180 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

181 
__THROW
;

182 
__END_NAMESPACE_C99


184 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


186 
__exãnsi⁄__


187 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

190 
__exãnsi⁄__


191 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

192 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

193 
__THROW
;

196 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

197 
__BEGIN_NAMESPACE_C99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

203 
__exãnsi⁄__


204 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

205 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

206 
__THROW
;

207 
__END_NAMESPACE_C99


211 #ifde‡
__USE_GNU


225 
	~<xloˇÀ.h
>

229 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

230 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

231 
__loˇÀ_t
 
__loc
Ë
__THROW
;

233 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

234 **
__ª°ri˘
 
__íd±r
,

235 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

237 
__exãnsi⁄__


238 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

239 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

240 
__loˇÀ_t
 
__loc
Ë
__THROW
;

242 
__exãnsi⁄__


243 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
;

248 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

249 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

250 
__THROW
;

252 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

253 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

255 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__loˇÀ_t
 
__loc
Ë
__THROW
;

264 
	$__°πod_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__group
)

266 
__THROW
;

267 
	$__°πof_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

268 **
__ª°ri˘
 
__íd±r
, 
__group
)

269 
__THROW
;

270 
	$__°πﬁd_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

271 **
__ª°ri˘
 
__íd±r
,

272 
__group
Ë
__THROW
;

273 #i‚de‡
__°πﬁ_öã∫Æ_deföed


274 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
,

276 
__ba£
, 
__group
Ë
__THROW
;

277 
	#__°πﬁ_öã∫Æ_deföed
 1

	)

279 #i‚de‡
__°πoul_öã∫Æ_deföed


280 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

281 **
__ª°ri˘
 
__íd±r
,

282 
__ba£
, 
__group
Ë
__THROW
;

283 
	#__°πoul_öã∫Æ_deföed
 1

	)

285 #i‡
deföed
 
__GNUC__
 || deföed 
__USE_ISOC99


286 #i‚de‡
__°πﬁl_öã∫Æ_deföed


287 
__exãnsi⁄__


288 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

289 **
__ª°ri˘
 
__íd±r
,

290 
__ba£
, 
__group
Ë
__THROW
;

291 
	#__°πﬁl_öã∫Æ_deföed
 1

	)

293 #i‚de‡
__°πouŒ_öã∫Æ_deföed


294 
__exãnsi⁄__


295 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

296 
__ª°ri˘
 
__≈å
,

297 **
__ª°ri˘
 
__íd±r
,

298 
__ba£
, 
__group
)

299 
__THROW
;

300 
	#__°πouŒ_öã∫Æ_deföed
 1

	)

304 #ifde‡
__USE_EXTERN_INLINES


307 
__BEGIN_NAMESPACE_STD


308 
__ölöe
 

309 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
Ë
__THROW


311  
	`__°πod_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

312 
	}
}

313 
__ölöe
 

314 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

315 
__ba£
Ë
__THROW


317  
	`__°πﬁ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

318 
	}
}

319 
__ölöe
 

320 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

321 
__ba£
Ë
__THROW


323  
	`__°πoul_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

324 
	}
}

325 
__END_NAMESPACE_STD


327 #ifde‡
__USE_ISOC99


328 
__BEGIN_NAMESPACE_C99


329 
__ölöe
 

330 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
Ë
__THROW


332  
	`__°πof_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

333 
	}
}

334 
__ölöe
 

335 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
Ë
__THROW


337  
	`__°πﬁd_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

338 
	}
}

339 
__END_NAMESPACE_C99


342 #ifde‡
__USE_BSD


343 
__exãnsi⁄__
 
__ölöe
 

344 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

345 
__ba£
Ë
__THROW


347  
	`__°πﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

348 
	}
}

349 
__exãnsi⁄__
 
__ölöe
 

350 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

351 
__ba£
Ë
__THROW


353  
	`__°πouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

354 
	}
}

357 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


358 
__BEGIN_NAMESPACE_C99


359 
__exãnsi⁄__
 
__ölöe
 

360 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

361 
__ba£
Ë
__THROW


363  
	`__°πﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

364 
	}
}

365 
__exãnsi⁄__
 
__ölöe
 

366 
	$°πouŒ
 (
__c⁄°
 * 
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

367 
__ba£
Ë
__THROW


369  
	`__°πouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

370 
	}
}

371 
__END_NAMESPACE_C99


374 
__BEGIN_NAMESPACE_STD


375 
__ölöe
 

376 
	$©of
 (
__c⁄°
 *
__≈å
Ë
__THROW


378  
	`°πod
 (
__≈å
, (**Ë
NULL
);

379 
	}
}

380 
__ölöe
 

381 
	$©oi
 (
__c⁄°
 *
__≈å
Ë
__THROW


383  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

384 
	}
}

385 
__ölöe
 

386 
	$©ﬁ
 (
__c⁄°
 *
__≈å
Ë
__THROW


388  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

389 
	}
}

390 
__END_NAMESPACE_STD


392 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


393 
__BEGIN_NAMESPACE_C99


394 
__exãnsi⁄__
 
__ölöe
 

395 
	$©ﬁl
 (
__c⁄°
 *
__≈å
Ë
__THROW


397  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

398 
	}
}

399 
__END_NAMESPACE_C99


404 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


408 *
	$l64a
 (
__n
Ë
__THROW
;

411 
	$a64l
 (
__c⁄°
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

415 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


416 
	~<sys/ty≥s.h
>

423 
	$øndom
 (Ë
__THROW
;

426 
	$§™dom
 (
__£ed
Ë
__THROW
;

432 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

433 
size_t
 
__°©ñí
Ë
__THROW
;

437 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
;

440 #ifde‡
__USE_MISC


445 
	søndom_d©a


447 
öt32_t
 *
Âå
;

448 
öt32_t
 *
Ωå
;

449 
öt32_t
 *
°©e
;

450 
ønd_ty≥
;

451 
ønd_deg
;

452 
ønd_£p
;

453 
öt32_t
 *
íd_±r
;

456 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

457 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
;

459 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
Ë
__THROW
;

461 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

462 
size_t
 
__°©ñí
,

463 
øndom_d©a
 *
__ª°ri˘
 
__buf
Ë
__THROW
;

465 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

466 
øndom_d©a
 *
__ª°ri˘
 
__buf
Ë
__THROW
;

471 
__BEGIN_NAMESPACE_STD


473 
	$ønd
 (Ë
__THROW
;

475 
	$§™d
 (
__£ed
Ë
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_POSIX


480 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

484 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


488 
	$dønd48
 (Ë
__THROW
;

489 
	`î™d48
 (
__xsubi
[3]Ë
__THROW
;

492 
	$Ã™d48
 (Ë
__THROW
;

493 
	`ƒ™d48
 (
__xsubi
[3]Ë
__THROW
;

496 
	$mønd48
 (Ë
__THROW
;

497 
	`jønd48
 (
__xsubi
[3]Ë
__THROW
;

500 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

501 *
	`£ed48
 (
__£ed16v
[3]Ë
__THROW
;

502 
	`lc⁄g48
 (
__∑øm
[7]Ë
__THROW
;

504 #ifde‡
__USE_MISC


508 
	sdønd48_d©a


510 
__x
[3];

511 
__ﬁd_x
[3];

512 
__c
;

513 
__öô
;

514 
__a
;

518 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

519 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
;

520 
	`î™d48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
;

525 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

526 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
;

527 
	`ƒ™d48_r
 (
__xsubi
[3],

528 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

529 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
;

532 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

533 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
;

534 
	`jønd48_r
 (
__xsubi
[3],

535 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

536 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
;

539 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

540 
__THROW
;

542 
	`£ed48_r
 (
__£ed16v
[3],

543 
dønd48_d©a
 *
__buf„r
Ë
__THROW
;

545 
	`lc⁄g48_r
 (
__∑øm
[7],

546 
dønd48_d©a
 *
__buf„r
Ë
__THROW
;

552 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


553 
	#__mÆloc_™d_ˇŒoc_deföed


	)

554 
__BEGIN_NAMESPACE_STD


556 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

558 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_mÆloc__
;

560 
__END_NAMESPACE_STD


563 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


564 
__BEGIN_NAMESPACE_STD


567 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

569 
	$‰ì
 (*
__±r
Ë
__THROW
;

570 
__END_NAMESPACE_STD


572 #ifdef 
__USE_MISC


574 
	$c‰ì
 (*
__±r
Ë
__THROW
;

577 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


578 
	~<Æloˇ.h
>

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


583 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

586 #ifde‡
__USE_XOPEN2K


588 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

589 
__THROW
 
__©åibuã_mÆloc__
;

592 
__BEGIN_NAMESPACE_STD


594 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

598 
	`©exô
 ((*
__func
Ë()Ë
__THROW
;

599 
__END_NAMESPACE_STD


601 #ifdef 
__USE_MISC


604 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

605 
__THROW
;

608 
__BEGIN_NAMESPACE_STD


612 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

613 
__END_NAMESPACE_STD


615 #ifde‡
__USE_ISOC99


616 
__BEGIN_NAMESPACE_C99


619 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

620 
__END_NAMESPACE_C99


624 
__BEGIN_NAMESPACE_STD


626 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
;

627 
__END_NAMESPACE_STD


631 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
;

633 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


637 
	$puãnv
 (*
__°rög
Ë
__THROW
;

640 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


643 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

644 
__THROW
;

647 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

650 #ifdef 
__USE_MISC


654 
	$˛óªnv
 (Ë
__THROW
;

658 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
;

673 #i‚de‡
__USE_FILE_OFFSET64


674 
	`mk°emp
 (*
__ãm∂©e
);

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
);

679 
	#mk°emp
 
mk°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	`mk°emp64
 (*
__ãm∂©e
);

687 #ifde‡
__USE_BSD


693 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
;

697 
__BEGIN_NAMESPACE_STD


702 
	`sy°em
 (
__c⁄°
 *
__comm™d
);

703 
__END_NAMESPACE_STD


706 #ifdef 
__USE_GNU


710 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

713 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


720 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

721 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
;

726 #i‚de‡
__COMPAR_FN_T


727 
	#__COMPAR_FN_T


	)

728 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

730 #ifdef 
__USE_GNU


731 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

735 
__BEGIN_NAMESPACE_STD


738 *
	`b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

739 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

743 
	`qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

744 
__com∑r_‚_t
 
__com∑r
);

748 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

749 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

750 
__END_NAMESPACE_STD


752 #ifde‡
__USE_ISOC99


753 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

754 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

758 
__BEGIN_NAMESPACE_STD


762 
div_t
 
	$div
 (
__numî
, 
__díom
)

763 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

764 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

765 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

766 
__END_NAMESPACE_STD


768 #ifde‡
__USE_ISOC99


769 
__BEGIN_NAMESPACE_C99


770 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

771 
__díom
)

772 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

773 
__END_NAMESPACE_C99


777 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


784 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

785 *
__ª°ri˘
 
__sign
Ë
__THROW
;

790 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

791 *
__ª°ri˘
 
__sign
Ë
__THROW
;

796 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
Ë
__THROW
;

799 #ifde‡
__USE_MISC


801 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

802 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
Ë
__THROW
;

803 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

804 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
Ë
__THROW
;

805 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
Ë
__THROW
;

810 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

811 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

812 
size_t
 
__Àn
Ë
__THROW
;

813 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

814 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

815 
size_t
 
__Àn
Ë
__THROW
;

817 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

818 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

819 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

820 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

821 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

822 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

827 
__BEGIN_NAMESPACE_STD


830 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

833 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

834 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

837 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

841 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

842 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

844 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

845 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

846 
__THROW
;

847 
__END_NAMESPACE_STD


850 #ifde‡
__USE_SVID


855 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
;

859 #ifde‡
__USE_XOPEN_EXTENDED


866 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

867 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

868 **
__ª°ri˘
 
__vÆuï
Ë
__THROW
;

872 #ifde‡
__USE_XOPEN


874 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
;

880 #ifde‡
__USE_XOPEN2K


882 
	`posix_›í±
 (
__oÊag
);

885 #ifde‡
__USE_XOPEN


890 
	$gø¡±
 (
__fd
Ë
__THROW
;

894 
	$u∆ock±
 (
__fd
Ë
__THROW
;

899 *
	$±¢ame
 (
__fd
Ë
__THROW
;

902 #ifde‡
__USE_GNU


906 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
Ë
__THROW
;

909 
	`gë±
 ();

912 #ifde‡
__USE_BSD


916 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
Ë
__THROW
;

920 #unde‡
__√ed_mÆloc_™d_ˇŒoc


922 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 
__BEGIN_NAMESPACE_STD


38 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

39 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
Ë
__THROW
;

42 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

43 
__THROW
;

44 
__END_NAMESPACE_STD


49 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


50 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

51 
__c
, 
size_t
 
__n
)

52 
__THROW
;

56 
__BEGIN_NAMESPACE_STD


58 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
;

61 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

62 
__THROW
 
__©åibuã_puª__
;

65 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
;

67 
__END_NAMESPACE_STD


69 #ifde‡
__USE_GNU


72 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

75 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
__©åibuã_puª__
;

80 
__BEGIN_NAMESPACE_STD


82 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

83 
__THROW
;

85 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

86 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
Ë
__THROW
;

89 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

90 
__THROW
;

92 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

93 
size_t
 
__n
Ë
__THROW
;

96 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

97 
__THROW
 
__©åibuã_puª__
;

99 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

100 
__THROW
 
__©åibuã_puª__
;

103 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

104 
__THROW
 
__©åibuã_puª__
;

106 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

107 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
Ë
__THROW
;

108 
__END_NAMESPACE_STD


110 #ifde‡
__USE_GNU


114 
	~<xloˇÀ.h
>

117 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

118 
__THROW
 
__©åibuã_puª__
;

120 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

121 
__loˇÀ_t
 
__l
Ë
__THROW
;

124 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


126 *
	$°rdup
 (
__c⁄°
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

132 #i‡
deföed
 
__USE_GNU


133 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

134 
__THROW
 
__©åibuã_mÆloc__
;

137 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


139 
	#°rdu∑
(
s
) \

140 (
__exãnsi⁄__
 \

142 
__c⁄°
 *
__ﬁd
 = (
s
); \

143 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

144 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

145 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

146 
	}
}))

	)

149 
	#°∫du∑
(
s
, 
n
) \

150 (
__exãnsi⁄__
 \

152 
__c⁄°
 *
__ﬁd
 = (
s
); \

153 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

154 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

155 
__√w
[
__Àn
] = '\0'; \

156 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

157 }))

	)

160 
__BEGIN_NAMESPACE_STD


162 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

164 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_GNU


170 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

173 
__BEGIN_NAMESPACE_STD


176 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

177 
__THROW
 
__©åibuã_puª__
;

180 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

181 
__THROW
 
__©åibuã_puª__
;

183 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

184 
__THROW
 
__©åibuã_puª__
;

186 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

187 
__THROW
 
__©åibuã_puª__
;

191 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

192 
__THROW
;

193 
__END_NAMESPACE_STD


197 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

198 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

199 **
__ª°ri˘
 
__ßve_±r
Ë
__THROW
;

200 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


201 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

202 **
__ª°ri˘
 
__ßve_±r
Ë
__THROW
;

205 #ifde‡
__USE_GNU


207 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

208 
__THROW
 
__©åibuã_puª__
;

211 #ifde‡
__USE_GNU


215 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

216 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

217 
__THROW
 
__©åibuã_puª__
;

221 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

222 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
Ë
__THROW
;

223 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

224 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
Ë
__THROW
;

228 
__BEGIN_NAMESPACE_STD


230 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

231 
__END_NAMESPACE_STD


233 #ifdef 
__USE_GNU


236 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

237 
__THROW
 
__©åibuã_puª__
;

241 
__BEGIN_NAMESPACE_STD


243 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

244 
__END_NAMESPACE_STD


245 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


248 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
Ë
__THROW
;

253 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

255 #ifde‡
__USE_BSD


257 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

260 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

263 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

264 
__THROW
 
__©åibuã_puª__
;

267 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

270 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

274 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 #ifdef 
__USE_GNU


279 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

280 #ifde‡
__GNUC__


281 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

282 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

288 
__THROW
 
__©åibuã_puª__
;

291 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

292 
__THROW
 
__©åibuã_puª__
;

295 #ifdef 
__USE_GNU


298 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

299 
__loˇÀ_t
 
__loc
Ë
__THROW
 
__©åibuã_puª__
;

301 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

302 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

303 
__THROW
 
__©åibuã_puª__
;

306 #ifdef 
__USE_BSD


309 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

310 
__c⁄°
 *
__ª°ri˘
 
__dñim
Ë
__THROW
;

313 #ifdef 
__USE_GNU


315 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

316 
__THROW
 
__©åibuã_puª__
;

319 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

322 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

323 
__THROW
;

324 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

325 
__THROW
;

329 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

330 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
Ë
__THROW
;

331 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

332 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
Ë
__THROW
;

335 *
	$°r‰y
 (*
__°rög
Ë
__THROW
;

338 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

340 #i‚de‡
ba£«me


345 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

350 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

351 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

352 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


372 
	~<bôs/°rög.h
>

375 
	~<bôs/°rög2.h
>

379 
__END_DECLS


	@/usr/include/strings.h

19 #i‚def 
_STRINGS_H


20 
	#_STRINGS_H
 1

	)

25 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


27 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
__BEGIN_DECLS


34 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
;

38 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

41 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

45 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

48 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

51 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

54 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

55 
__THROW
 
__©åibuã_puª__
;

58 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

59 
__THROW
 
__©åibuã_puª__
;

61 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/socket.h

20 #i‚def 
_SYS_SOCKET_H


21 
	#_SYS_SOCKET_H
 1

	)

23 
	~<„©uªs.h
>

25 
	g__BEGIN_DECLS


27 
	~<sys/uio.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

35 
	~<bôs/sockë.h
>

37 #ifde‡
__USE_BSD


40 
	sosockaddr


42 
	mß_Ámûy
;

43 
	mß_d©a
[14];

51 
	mSHUT_RD
 = 0,

52 
	#SHUT_RD
 
SHUT_RD


	)

53 
	mSHUT_WR
,

54 
	#SHUT_WR
 
SHUT_WR


	)

55 
	mSHUT_RDWR


56 
	#SHUT_RDWR
 
SHUT_RDWR


	)

65 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


66 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

67 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

71 
	#__SOCKADDR_ALLTYPES
 \

72 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

73 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

74 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

86 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

87 uni⁄ { 
	m__SOCKADDR_ALLTYPES


88 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

89 #unde‡
__SOCKADDR_ONETYPE


90 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

91 uni⁄ { 
	m__SOCKADDR_ALLTYPES


92 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

93 #unde‡
__SOCKADDR_ONETYPE


100 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

106 
	`sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

107 
__fds
[2]Ë
__THROW
;

110 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

111 
__THROW
;

114 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

115 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

124 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

128 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

129 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

136 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

143 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

150 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

151 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

152 
sockÀn_t
 
__addr_Àn
);

161 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

162 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

163 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

171 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

172 
__Êags
);

179 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

185 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

186 *
__ª°ri˘
 
__›tvÆ
,

187 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

192 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

193 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

199 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

209 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

210 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

218 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

221 #ifde‡
__USE_XOPEN2K


223 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

227 #ifde‡
__USE_MISC


231 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

234 
__END_DECLS


	@/usr/include/sys/stat.h

23 #i‚def 
_SYS_STAT_H


24 
	#_SYS_STAT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_MISC


31 #ifde‡
__USE_XOPEN


32 
	#__√ed_time_t


	)

34 #ifde‡
__USE_MISC


35 
	#__√ed_time•ec


	)

37 
	~<time.h
>

40 #ifde‡
__USE_XOPEN


43 #i‚de‡
__dev_t_deföed


44 
__dev_t
 
	tdev_t
;

45 
	#__dev_t_deföed


	)

48 #i‚de‡
__gid_t_deföed


49 
__gid_t
 
	tgid_t
;

50 
	#__gid_t_deföed


	)

53 #i‚de‡
__öo_t_deföed


54 #i‚de‡
__USE_FILE_OFFSET64


55 
__öo_t
 
	töo_t
;

57 
__öo64_t
 
	töo_t
;

59 
	#__öo_t_deföed


	)

62 #i‚de‡
__mode_t_deföed


63 
__mode_t
 
	tmode_t
;

64 
	#__mode_t_deföed


	)

67 #i‚de‡
__∆ök_t_deföed


68 
__∆ök_t
 
	t∆ök_t
;

69 
	#__∆ök_t_deföed


	)

72 #i‚de‡
__off_t_deföed


73 #i‚de‡
__USE_FILE_OFFSET64


74 
__off_t
 
	toff_t
;

76 
__off64_t
 
	toff_t
;

78 
	#__off_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

87 #ifde‡
__USE_UNIX98


88 #i‚de‡
__blk˙t_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__blk˙t_t
 
	tblk˙t_t
;

92 
__blk˙t64_t
 
	tblk˙t_t
;

94 
	#__blk˙t_t_deföed


	)

97 #i‚de‡
__blksize_t_deföed


98 
__blksize_t
 
	tblksize_t
;

99 
	#__blksize_t_deföed


	)

103 
	g__BEGIN_DECLS


105 
	~<bôs/°©.h
>

107 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


108 
	#S_IFMT
 
__S_IFMT


	)

109 
	#S_IFDIR
 
__S_IFDIR


	)

110 
	#S_IFCHR
 
__S_IFCHR


	)

111 
	#S_IFBLK
 
__S_IFBLK


	)

112 
	#S_IFREG
 
__S_IFREG


	)

113 #ifde‡
__S_IFIFO


114 
	#S_IFIFO
 
__S_IFIFO


	)

116 #ifde‡
__S_IFLNK


117 
	#S_IFLNK
 
__S_IFLNK


	)

119 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K
) \

120 && 
deföed
 
	g__S_IFSOCK


121 
	#S_IFSOCK
 
__S_IFSOCK


	)

127 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

129 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

130 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

131 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

132 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

133 #ifde‡
__S_IFIFO


134 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

136 #ifde‡
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

140 #ifdef 
__USE_BSD


141 #i‚de‡
__S_IFLNK


142 
	#S_ISLNK
(
mode
Ë0

	)

144 #ifde‡
__S_IFSOCK


145 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

153 #ifdef 
__USE_POSIX199309


154 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

155 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

156 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

162 
	#S_ISUID
 
__S_ISUID


	)

163 
	#S_ISGID
 
__S_ISGID


	)

165 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


167 
	#S_ISVTX
 
__S_ISVTX


	)

170 
	#S_IRUSR
 
__S_IREAD


	)

171 
	#S_IWUSR
 
__S_IWRITE


	)

172 
	#S_IXUSR
 
__S_IEXEC


	)

174 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

176 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


177 
	#S_IREAD
 
S_IRUSR


	)

178 
	#S_IWRITE
 
S_IWUSR


	)

179 
	#S_IEXEC
 
S_IXUSR


	)

182 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

183 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

184 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

186 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

188 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

189 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

190 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

192 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

195 #ifdef 
__USE_BSD


197 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

198 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

199 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

201 
	#S_BLKSIZE
 512

	)

205 #i‚de‡
__USE_FILE_OFFSET64


207 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

208 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
;

212 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
;

214 #ifde‡
__REDIRECT


215 
	`__REDIRECT
 (
°©
,

216 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

217 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
,

218 
°©64
);

219 
	`__REDIRECT
 (
f°©
, (
__fd
, 
°©
 *
__buf
Ë
__THROW
, 
f°©64
);

221 
	#°©
 
°©64


	)

222 
	#f°©
 
f°©64


	)

225 #ifde‡
__USE_LARGEFILE64


226 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

227 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
;

228 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
;

231 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


232 #i‚de‡
__USE_FILE_OFFSET64


235 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

236 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
;

238 #ifde‡
__REDIRECT


239 
	`__REDIRECT
 (
l°©
,

240 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

241 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
,

242 
l°©64
);

244 
	#l°©
 
l°©64


	)

247 #ifde‡
__USE_LARGEFILE64


248 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

249 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
;

255 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
__THROW
;

257 #ifde‡
__USE_BSD


261 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
__THROW
;

265 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


266 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

272 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

274 #ifdef 
__USE_GNU


277 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

281 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
Ë
__THROW
;

286 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


287 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

288 
__THROW
;

293 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
Ë
__THROW
;

310 #i‚de‡
_STAT_VER


311 
	#_STAT_VER
 0

	)

313 #i‚de‡
_MKNOD_VER


314 
	#_MKNOD_VER
 0

	)

318 #i‚de‡
__USE_FILE_OFFSET64


319 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
Ë
__THROW
;

320 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

321 
°©
 *
__°©_buf
Ë
__THROW
;

322 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

323 
°©
 *
__°©_buf
Ë
__THROW
;

325 #ifde‡
__REDIRECT


326 
	`__REDIRECT
 (
__fx°©
, (
__vî
, 
__fûdes
,

327 
°©
 *
__°©_buf
Ë
__THROW
,

328 
__fx°©64
);

329 
	`__REDIRECT
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

330 
°©
 *
__°©_buf
Ë
__THROW
, 
__x°©64
);

331 
	`__REDIRECT
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

332 
°©
 *
__°©_buf
Ë
__THROW
,

333 
__lx°©64
);

336 
	#__fx°©
 
__fx°©64


	)

337 
	#__x°©
 
__x°©64


	)

338 
	#__lx°©
 
__lx°©64


	)

342 #ifde‡
__USE_LARGEFILE64


343 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

344 
__THROW
;

345 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

346 
°©64
 *
__°©_buf
Ë
__THROW
;

347 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

348 
°©64
 *
__°©_buf
Ë
__THROW
;

350 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

351 
__dev_t
 *
__dev
Ë
__THROW
;

353 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

356 
__ölöe__
 
	$°©
 (
__c⁄°
 *
__∑th
,

357 
°©
 *
__°©buf
Ë
__THROW


359  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

360 
	}
}

362 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


363 
__ölöe__
 
	$l°©
 (
__c⁄°
 *
__∑th
,

364 
°©
 *
__°©buf
Ë
__THROW


366  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

367 
	}
}

370 
__ölöe__
 
	$f°©
 (
__fd
, 
°©
 *
__°©buf
Ë
__THROW


372  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

373 
	}
}

375 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


376 
__ölöe__
 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

377 
__dev_t
 
__dev
Ë
__THROW


379  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

380 
	}
}

383 #i‡
deföed
 
__USE_LARGEFILE64
 \

384 && (! 
deföed
 
__USE_FILE_OFFSET64
 \

385 || (
deföed
 
__REDIRECT
 && deföed 
__OPTIMIZE__
))

386 
__ölöe__
 
	$°©64
 (
__c⁄°
 *
__∑th
,

387 
°©64
 *
__°©buf
Ë
__THROW


389  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

390 
	}
}

392 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


393 
__ölöe__
 
	$l°©64
 (
__c⁄°
 *
__∑th
,

394 
°©64
 *
__°©buf
Ë
__THROW


396  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

397 
	}
}

400 
__ölöe__
 
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
Ë
__THROW


402  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

403 
	}
}

408 
__END_DECLS


	@/usr/include/sys/time.h

19 #i‚de‡
_SYS_TIME_H


20 
	#_SYS_TIME_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_time_t


	)

26 
	~<time.h
>

27 
	#__√ed_timevÆ


	)

28 
	~<bôs/time.h
>

30 
	~<sys/£À˘.h
>

32 #i‚de‡
__su£c⁄ds_t_deföed


33 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

34 
	#__su£c⁄ds_t_deföed


	)

38 
	g__BEGIN_DECLS


40 #ifde‡
__USE_GNU


42 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

43 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

44 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

45 }

	)

46 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

47 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

48 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

49 }

	)

53 #ifde‡
__USE_BSD


56 
	stimez⁄e


58 
	mtz_möuãswe°
;

59 
	mtz_d°time
;

62 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

64 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

72 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

73 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
;

75 #ifde‡
__USE_BSD


78 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

79 
__c⁄°
 
timez⁄e
 *
__tz
Ë
__THROW
;

85 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	`utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
;

141 #ifde‡
__USE_BSD


143 
	`lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
;

147 
	`futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

151 #ifde‡
__USE_BSD


154 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

155 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

156 
	#timîcmp
(
a
, 
b
, 
CMP
) \

157 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

158 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

159 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

160 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

162 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

163 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

164 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

166 ++(
ªsu…
)->
tv_£c
; \

167 (
ªsu…
)->
tv_u£c
 -= 1000000; \

169 
	}
} 0)

	)

170 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

175 --(
ªsu…
)->
tv_£c
; \

176 (
ªsu…
)->
tv_u£c
 += 1000000; \

178 } 0)

	)

181 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__GLIBC_HAVE_LONG_LONG


167 
__exãnsi⁄__
 
	töt64_t
;

172 
	tu_öt8_t
;

173 
	tu_öt16_t
;

174 
	tu_öt32_t
;

175 #i‡
__GLIBC_HAVE_LONG_LONG


176 
__exãnsi⁄__
 
	tu_öt64_t
;

179 
	tªgi°î_t
;

184 
	#__ötN_t
(
N
, 
MODE
) \

185 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

186 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

187 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 #i‚de‡
	t__öt8_t_deföed


190 
	t__öt8_t_deföed


	)

191 
	t__ötN_t
 (8, 
	t__QI__
);

192 
__ötN_t
 (16, 
__HI__
);

193 
__ötN_t
 (32, 
__SI__
);

194 
__ötN_t
 (64, 
__DI__
);

197 
__u_ötN_t
 (8, 
__QI__
);

198 
__u_ötN_t
 (16, 
__HI__
);

199 
__u_ötN_t
 (32, 
__SI__
);

200 
__u_ötN_t
 (64, 
__DI__
);

202 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

208 
	#__BIT_TYPES_DEFINED__
 1

	)

211 #ifdef 
__USE_BSD


213 
	~<ídün.h
>

216 
	~<sys/£À˘.h
>

219 
	~<sys/sysma¸os.h
>

223 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


224 
__blksize_t
 
	tblksize_t
;

225 
	#__blksize_t_deföed


	)

229 #i‚de‡
__USE_FILE_OFFSET64


230 #i‚de‡
__blk˙t_t_deföed


231 
__blk˙t_t
 
	tblk˙t_t
;

232 
	#__blk˙t_t_deföed


	)

234 #i‚de‡
__fsblk˙t_t_deföed


235 
__fsblk˙t_t
 
	tfsblk˙t_t
;

236 
	#__fsblk˙t_t_deföed


	)

238 #i‚de‡
__fsfû˙t_t_deföed


239 
__fsfû˙t_t
 
	tfsfû˙t_t
;

240 
	#__fsfû˙t_t_deföed


	)

243 #i‚de‡
__blk˙t_t_deföed


244 
__blk˙t64_t
 
	tblk˙t_t
;

245 
	#__blk˙t_t_deföed


	)

247 #i‚de‡
__fsblk˙t_t_deföed


248 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

249 
	#__fsblk˙t_t_deföed


	)

251 #i‚de‡
__fsfû˙t_t_deföed


252 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

253 
	#__fsfû˙t_t_deföed


	)

257 #ifde‡
__USE_LARGEFILE64


258 
__blk˙t64_t
 
	tblk˙t64_t
;

259 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

260 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

265 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


266 
	~<bôs/±hªadty≥s.h
>

269 
	g__END_DECLS


	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__ve˘‹
, 
__cou¡
);

50 
ssize_t
 
wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__ve˘‹
, 
__cou¡
);

52 
	g__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

118 
	stime•ec


120 
__time_t
 
tv_£c
;

121 
tv_n£c
;

125 #unde‡
__√ed_time•ec


128 #ifdef 
_TIME_H


129 
__BEGIN_NAMESPACE_STD


131 
	stm


133 
tm_£c
;

134 
tm_mö
;

135 
tm_hour
;

136 
tm_mday
;

137 
tm_m⁄
;

138 
tm_yór
;

139 
tm_wday
;

140 
tm_yday
;

141 
tm_isd°
;

143 #ifdef 
__USE_BSD


144 
tm_gmtoff
;

145 
__c⁄°
 *
tm_z⁄e
;

147 
__tm_gmtoff
;

148 
__c⁄°
 *
__tm_z⁄e
;

151 
__END_NAMESPACE_STD


152 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


153 
	$__USING_NAMESPACE_STD
(
tm
)

157 #ifde‡
__USE_POSIX199309


159 
	sôimî•ec


161 
time•ec
 
ô_öãrvÆ
;

162 
time•ec
 
ô_vÆue
;

166 
sigevít
;

170 #ifde‡
__USE_XOPEN2K


171 #i‚de‡
__pid_t_deföed


172 
__pid_t
 
	tpid_t
;

173 
	#__pid_t_deföed


	)

178 
__BEGIN_NAMESPACE_STD


181 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

184 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

187 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

188 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

191 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

197 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

198 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

199 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

200 
__END_NAMESPACE_STD


202 #ifde‡
__USE_XOPEN


205 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

206 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

207 
__THROW
;

210 #ifde‡
__USE_GNU


213 
	~<xloˇÀ.h
>

215 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

216 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

217 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

218 
__loˇÀ_t
 
__loc
Ë
__THROW
;

220 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

221 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

222 
__loˇÀ_t
 
__loc
Ë
__THROW
;

226 
__BEGIN_NAMESPACE_STD


229 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

233 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

234 
__END_NAMESPACE_STD


236 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


239 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

240 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

244 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

245 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
__BEGIN_NAMESPACE_STD


251 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

254 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

255 
__END_NAMESPACE_STD


257 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


262 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

263 *
__ª°ri˘
 
__buf
Ë
__THROW
;

266 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

272 *
__tz«me
[2];

273 
__daylight
;

274 
__timez⁄e
;

277 #ifdef 
__USE_POSIX


279 *
tz«me
[2];

283 
	$tz£t
 (Ë
__THROW
;

286 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


287 
daylight
;

288 
timez⁄e
;

291 #ifde‡
__USE_SVID


294 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

300 
	#__i¶óp
(
yór
) \

301 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

304 #ifde‡
__USE_MISC


309 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

312 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

315 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

319 #ifde‡
__USE_POSIX199309


324 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

325 
time•ec
 *
__ªmaöög
);

329 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

332 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

335 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

336 
__THROW
;

338 #ifde‡
__USE_XOPEN2K


343 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

344 
__c⁄°
 
time•ec
 *
__ªq
,

345 
time•ec
 *
__ªm
);

348 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

353 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

354 
sigevít
 *
__ª°ri˘
 
__evp
,

355 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

358 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

361 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

362 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

363 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

366 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

367 
__THROW
;

370 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

374 #ifde‡
__USE_XOPEN_EXTENDED


386 
gëd©e_îr
;

395 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

398 #ifde‡
__USE_GNU


409 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

410 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

413 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


34 
	#_POSIX_VERSION
 200112L

	)

40 
	#_POSIX2_VERSION
 200112L

	)

44 
	#_POSIX2_C_BIND
 200112L

	)

48 
	#_POSIX2_C_DEV
 200112L

	)

52 
	#_POSIX2_SW_DEV
 200112L

	)

56 
	#_POSIX2_LOCALEDEF
 200112L

	)

59 #ifde‡
__USE_UNIX98


60 
	#_XOPEN_VERSION
 500

	)

62 
	#_XOPEN_VERSION
 4

	)

66 
	#_XOPEN_XCU_VERSION
 4

	)

69 
	#_XOPEN_XPG2
 1

	)

70 
	#_XOPEN_XPG3
 1

	)

71 
	#_XOPEN_XPG4
 1

	)

74 
	#_XOPEN_UNIX
 1

	)

77 
	#_XOPEN_CRYPT
 1

	)

81 
	#_XOPEN_ENH_I18N
 1

	)

84 
	#_XOPEN_LEGACY
 1

	)

171 
	~<bôs/posix_›t.h
>

174 #ifde‡
__USE_UNIX98


175 
	~<bôs/ívú⁄míts.h
>

179 
	#STDIN_FILENO
 0

	)

180 
	#STDOUT_FILENO
 1

	)

181 
	#STDERR_FILENO
 2

	)

186 
	~<bôs/ty≥s.h
>

188 #i‚def 
__ssize_t_deföed


189 
__ssize_t
 
	tssize_t
;

190 
	#__ssize_t_deföed


	)

193 
	#__√ed_size_t


	)

194 
	#__√ed_NULL


	)

195 
	~<°ddef.h
>

197 #ifde‡
__USE_XOPEN


200 #i‚de‡
__gid_t_deföed


201 
__gid_t
 
	tgid_t
;

202 
	#__gid_t_deföed


	)

205 #i‚de‡
__uid_t_deföed


206 
__uid_t
 
	tuid_t
;

207 
	#__uid_t_deföed


	)

210 #i‚de‡
__off_t_deföed


211 #i‚de‡
__USE_FILE_OFFSET64


212 
__off_t
 
	toff_t
;

214 
__off64_t
 
	toff_t
;

216 
	#__off_t_deföed


	)

218 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


219 
__off64_t
 
	toff64_t
;

220 
	#__off64_t_deföed


	)

223 #i‚de‡
__u£c⁄ds_t_deföed


224 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

225 
	#__u£c⁄ds_t_deföed


	)

228 #i‚de‡
__pid_t_deföed


229 
__pid_t
 
	tpid_t
;

230 
	#__pid_t_deföed


	)

234 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


235 #i‚de‡
__öçå_t_deföed


236 
__öçå_t
 
	töçå_t
;

237 
	#__öçå_t_deföed


	)

241 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


242 #i‚de‡
__sockÀn_t_deföed


243 
__sockÀn_t
 
	tsockÀn_t
;

244 
	#__sockÀn_t_deföed


	)

250 
	#R_OK
 4

	)

251 
	#W_OK
 2

	)

252 
	#X_OK
 1

	)

253 
	#F_OK
 0

	)

256 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
;

258 #ifde‡
__USE_GNU


261 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
;

266 #i‚def 
_STDIO_H


267 
	#SEEK_SET
 0

	)

268 
	#SEEK_CUR
 1

	)

269 
	#SEEK_END
 2

	)

272 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


274 
	#L_SET
 
SEEK_SET


	)

275 
	#L_INCR
 
SEEK_CUR


	)

276 
	#L_XTND
 
SEEK_END


	)

285 #i‚de‡
__USE_FILE_OFFSET64


286 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

288 #ifde‡
__REDIRECT


289 
__off64_t
 
	`__REDIRECT
 (
l£ek
,

290 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

291 
__THROW
,

292 
l£ek64
);

294 
	#l£ek
 
l£ek64


	)

297 #ifde‡
__USE_LARGEFILE64


298 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

305 
	`˛o£
 (
__fd
);

312 
ssize_t
 
	`ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
);

318 
ssize_t
 
	`wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
);

320 #ifde‡
__USE_UNIX98


321 #i‚de‡
__USE_FILE_OFFSET64


328 
ssize_t
 
	`¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

329 
__off_t
 
__off£t
);

336 
ssize_t
 
	`pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

337 
__off_t
 
__off£t
);

339 #ifde‡
__REDIRECT


340 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

341 
__off64_t
 
__off£t
),

342 
¥ód64
);

343 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

344 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

345 
pwrôe64
);

347 
	#¥ód
 
¥ód64


	)

348 
	#pwrôe
 
pwrôe64


	)

352 #ifde‡
__USE_LARGEFILE64


356 
ssize_t
 
	`¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

357 
__off64_t
 
__off£t
);

360 
ssize_t
 
	`pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

361 
__off64_t
 
__off£t
);

369 
	`pùe
 (
__pùedes
[2]Ë
__THROW
;

378 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

390 
	`¶ìp
 (
__£c⁄ds
);

392 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


397 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

398 
__THROW
;

405 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

414 
	`∑u£
 ();

418 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

419 
__THROW
;

421 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


423 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
;

428 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

429 
__THROW
;

434 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
;

436 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


438 
	$fchdú
 (
__fd
Ë
__THROW
;

448 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
;

450 #ifdef 
__USE_GNU


454 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

457 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 *
	$gëwd
 (*
__buf
Ë
__THROW
;

466 
	$dup
 (
__fd
Ë
__THROW
;

469 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

472 **
__ívú⁄
;

473 #ifde‡
__USE_GNU


474 **
ívú⁄
;

480 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

481 *
__c⁄°
 
__ívp
[]Ë
__THROW
;

483 #ifde‡
__USE_GNU


486 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

487 
__THROW
;

492 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[]Ë
__THROW
;

496 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...Ë
__THROW
;

500 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...Ë
__THROW
;

504 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[]Ë
__THROW
;

509 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...Ë
__THROW
;

512 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


514 
	$ni˚
 (
__öc
Ë
__THROW
;

519 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

525 
	~<bôs/c⁄‚ame.h
>

528 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
Ë
__THROW
;

531 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

534 
	$sysc⁄f
 (
__«me
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 #ifdef 
__USE_POSIX2


538 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

543 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

546 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

550 #i‚de‡
__FAVOR_BSD


551 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

553 #ifde‡
__REDIRECT


554 
__pid_t
 
	`__REDIRECT
 (
gëpgΩ
, (__pid_à
__pid
Ë
__THROW
, 
__gëpgid
);

556 
	#gëpgΩ
 
__gëpgid


	)

561 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

562 #ifde‡
__USE_XOPEN_EXTENDED


563 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

570 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

572 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


583 #i‚de‡
__FAVOR_BSD


587 
	$£çgΩ
 (Ë
__THROW
;

592 #ifde‡
__REDIRECT


593 
	`__REDIRECT
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
Ë
__THROW
,

594 
£çgid
);

596 
	#£çgΩ
 
£çgid


	)

605 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

607 #ifde‡
__USE_XOPEN_EXTENDED


609 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

613 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

616 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

619 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

622 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

627 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
;

629 #ifdef 
__USE_GNU


631 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

638 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

640 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


643 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

646 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


648 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

655 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

663 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


665 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

668 #ifde‡
__USE_GNU


671 
	`gëªsuid
 (
__uid_t
 *
__euid
, __uid_à*
__ruid
, __uid_à*
__suid
);

675 
	`gëªsgid
 (
__gid_t
 *
__egid
, __gid_à*
__rgid
, __gid_à*
__sgid
);

679 
	`£åesuid
 (
__uid_t
 
__euid
, __uid_à
__ruid
, __uid_à
__suid
);

683 
	`£åesgid
 (
__gid_t
 
__egid
, __gid_à
__rgid
, __gid_à
__sgid
);

690 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


697 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

703 *
	$ây«me
 (
__fd
Ë
__THROW
;

707 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
Ë
__THROW
;

711 
	$ißây
 (
__fd
Ë
__THROW
;

713 #i‡
deföed
 
__USE_BSD
 \

714 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

717 
	$ây¶Ÿ
 (Ë
__THROW
;

722 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
Ë
__THROW
;

724 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


726 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
Ë
__THROW
;

731 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

732 
size_t
 
__Àn
Ë
__THROW
;

736 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
;

739 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
;

743 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

746 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

753 *
	`gëlogö
 ();

754 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_UNIX98


761 
	`gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
);

764 #ifdef 
__USE_BSD


766 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
;

770 #ifdef 
__USE_POSIX2


774 
	#__√ed_gë›t


	)

775 
	~<gë›t.h
>

779 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


783 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
;

787 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

790 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
Ë
__THROW
;

794 
	$£tho°id
 (
__id
Ë
__THROW
;

800 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
;

801 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
Ë
__THROW
;

807 
	$vh™gup
 (Ë
__THROW
;

810 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
;

818 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

819 
size_t
 
__off£t
, 
__sˇÀ
Ë
__THROW
;

825 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

829 *
	$gëu£rshñl
 (Ë
__THROW
;

830 
	$ídu£rshñl
 (Ë
__THROW
;

831 
	$£tu£rshñl
 (Ë
__THROW
;

837 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
;

841 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

844 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
;

848 *
	`gë∑ss
 (
__c⁄°
 *
__¥om±
);

852 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


857 
	`fsync
 (
__fd
);

861 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


864 
	`gëho°id
 ();

867 
	$sync
 (Ë
__THROW
;

872 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

876 #i‚de‡
__USE_FILE_OFFSET64


877 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
Ë
__THROW
;

879 #ifde‡
__REDIRECT


880 
	`__REDIRECT
 (
åunˇã
,

881 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
Ë
__THROW
,

882 
åunˇã64
);

884 
	#åunˇã
 
åunˇã64


	)

887 #ifde‡
__USE_LARGEFILE64


888 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
Ë
__THROW
;

892 #i‚de‡
__USE_FILE_OFFSET64


893 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
;

895 #ifde‡
__REDIRECT


896 
	`__REDIRECT
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
,

897 
·runˇã64
);

899 
	#·runˇã
 
·runˇã64


	)

902 #ifde‡
__USE_LARGEFILE64


903 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
;

909 
	$gëdèbÀsize
 (Ë
__THROW
;

914 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


918 
	$brk
 (*
__addr
Ë
__THROW
;

924 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

928 #ifde‡
__USE_MISC


939 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

944 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


956 
	#F_ULOCK
 0

	)

957 
	#F_LOCK
 1

	)

958 
	#F_TLOCK
 2

	)

959 
	#F_TEST
 3

	)

961 #i‚de‡
__USE_FILE_OFFSET64


962 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

964 #ifde‡
__REDIRECT


965 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

966 
lockf64
);

968 
	#lockf
 
lockf64


	)

971 #ifde‡
__USE_LARGEFILE64


972 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

977 #ifde‡
__USE_GNU


982 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

983 (
__exãnsi⁄__
 \

984 ({ 
__ªsu…
; \

985 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

986 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

987 
__ªsu…
; 
	}
}))

	)

990 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


993 
	$fd©async
 (
__fûdes
Ë
__THROW
;

999 #ifdef 
__USE_XOPEN


1001 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
Ë
__THROW
;

1005 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
;

1012 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1013 
ssize_t
 
__n
Ë
__THROW
;

1019 #ifde‡
__USE_XOPEN


1021 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1024 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/byteswap.h

20 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H


24 #i‚de‡
_BITS_BYTESWAP_H


25 
	#_BITS_BYTESWAP_H
 1

	)

28 
	#__bsw≠_c⁄°™t_16
(
x
) \

29 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

31 #ifde‡
__GNUC__


32 #i‡
__GNUC__
 >= 2

33 
	#__bsw≠_16
(
x
) \

34 (
__exãnsi⁄__
 \

35 ({ 
__v
, 
__x
 = (
x
); \

36 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

37 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

39 
	`__asm__
 ("rorw $8, %w0" \

40 : "Ù" (
__v
) \

41 : "0" (
__x
) \

43 
__v
; }))

	)

46 
	#__bsw≠_16
(
x
) \

47 (
__exãnsi⁄__
 \

48 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

51 
__ölöe
 

52 
	$__bsw≠_16
 (
__bsx
)

54  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

55 
	}
}

59 
	#__bsw≠_c⁄°™t_32
(
x
) \

60 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

61 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

63 #ifde‡
__GNUC__


64 #i‡
__GNUC__
 >= 2

67 #i‡!
deföed
 
__i486__
 && !deföed 
__≥¡ium__
 && !deföed 
__≥¡ium¥o__
 \

68 && !
deföed
 
	g__≥¡ium4__


69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("rorw $8, %w0;" \

78 : "Ù" (
__v
) \

79 : "0" (
__x
) \

81 
__v
; }))

	)

83 
	#__bsw≠_32
(
x
) \

84 (
__exãnsi⁄__
 \

85 ({ 
__v
, 
__x
 = (
x
); \

86 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

87 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

89 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 
__ölöe
 

99 
	$__bsw≠_32
 (
__bsx
)

101  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

102 
	}
}

106 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

108 
	#__bsw≠_c⁄°™t_64
(
x
) \

109 ((((
x
) & 0xff00000000000000ull) >> 56) \

110 | (((
x
) & 0x00ff000000000000ull) >> 40) \

111 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

112 | (((
x
) & 0x000000ff00000000ull) >> 8) \

113 | (((
x
) & 0x00000000ff000000ull) << 8) \

114 | (((
x
) & 0x0000000000ff0000ull) << 24) \

115 | (((
x
) & 0x000000000000ff00ull) << 40) \

116 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

118 
	#__bsw≠_64
(
x
) \

119 (
__exãnsi⁄__
 \

120 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

121 
__l
[2]; } 
__w
, 
__r
; \

122 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

123 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

126 
__w
.
__Œ
 = (
x
); \

127 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

128 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

130 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/confname.h

20 #i‚de‡
_UNISTD_H


27 
	m_PC_LINK_MAX
,

28 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

29 
	m_PC_MAX_CANON
,

30 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

31 
	m_PC_MAX_INPUT
,

32 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

33 
	m_PC_NAME_MAX
,

34 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

35 
	m_PC_PATH_MAX
,

36 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

37 
	m_PC_PIPE_BUF
,

38 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

39 
	m_PC_CHOWN_RESTRICTED
,

40 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

41 
	m_PC_NO_TRUNC
,

42 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

43 
	m_PC_VDISABLE
,

44 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

45 
	m_PC_SYNC_IO
,

46 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

47 
	m_PC_ASYNC_IO
,

48 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

49 
	m_PC_PRIO_IO
,

50 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

51 
	m_PC_SOCK_MAXBUF
,

52 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

53 
	m_PC_FILESIZEBITS
,

54 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

55 
	m_PC_REC_INCR_XFER_SIZE
,

56 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

57 
	m_PC_REC_MAX_XFER_SIZE
,

58 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

59 
	m_PC_REC_MIN_XFER_SIZE
,

60 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

61 
	m_PC_REC_XFER_ALIGN
,

62 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

63 
	m_PC_ALLOC_SIZE_MIN
,

64 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

65 
	m_PC_SYMLINK_MAX
,

66 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

67 
	m_PC_2_SYMLINKS


68 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

74 
	m_SC_ARG_MAX
,

75 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

76 
	m_SC_CHILD_MAX
,

77 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

78 
	m_SC_CLK_TCK
,

79 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

80 
	m_SC_NGROUPS_MAX
,

81 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

82 
	m_SC_OPEN_MAX
,

83 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

84 
	m_SC_STREAM_MAX
,

85 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

86 
	m_SC_TZNAME_MAX
,

87 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

88 
	m_SC_JOB_CONTROL
,

89 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

90 
	m_SC_SAVED_IDS
,

91 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

92 
	m_SC_REALTIME_SIGNALS
,

93 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

94 
	m_SC_PRIORITY_SCHEDULING
,

95 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

96 
	m_SC_TIMERS
,

97 
	#_SC_TIMERS
 
_SC_TIMERS


	)

98 
	m_SC_ASYNCHRONOUS_IO
,

99 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

100 
	m_SC_PRIORITIZED_IO
,

101 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

102 
	m_SC_SYNCHRONIZED_IO
,

103 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

104 
	m_SC_FSYNC
,

105 
	#_SC_FSYNC
 
_SC_FSYNC


	)

106 
	m_SC_MAPPED_FILES
,

107 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

108 
	m_SC_MEMLOCK
,

109 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

110 
	m_SC_MEMLOCK_RANGE
,

111 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

112 
	m_SC_MEMORY_PROTECTION
,

113 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

114 
	m_SC_MESSAGE_PASSING
,

115 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

116 
	m_SC_SEMAPHORES
,

117 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

118 
	m_SC_SHARED_MEMORY_OBJECTS
,

119 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

120 
	m_SC_AIO_LISTIO_MAX
,

121 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

122 
	m_SC_AIO_MAX
,

123 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

124 
	m_SC_AIO_PRIO_DELTA_MAX
,

125 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

126 
	m_SC_DELAYTIMER_MAX
,

127 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

128 
	m_SC_MQ_OPEN_MAX
,

129 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

130 
	m_SC_MQ_PRIO_MAX
,

131 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

132 
	m_SC_VERSION
,

133 
	#_SC_VERSION
 
_SC_VERSION


	)

134 
	m_SC_PAGESIZE
,

135 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

136 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

137 
	m_SC_RTSIG_MAX
,

138 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

139 
	m_SC_SEM_NSEMS_MAX
,

140 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

141 
	m_SC_SEM_VALUE_MAX
,

142 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

143 
	m_SC_SIGQUEUE_MAX
,

144 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

145 
	m_SC_TIMER_MAX
,

146 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

150 
	m_SC_BC_BASE_MAX
,

151 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

152 
	m_SC_BC_DIM_MAX
,

153 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

154 
	m_SC_BC_SCALE_MAX
,

155 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

156 
	m_SC_BC_STRING_MAX
,

157 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

158 
	m_SC_COLL_WEIGHTS_MAX
,

159 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

160 
	m_SC_EQUIV_CLASS_MAX
,

161 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

162 
	m_SC_EXPR_NEST_MAX
,

163 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

164 
	m_SC_LINE_MAX
,

165 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

166 
	m_SC_RE_DUP_MAX
,

167 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

168 
	m_SC_CHARCLASS_NAME_MAX
,

169 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

171 
	m_SC_2_VERSION
,

172 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

173 
	m_SC_2_C_BIND
,

174 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

175 
	m_SC_2_C_DEV
,

176 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

177 
	m_SC_2_FORT_DEV
,

178 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

179 
	m_SC_2_FORT_RUN
,

180 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

181 
	m_SC_2_SW_DEV
,

182 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

183 
	m_SC_2_LOCALEDEF
,

184 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

186 
	m_SC_PII
,

187 
	#_SC_PII
 
_SC_PII


	)

188 
	m_SC_PII_XTI
,

189 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

190 
	m_SC_PII_SOCKET
,

191 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

192 
	m_SC_PII_INTERNET
,

193 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

194 
	m_SC_PII_OSI
,

195 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

196 
	m_SC_POLL
,

197 
	#_SC_POLL
 
_SC_POLL


	)

198 
	m_SC_SELECT
,

199 
	#_SC_SELECT
 
_SC_SELECT


	)

200 
	m_SC_UIO_MAXIOV
,

201 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

202 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

203 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

204 
	m_SC_PII_INTERNET_STREAM
,

205 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

206 
	m_SC_PII_INTERNET_DGRAM
,

207 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

208 
	m_SC_PII_OSI_COTS
,

209 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

210 
	m_SC_PII_OSI_CLTS
,

211 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

212 
	m_SC_PII_OSI_M
,

213 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

214 
	m_SC_T_IOV_MAX
,

215 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

218 
	m_SC_THREADS
,

219 
	#_SC_THREADS
 
_SC_THREADS


	)

220 
	m_SC_THREAD_SAFE_FUNCTIONS
,

221 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

222 
	m_SC_GETGR_R_SIZE_MAX
,

223 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

224 
	m_SC_GETPW_R_SIZE_MAX
,

225 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

226 
	m_SC_LOGIN_NAME_MAX
,

227 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

228 
	m_SC_TTY_NAME_MAX
,

229 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

230 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

231 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

232 
	m_SC_THREAD_KEYS_MAX
,

233 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

234 
	m_SC_THREAD_STACK_MIN
,

235 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

236 
	m_SC_THREAD_THREADS_MAX
,

237 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

238 
	m_SC_THREAD_ATTR_STACKADDR
,

239 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

240 
	m_SC_THREAD_ATTR_STACKSIZE
,

241 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

242 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

243 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

244 
	m_SC_THREAD_PRIO_INHERIT
,

245 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

246 
	m_SC_THREAD_PRIO_PROTECT
,

247 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

248 
	m_SC_THREAD_PROCESS_SHARED
,

249 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

251 
	m_SC_NPROCESSORS_CONF
,

252 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

253 
	m_SC_NPROCESSORS_ONLN
,

254 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

255 
	m_SC_PHYS_PAGES
,

256 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

257 
	m_SC_AVPHYS_PAGES
,

258 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

259 
	m_SC_ATEXIT_MAX
,

260 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

261 
	m_SC_PASS_MAX
,

262 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

264 
	m_SC_XOPEN_VERSION
,

265 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

266 
	m_SC_XOPEN_XCU_VERSION
,

267 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

268 
	m_SC_XOPEN_UNIX
,

269 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

270 
	m_SC_XOPEN_CRYPT
,

271 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

272 
	m_SC_XOPEN_ENH_I18N
,

273 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

274 
	m_SC_XOPEN_SHM
,

275 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

277 
	m_SC_2_CHAR_TERM
,

278 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

279 
	m_SC_2_C_VERSION
,

280 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

281 
	m_SC_2_UPE
,

282 
	#_SC_2_UPE
 
_SC_2_UPE


	)

284 
	m_SC_XOPEN_XPG2
,

285 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

286 
	m_SC_XOPEN_XPG3
,

287 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

288 
	m_SC_XOPEN_XPG4
,

289 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

291 
	m_SC_CHAR_BIT
,

292 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

293 
	m_SC_CHAR_MAX
,

294 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

295 
	m_SC_CHAR_MIN
,

296 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

297 
	m_SC_INT_MAX
,

298 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

299 
	m_SC_INT_MIN
,

300 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

301 
	m_SC_LONG_BIT
,

302 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

303 
	m_SC_WORD_BIT
,

304 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

305 
	m_SC_MB_LEN_MAX
,

306 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

307 
	m_SC_NZERO
,

308 
	#_SC_NZERO
 
_SC_NZERO


	)

309 
	m_SC_SSIZE_MAX
,

310 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

311 
	m_SC_SCHAR_MAX
,

312 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

313 
	m_SC_SCHAR_MIN
,

314 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

315 
	m_SC_SHRT_MAX
,

316 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

317 
	m_SC_SHRT_MIN
,

318 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

319 
	m_SC_UCHAR_MAX
,

320 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

321 
	m_SC_UINT_MAX
,

322 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

323 
	m_SC_ULONG_MAX
,

324 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

325 
	m_SC_USHRT_MAX
,

326 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

328 
	m_SC_NL_ARGMAX
,

329 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

330 
	m_SC_NL_LANGMAX
,

331 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

332 
	m_SC_NL_MSGMAX
,

333 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

334 
	m_SC_NL_NMAX
,

335 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

336 
	m_SC_NL_SETMAX
,

337 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

338 
	m_SC_NL_TEXTMAX
,

339 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

341 
	m_SC_XBS5_ILP32_OFF32
,

342 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

343 
	m_SC_XBS5_ILP32_OFFBIG
,

344 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

345 
	m_SC_XBS5_LP64_OFF64
,

346 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

347 
	m_SC_XBS5_LPBIG_OFFBIG
,

348 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

350 
	m_SC_XOPEN_LEGACY
,

351 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

352 
	m_SC_XOPEN_REALTIME
,

353 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

354 
	m_SC_XOPEN_REALTIME_THREADS
,

355 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

357 
	m_SC_ADVISORY_INFO
,

358 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

359 
	m_SC_BARRIERS
,

360 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

361 
	m_SC_BASE
,

362 
	#_SC_BASE
 
_SC_BASE


	)

363 
	m_SC_C_LANG_SUPPORT
,

364 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

365 
	m_SC_C_LANG_SUPPORT_R
,

366 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

367 
	m_SC_CLOCK_SELECTION
,

368 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

369 
	m_SC_CPUTIME
,

370 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

371 
	m_SC_THREAD_CPUTIME
,

372 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

373 
	m_SC_DEVICE_IO
,

374 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

375 
	m_SC_DEVICE_SPECIFIC
,

376 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

377 
	m_SC_DEVICE_SPECIFIC_R
,

378 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

379 
	m_SC_FD_MGMT
,

380 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

381 
	m_SC_FIFO
,

382 
	#_SC_FIFO
 
_SC_FIFO


	)

383 
	m_SC_PIPE
,

384 
	#_SC_PIPE
 
_SC_PIPE


	)

385 
	m_SC_FILE_ATTRIBUTES
,

386 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

387 
	m_SC_FILE_LOCKING
,

388 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

389 
	m_SC_FILE_SYSTEM
,

390 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

391 
	m_SC_MONOTONIC_CLOCK
,

392 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

393 
	m_SC_MULTI_PROCESS
,

394 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

395 
	m_SC_SINGLE_PROCESS
,

396 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

397 
	m_SC_NETWORKING
,

398 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

399 
	m_SC_READER_WRITER_LOCKS
,

400 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

401 
	m_SC_SPIN_LOCKS
,

402 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

403 
	m_SC_REGEXP
,

404 
	#_SC_REGEXP
 
_SC_REGEXP


	)

405 
	m_SC_REGEX_VERSION
,

406 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

407 
	m_SC_SHELL
,

408 
	#_SC_SHELL
 
_SC_SHELL


	)

409 
	m_SC_SIGNALS
,

410 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

411 
	m_SC_SPAWN
,

412 
	#_SC_SPAWN
 
_SC_SPAWN


	)

413 
	m_SC_SPORADIC_SERVER
,

414 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

415 
	m_SC_THREAD_SPORADIC_SERVER
,

416 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

417 
	m_SC_SYSTEM_DATABASE
,

418 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

419 
	m_SC_SYSTEM_DATABASE_R
,

420 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

421 
	m_SC_TIMEOUTS
,

422 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

423 
	m_SC_TYPED_MEMORY_OBJECTS
,

424 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

425 
	m_SC_USER_GROUPS
,

426 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

427 
	m_SC_USER_GROUPS_R
,

428 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

429 
	m_SC_2_PBS
,

430 
	#_SC_2_PBS
 
_SC_2_PBS


	)

431 
	m_SC_2_PBS_ACCOUNTING
,

432 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

433 
	m_SC_2_PBS_LOCATE
,

434 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

435 
	m_SC_2_PBS_MESSAGE
,

436 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

437 
	m_SC_2_PBS_TRACK
,

438 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

439 
	m_SC_SYMLOOP_MAX
,

440 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

441 
	m_SC_STREAMS
,

442 
	#_SC_STREAMS
 
_SC_STREAMS


	)

443 
	m_SC_2_PBS_CHECKPOINT
,

444 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

446 
	m_SC_V6_ILP32_OFF32
,

447 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

448 
	m_SC_V6_ILP32_OFFBIG
,

449 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

450 
	m_SC_V6_LP64_OFF64
,

451 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

452 
	m_SC_V6_LPBIG_OFFBIG
,

453 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

455 
	m_SC_HOST_NAME_MAX
,

456 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

457 
	m_SC_TRACE
,

458 
	#_SC_TRACE
 
_SC_TRACE


	)

459 
	m_SC_TRACE_EVENT_FILTER
,

460 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

461 
	m_SC_TRACE_INHERIT
,

462 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

463 
	m_SC_TRACE_LOG


464 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

470 
	m_CS_PATH
,

471 
	#_CS_PATH
 
_CS_PATH


	)

473 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

474 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

476 
	m_CS_GNU_LIBC_VERSION
,

477 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

478 
	m_CS_GNU_LIBPTHREAD_VERSION
,

479 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

481 
	m_CS_LFS_CFLAGS
 = 1000,

482 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

483 
	m_CS_LFS_LDFLAGS
,

484 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

485 
	m_CS_LFS_LIBS
,

486 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

487 
	m_CS_LFS_LINTFLAGS
,

488 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

489 
	m_CS_LFS64_CFLAGS
,

490 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

491 
	m_CS_LFS64_LDFLAGS
,

492 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

493 
	m_CS_LFS64_LIBS
,

494 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

495 
	m_CS_LFS64_LINTFLAGS
,

496 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

498 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

499 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

500 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

501 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

502 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

503 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

504 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

505 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

506 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

507 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

508 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

509 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

510 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

511 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

512 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

513 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

514 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

515 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

516 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

517 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

518 
	m_CS_XBS5_LP64_OFF64_LIBS
,

519 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

520 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

521 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

522 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

523 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

524 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

525 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

526 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

527 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

528 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

529 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

531 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

532 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

533 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

534 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

535 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

536 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

537 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

538 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

539 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

540 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

541 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

542 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

543 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

544 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

545 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

546 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

547 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

548 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

549 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

550 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

551 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

552 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

553 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

554 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

555 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

556 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

557 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

558 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

559 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

560 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

561 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


562 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

41 #i‡
__WORDSIZE
 == 64

44 
	#_POSIX_V6_ILP32_OFF32
 -1

	)

45 
	#_POSIX_V6_ILP32_OFFBIG
 -1

	)

46 
	#_XBS5_ILP32_OFF32
 -1

	)

47 
	#_XBS5_ILP32_OFFBIG
 -1

	)

50 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

51 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

54 
	#_POSIX_V6_LP64_OFF64
 1

	)

55 
	#_XBS5_LP64_OFF64
 1

	)

61 
	#_POSIX_V6_ILP32_OFF32
 1

	)

62 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

63 
	#_XBS5_ILP32_OFF32
 1

	)

64 
	#_XBS5_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_LP64_OFF64
 -1

	)

71 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

72 
	#_XBS5_LP64_OFF64
 -1

	)

73 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

32 #i‚de‡
ECANCELED


33 
	#ECANCELED
 125

	)

36 #i‚de‡
__ASSEMBLER__


38 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

40 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


42 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

47 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


51 
	#EDOM
 33

	)

52 
	#EILSEQ
 84

	)

53 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

20 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

29 
	#O_ACCMODE
 0003

	)

30 
	#O_RDONLY
 00

	)

31 
	#O_WRONLY
 01

	)

32 
	#O_RDWR
 02

	)

33 
	#O_CREAT
 0100

	)

34 
	#O_EXCL
 0200

	)

35 
	#O_NOCTTY
 0400

	)

36 
	#O_TRUNC
 01000

	)

37 
	#O_APPEND
 02000

	)

38 
	#O_NONBLOCK
 04000

	)

39 
	#O_NDELAY
 
O_NONBLOCK


	)

40 
	#O_SYNC
 010000

	)

41 
	#O_FSYNC
 
O_SYNC


	)

42 
	#O_ASYNC
 020000

	)

44 #ifde‡
__USE_GNU


45 
	#O_DIRECT
 040000

	)

46 
	#O_DIRECTORY
 0200000

	)

47 
	#O_NOFOLLOW
 0400000

	)

53 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


54 
	#O_DSYNC
 
O_SYNC


	)

55 
	#O_RSYNC
 
O_SYNC


	)

58 #ifde‡
__USE_LARGEFILE64


59 
	#O_LARGEFILE
 0100000

	)

63 
	#F_DUPFD
 0

	)

64 
	#F_GETFD
 1

	)

65 
	#F_SETFD
 2

	)

66 
	#F_GETFL
 3

	)

67 
	#F_SETFL
 4

	)

68 #i‚de‡
__USE_FILE_OFFSET64


69 
	#F_GETLK
 5

	)

70 
	#F_SETLK
 6

	)

71 
	#F_SETLKW
 7

	)

73 
	#F_GETLK
 
F_GETLK64


	)

74 
	#F_SETLK
 
F_SETLK64


	)

75 
	#F_SETLKW
 
F_SETLKW64


	)

77 
	#F_GETLK64
 12

	)

78 
	#F_SETLK64
 13

	)

79 
	#F_SETLKW64
 14

	)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


82 
	#F_SETOWN
 8

	)

83 
	#F_GETOWN
 9

	)

86 #ifde‡
__USE_GNU


87 
	#F_SETSIG
 10

	)

88 
	#F_GETSIG
 11

	)

91 #ifde‡
__USE_GNU


92 
	#F_SETLEASE
 1024

	)

93 
	#F_GETLEASE
 1025

	)

94 
	#F_NOTIFY
 1026

	)

98 
	#FD_CLOEXEC
 1

	)

101 
	#F_RDLCK
 0

	)

102 
	#F_WRLCK
 1

	)

103 
	#F_UNLCK
 2

	)

106 
	#F_EXLCK
 4

	)

107 
	#F_SHLCK
 8

	)

109 #ifde‡
__USE_BSD


111 
	#LOCK_SH
 1

	)

112 
	#LOCK_EX
 2

	)

113 
	#LOCK_NB
 4

	)

115 
	#LOCK_UN
 8

	)

118 #ifde‡
__USE_GNU


119 
	#LOCK_MAND
 32

	)

120 
	#LOCK_READ
 64

	)

121 
	#LOCK_WRITE
 128

	)

122 
	#LOCK_RW
 192

	)

125 #ifde‡
__USE_GNU


127 
	#DN_ACCESS
 0x00000001

	)

128 
	#DN_MODIFY
 0x00000002

	)

129 
	#DN_CREATE
 0x00000004

	)

130 
	#DN_DELETE
 0x00000008

	)

131 
	#DN_RENAME
 0x00000010

	)

132 
	#DN_ATTRIB
 0x00000020

	)

133 
	#DN_MULTISHOT
 0x80000000

	)

136 
	sÊock


138 
	ml_ty≥
;

139 
	ml_whí˚
;

140 #i‚de‡
__USE_FILE_OFFSET64


141 
__off_t
 
	ml_°¨t
;

142 
__off_t
 
	ml_Àn
;

144 
__off64_t
 
	ml_°¨t
;

145 
__off64_t
 
	ml_Àn
;

147 
__pid_t
 
	ml_pid
;

150 #ifde‡
__USE_LARGEFILE64


151 
	sÊock64


153 
	ml_ty≥
;

154 
	ml_whí˚
;

155 
__off64_t
 
	ml_°¨t
;

156 
__off64_t
 
	ml_Àn
;

157 
__pid_t
 
	ml_pid
;

163 #ifdef 
__USE_BSD


164 
	#FAPPEND
 
O_APPEND


	)

165 
	#FFSYNC
 
O_FSYNC


	)

166 
	#FASYNC
 
O_ASYNC


	)

167 
	#FNONBLOCK
 
O_NONBLOCK


	)

168 
	#FNDELAY
 
O_NDELAY


	)

172 #ifde‡
__USE_XOPEN2K


173 
	#POSIX_FADV_NORMAL
 0

	)

174 
	#POSIX_FADV_RANDOM
 1

	)

175 
	#POSIX_FADV_SEQUENTIAL
 2

	)

176 
	#POSIX_FADV_WILLNEED
 3

	)

177 
	#POSIX_FADV_DONTNEED
 4

	)

178 
	#POSIX_FADV_NOREUSE
 5

	)

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_TOS
 1

	)

29 
	#IP_TTL
 2

	)

30 
	#IP_HDRINCL
 3

	)

31 
	#IP_OPTIONS
 4

	)

32 
	#IP_ROUTER_ALERT
 5

	)

33 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RETOPTS
 7

	)

35 
	#IP_PKTINFO
 8

	)

36 
	#IP_PKTOPTIONS
 9

	)

37 
	#IP_PMTUDISC
 10

	)

38 
	#IP_MTU_DISCOVER
 10

	)

39 
	#IP_RECVERR
 11

	)

40 
	#IP_RECVTTL
 12

	)

41 
	#IP_RECVTOS
 13

	)

42 
	#IP_MULTICAST_IF
 32

	)

43 
	#IP_MULTICAST_TTL
 33

	)

44 
	#IP_MULTICAST_LOOP
 34

	)

45 
	#IP_ADD_MEMBERSHIP
 35

	)

46 
	#IP_DROP_MEMBERSHIP
 36

	)

49 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

52 
	#IP_PMTUDISC_DONT
 0

	)

53 
	#IP_PMTUDISC_WANT
 1

	)

54 
	#IP_PMTUDISC_DO
 2

	)

57 
	#SOL_IP
 0

	)

59 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

60 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

61 
	#IP_MAX_MEMBERSHIPS
 20

	)

66 
	sù_›ts


68 
ö_addr
 
	mù_d°
;

69 
	mù_›ts
[40];

73 
	sù_mªq


75 
ö_addr
 
	mimr_mu…üddr
;

76 
ö_addr
 
	mimr_öãrÁ˚
;

80 
	sù_mªqn


82 
ö_addr
 
	mimr_mu…üddr
;

83 
ö_addr
 
	mimr_addªss
;

84 
	mimr_ifödex
;

88 
	sö_pktöfo


90 
	mùi_ifödex
;

91 
ö_addr
 
	mùi_•ec_d°
;

92 
ö_addr
 
	mùi_addr
;

98 
	#IPV6_ADDRFORM
 1

	)

99 
	#IPV6_PKTINFO
 2

	)

100 
	#IPV6_HOPOPTS
 3

	)

101 
	#IPV6_DSTOPTS
 4

	)

102 
	#IPV6_RTHDR
 5

	)

103 
	#IPV6_PKTOPTIONS
 6

	)

104 
	#IPV6_CHECKSUM
 7

	)

105 
	#IPV6_HOPLIMIT
 8

	)

106 
	#IPV6_NEXTHOP
 9

	)

107 
	#IPV6_AUTHHDR
 10

	)

108 
	#IPV6_UNICAST_HOPS
 16

	)

109 
	#IPV6_MULTICAST_IF
 17

	)

110 
	#IPV6_MULTICAST_HOPS
 18

	)

111 
	#IPV6_MULTICAST_LOOP
 19

	)

112 
	#IPV6_JOIN_GROUP
 20

	)

113 
	#IPV6_LEAVE_GROUP
 21

	)

114 
	#IPV6_ROUTER_ALERT
 22

	)

115 
	#IPV6_MTU_DISCOVER
 23

	)

116 
	#IPV6_MTU
 24

	)

117 
	#IPV6_RECVERR
 25

	)

118 
	#IPV6_V6ONLY
 26

	)

119 
	#IPV6_JOIN_ANYCAST
 27

	)

120 
	#IPV6_LEAVE_ANYCAST
 28

	)

121 
	#IPV6_IPSEC_POLICY
 34

	)

122 
	#IPV6_XFRM_POLICY
 35

	)

124 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

127 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

128 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

129 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

130 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

134 
	#IPV6_PMTUDISC_DONT
 0

	)

135 
	#IPV6_PMTUDISC_WANT
 1

	)

136 
	#IPV6_PMTUDISC_DO
 2

	)

139 
	#SOL_IPV6
 41

	)

140 
	#SOL_ICMPV6
 58

	)

143 
	#IPV6_RTHDR_LOOSE
 0

	)

144 
	#IPV6_RTHDR_STRICT
 1

	)

146 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/netdb.h

19 #i‚de‡
_NETDB_H


27 
	s√ã¡


29 *
	mn_«me
;

30 **
	mn_Æü£s
;

31 
	mn_addπy≥
;

32 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 
	#_POSIX_CHILD_MAX
 6

	)

44 
	#_POSIX_DELAYTIMER_MAX
 32

	)

47 
	#_POSIX_LINK_MAX
 8

	)

50 
	#_POSIX_MAX_CANON
 255

	)

54 
	#_POSIX_MAX_INPUT
 255

	)

57 
	#_POSIX_MQ_OPEN_MAX
 8

	)

60 
	#_POSIX_MQ_PRIO_MAX
 32

	)

63 #ifde‡
__USE_XOPEN2K


64 
	#_POSIX_NGROUPS_MAX
 8

	)

66 
	#_POSIX_NGROUPS_MAX
 0

	)

70 
	#_POSIX_OPEN_MAX
 16

	)

74 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

77 
	#_POSIX_NAME_MAX
 14

	)

80 
	#_POSIX_PATH_MAX
 256

	)

83 
	#_POSIX_PIPE_BUF
 512

	)

86 
	#_POSIX_RTSIG_MAX
 8

	)

89 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

92 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

95 
	#_POSIX_SIGQUEUE_MAX
 32

	)

98 
	#_POSIX_SSIZE_MAX
 32767

	)

101 
	#_POSIX_STREAM_MAX
 8

	)

104 
	#_POSIX_TZNAME_MAX
 6

	)

107 
	#_POSIX_QLIMIT
 1

	)

111 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

114 
	#_POSIX_UIO_MAXIOV
 16

	)

117 
	#_POSIX_TTY_NAME_MAX
 9

	)

120 
	#_POSIX_TIMER_MAX
 32

	)

123 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

126 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

130 
	~<bôs/loˇl_lim.h
>

133 #i‚def 
SSIZE_MAX


134 
	#SSIZE_MAX
 
LONG_MAX


	)

141 #i‚def 
NGROUPS_MAX


142 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_POSIX_OPT_H


21 
	#_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200112L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200112L

	)

36 
	#_POSIX_FSYNC
 200112L

	)

39 
	#_POSIX_MAPPED_FILES
 200112L

	)

42 
	#_POSIX_MEMLOCK
 200112L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 1

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200112L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200112L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200112L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

86 
	#_POSIX_SEMAPHORES
 200112L

	)

89 
	#_POSIX_REALTIME_SIGNALS
 200112L

	)

92 
	#_POSIX_ASYNCHRONOUS_IO
 200112L

	)

93 
	#_POSIX_ASYNC_IO
 1

	)

95 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

98 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

101 
	#_LFS_LARGEFILE
 1

	)

102 
	#_LFS64_LARGEFILE
 1

	)

103 
	#_LFS64_STDIO
 1

	)

106 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

109 
	#_POSIX_CPUTIME
 200112L

	)

112 
	#_POSIX_THREAD_CPUTIME
 200112L

	)

115 
	#_POSIX_REGEXP
 1

	)

118 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

121 
	#_POSIX_SHELL
 1

	)

124 
	#_POSIX_TIMEOUTS
 200112L

	)

127 
	#_POSIX_SPIN_LOCKS
 200112L

	)

130 
	#_POSIX_SPAWN
 200112L

	)

133 
	#_POSIX_TIMERS
 200112L

	)

136 
	#_POSIX_BARRIERS
 200112L

	)

139 #unde‡
_POSIX_MESSAGE_PASSING


142 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

	@/usr/include/bits/pthreadtypes.h

15 #i‡!
deföed
 
_BITS_TYPES_H
 && !deföed 
_PTHREAD_H


19 #i‚de‡
_BITS_PTHREADTYPES_H


20 
	#_BITS_PTHREADTYPES_H
 1

	)

22 
	#__√ed_sched∑øm


	)

23 
	~<bôs/sched.h
>

25 
	t__©omic_lock_t
;

28 
	s_±hªad_Á°lock


30 
	m__°©us
;

31 
__©omic_lock_t
 
	m__•ölock
;

35 #i‚de‡
_PTHREAD_DESCR_DEFINED


37 
_±hªad_des¸_°ru˘
 *
	t_±hªad_des¸
;

38 
	#_PTHREAD_DESCR_DEFINED


	)

43 
	s__±hªad_©å_s


45 
	m__dëach°©e
;

46 
	m__schedpﬁicy
;

47 
__sched_∑øm
 
	m__sched∑øm
;

48 
	m__öhîôsched
;

49 
	m__sc›e
;

50 
size_t
 
	m__gu¨dsize
;

51 
	m__°ackaddr_£t
;

52 *
	m__°ackaddr
;

53 
size_t
 
	m__°acksize
;

54 } 
	t±hªad_©å_t
;

59 #ifde‡
__GLIBC_HAVE_LONG_LONG


60 
__exãnsi⁄__
 
	t__±hªad_c⁄d_Æign_t
;

62 
	t__±hªad_c⁄d_Æign_t
;

67 
_±hªad_Á°lock
 
	m__c_lock
;

68 
_±hªad_des¸
 
	m__c_waôög
;

69 
	m__∑ddög
[48 -  (
_±hªad_Á°lock
)

70 -  (
_±hªad_des¸
Ë-  (
__±hªad_c⁄d_Æign_t
)];

71 
__±hªad_c⁄d_Æign_t
 
	m__Æign
;

72 } 
	t±hªad_c⁄d_t
;

78 
	m__dummy
;

79 } 
	t±hªad_c⁄d©å_t
;

82 
	t±hªad_key_t
;

90 
	m__m_ª£rved
;

91 
	m__m_cou¡
;

92 
_±hªad_des¸
 
	m__m_ow√r
;

93 
	m__m_köd
;

94 
_±hªad_Á°lock
 
	m__m_lock
;

95 } 
	t±hªad_muãx_t
;

101 
	m__muãxköd
;

102 } 
	t±hªad_muãx©å_t
;

106 
	t±hªad_⁄˚_t
;

109 #ifde‡
__USE_UNIX98


111 
	s_±hªad_rwlock_t


113 
_±hªad_Á°lock
 
	m__rw_lock
;

114 
	m__rw_ªadîs
;

115 
_±hªad_des¸
 
	m__rw_wrôî
;

116 
_±hªad_des¸
 
	m__rw_ªad_waôög
;

117 
_±hªad_des¸
 
	m__rw_wrôe_waôög
;

118 
	m__rw_köd
;

119 
	m__rw_psh¨ed
;

120 } 
	t±hªad_rwlock_t
;

126 
	m__lockköd
;

127 
	m__psh¨ed
;

128 } 
	t±hªad_rwlock©å_t
;

131 #ifde‡
__USE_XOPEN2K


133 vﬁ©ûê
	t±hªad_•ölock_t
;

137 
_±hªad_Á°lock
 
	m__ba_lock
;

138 
	m__ba_ªquúed
;

139 
	m__ba_¥e£¡
;

140 
_±hªad_des¸
 
	m__ba_waôög
;

141 } 
	t±hªad_b¨rõr_t
;

145 
	m__psh¨ed
;

146 } 
	t±hªad_b¨rõøâr_t
;

152 
	t±hªad_t
;

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/socket.h

20 #i‚de‡
__BITS_SOCKET_H


21 
	#__BITS_SOCKET_H


	)

23 #i‡!
deföed
 
_SYS_SOCKET_H
 && !deföed 
_NETINET_IN_H


27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<limôs.h
>

32 
	~<sys/ty≥s.h
>

35 #i‚de‡
__sockÀn_t_deföed


36 
__sockÀn_t
 
	tsockÀn_t
;

37 
	#__sockÀn_t_deföed


	)

41 
	e__sockë_ty≥


43 
	mSOCK_STREAM
 = 1,

45 
	#SOCK_STREAM
 
SOCK_STREAM


	)

46 
	mSOCK_DGRAM
 = 2,

48 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

49 
	mSOCK_RAW
 = 3,

50 
	#SOCK_RAW
 
SOCK_RAW


	)

51 
	mSOCK_RDM
 = 4,

52 
	#SOCK_RDM
 
SOCK_RDM


	)

53 
	mSOCK_SEQPACKET
 = 5,

55 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

56 
	mSOCK_PACKET
 = 10

59 
	#SOCK_PACKET
 
SOCK_PACKET


	)

63 
	#PF_UNSPEC
 0

	)

64 
	#PF_LOCAL
 1

	)

65 
	#PF_UNIX
 
PF_LOCAL


	)

66 
	#PF_FILE
 
PF_LOCAL


	)

67 
	#PF_INET
 2

	)

68 
	#PF_AX25
 3

	)

69 
	#PF_IPX
 4

	)

70 
	#PF_APPLETALK
 5

	)

71 
	#PF_NETROM
 6

	)

72 
	#PF_BRIDGE
 7

	)

73 
	#PF_ATMPVC
 8

	)

74 
	#PF_X25
 9

	)

75 
	#PF_INET6
 10

	)

76 
	#PF_ROSE
 11

	)

77 
	#PF_DEC√t
 12

	)

78 
	#PF_NETBEUI
 13

	)

79 
	#PF_SECURITY
 14

	)

80 
	#PF_KEY
 15

	)

81 
	#PF_NETLINK
 16

	)

82 
	#PF_ROUTE
 
PF_NETLINK


	)

83 
	#PF_PACKET
 17

	)

84 
	#PF_ASH
 18

	)

85 
	#PF_ECONET
 19

	)

86 
	#PF_ATMSVC
 20

	)

87 
	#PF_SNA
 22

	)

88 
	#PF_IRDA
 23

	)

89 
	#PF_PPPOX
 24

	)

90 
	#PF_WANPIPE
 25

	)

91 
	#PF_BLUETOOTH
 31

	)

92 
	#PF_MAX
 32

	)

95 
	#AF_UNSPEC
 
PF_UNSPEC


	)

96 
	#AF_LOCAL
 
PF_LOCAL


	)

97 
	#AF_UNIX
 
PF_UNIX


	)

98 
	#AF_FILE
 
PF_FILE


	)

99 
	#AF_INET
 
PF_INET


	)

100 
	#AF_AX25
 
PF_AX25


	)

101 
	#AF_IPX
 
PF_IPX


	)

102 
	#AF_APPLETALK
 
PF_APPLETALK


	)

103 
	#AF_NETROM
 
PF_NETROM


	)

104 
	#AF_BRIDGE
 
PF_BRIDGE


	)

105 
	#AF_ATMPVC
 
PF_ATMPVC


	)

106 
	#AF_X25
 
PF_X25


	)

107 
	#AF_INET6
 
PF_INET6


	)

108 
	#AF_ROSE
 
PF_ROSE


	)

109 
	#AF_DEC√t
 
PF_DEC√t


	)

110 
	#AF_NETBEUI
 
PF_NETBEUI


	)

111 
	#AF_SECURITY
 
PF_SECURITY


	)

112 
	#AF_KEY
 
PF_KEY


	)

113 
	#AF_NETLINK
 
PF_NETLINK


	)

114 
	#AF_ROUTE
 
PF_ROUTE


	)

115 
	#AF_PACKET
 
PF_PACKET


	)

116 
	#AF_ASH
 
PF_ASH


	)

117 
	#AF_ECONET
 
PF_ECONET


	)

118 
	#AF_ATMSVC
 
PF_ATMSVC


	)

119 
	#AF_SNA
 
PF_SNA


	)

120 
	#AF_IRDA
 
PF_IRDA


	)

121 
	#AF_PPPOX
 
PF_PPPOX


	)

122 
	#AF_WANPIPE
 
PF_WANPIPE


	)

123 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

124 
	#AF_MAX
 
PF_MAX


	)

130 
	#SOL_RAW
 255

	)

131 
	#SOL_DECNET
 261

	)

132 
	#SOL_X25
 262

	)

133 
	#SOL_PACKET
 263

	)

134 
	#SOL_ATM
 264

	)

135 
	#SOL_AAL
 265

	)

136 
	#SOL_IRDA
 266

	)

139 
	#SOMAXCONN
 128

	)

142 
	~<bôs/sockaddr.h
>

145 
	ssockaddr


147 
__SOCKADDR_COMMON
 (
ß_
);

148 
	mß_d©a
[14];

154 #i‡
ULONG_MAX
 > 0xffffffff

155 
	#__ss_Æig¡y≥
 
__uöt64_t


	)

157 
	#__ss_Æig¡y≥
 
__uöt32_t


	)

159 
	#_SS_SIZE
 128

	)

160 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

162 
	ssockaddr_°‹age


164 
__SOCKADDR_COMMON
 (
ss_
);

165 
__ss_Æig¡y≥
 
	m__ss_Æign
;

166 
	m__ss_∑ddög
[
_SS_PADSIZE
];

173 
	mMSG_OOB
 = 0x01,

174 
	#MSG_OOB
 
MSG_OOB


	)

175 
	mMSG_PEEK
 = 0x02,

176 
	#MSG_PEEK
 
MSG_PEEK


	)

177 
	mMSG_DONTROUTE
 = 0x04,

178 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

179 #ifde‡
__USE_GNU


181 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

182 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

184 
	mMSG_CTRUNC
 = 0x08,

185 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

186 
	mMSG_PROXY
 = 0x10,

187 
	#MSG_PROXY
 
MSG_PROXY


	)

188 
	mMSG_TRUNC
 = 0x20,

189 
	#MSG_TRUNC
 
MSG_TRUNC


	)

190 
	mMSG_DONTWAIT
 = 0x40,

191 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

192 
	mMSG_EOR
 = 0x80,

193 
	#MSG_EOR
 
MSG_EOR


	)

194 
	mMSG_WAITALL
 = 0x100,

195 
	#MSG_WAITALL
 
MSG_WAITALL


	)

196 
	mMSG_FIN
 = 0x200,

197 
	#MSG_FIN
 
MSG_FIN


	)

198 
	mMSG_SYN
 = 0x400,

199 
	#MSG_SYN
 
MSG_SYN


	)

200 
	mMSG_CONFIRM
 = 0x800,

201 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

202 
	mMSG_RST
 = 0x1000,

203 
	#MSG_RST
 
MSG_RST


	)

204 
	mMSG_ERRQUEUE
 = 0x2000,

205 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

206 
	mMSG_NOSIGNAL
 = 0x4000,

207 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

208 
	mMSG_MORE
 = 0x8000

209 
	#MSG_MORE
 
MSG_MORE


	)

215 
	smsghdr


217 *
	mmsg_«me
;

218 
sockÀn_t
 
	mmsg_«mñí
;

220 
iovec
 *
	mmsg_iov
;

221 
size_t
 
	mmsg_iovÀn
;

223 *
	mmsg_c⁄åﬁ
;

224 
size_t
 
	mmsg_c⁄åﬁÀn
;

226 
	mmsg_Êags
;

230 
	scmsghdr


232 
size_t
 
	mcmsg_Àn
;

234 
	mcmsg_Àvñ
;

235 
	mcmsg_ty≥
;

236 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

237 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

242 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

243 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

245 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

247 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

248 
	#CMSG_FIRSTHDR
(
mhdr
) \

249 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

250 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë
NULL
)

	)

251 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

252 & (
size_t
Ë~( (size_tË- 1))

	)

253 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

254 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

255 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

257 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

258 
cmsghdr
 *
__cmsg
Ë
__THROW
;

259 #ifde‡
__USE_EXTERN_INLINES


260 #i‚de‡
_EXTERN_INLINE


261 
	#_EXTERN_INLINE
 
__ölöe


	)

263 
_EXTERN_INLINE
 
cmsghdr
 *

264 
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
Ë
__THROW


266 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

270 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

271 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

272 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


273 + 
__mhdr
->
msg_c⁄åﬁÀn
)

274 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

275 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

278  
__cmsg
;

279 
	}
}

286 
SCM_RIGHTS
 = 0x01,

287 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

288 #ifde‡
__USE_BSD


289 
SCM_CREDENTIALS
 = 0x02,

290 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

292 
__SCM_CONNECT
 = 0x03

297 
	su¸ed


299 
pid_t
 
	mpid
;

300 
uid_t
 
	muid
;

301 
gid_t
 
	mgid
;

305 
	~<asm/sockë.h
>

309 
	slögî


311 
	ml_⁄off
;

312 
	ml_lögî
;

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_LINUX_OLD
 1

	)

25 
	#_STAT_VER_KERNEL
 1

	)

26 
	#_STAT_VER_SVR4
 2

	)

27 
	#_STAT_VER_LINUX
 3

	)

28 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

36 
	s°©


38 
__dev_t
 
	m°_dev
;

39 
	m__∑d1
;

40 #i‚de‡
__USE_FILE_OFFSET64


41 
__öo_t
 
	m°_öo
;

43 
__öo_t
 
	m__°_öo
;

45 
__mode_t
 
	m°_mode
;

46 
__∆ök_t
 
	m°_∆ök
;

47 
__uid_t
 
	m°_uid
;

48 
__gid_t
 
	m°_gid
;

49 
__dev_t
 
	m°_rdev
;

50 
	m__∑d2
;

51 #i‚de‡
__USE_FILE_OFFSET64


52 
__off_t
 
	m°_size
;

54 
__off64_t
 
	m°_size
;

56 
__blksize_t
 
	m°_blksize
;

58 #i‚de‡
__USE_FILE_OFFSET64


59 
__blk˙t_t
 
	m°_blocks
;

61 
__blk˙t64_t
 
	m°_blocks
;

63 #ifde‡
__USE_MISC


70 
time•ec
 
	m°_©im
;

71 
time•ec
 
	m°_mtim
;

72 
time•ec
 
	m°_˘im
;

73 
	#°_©ime
 
°_©im
.
tv_£c


	)

74 
	#°_mtime
 
°_mtim
.
tv_£c


	)

75 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

77 
__time_t
 
	m°_©ime
;

78 
	m°_©imí£c
;

79 
__time_t
 
	m°_mtime
;

80 
	m°_mtimí£c
;

81 
__time_t
 
	m°_˘ime
;

82 
	m°_˘imí£c
;

84 #i‚de‡
__USE_FILE_OFFSET64


85 
	m__unu£d4
;

86 
	m__unu£d5
;

88 
__öo64_t
 
	m°_öo
;

92 #ifde‡
__USE_LARGEFILE64


93 
	s°©64


95 
__dev_t
 
	m°_dev
;

96 
	m__∑d1
;

98 
__öo_t
 
	m__°_öo
;

99 
__mode_t
 
	m°_mode
;

100 
__∆ök_t
 
	m°_∆ök
;

101 
__uid_t
 
	m°_uid
;

102 
__gid_t
 
	m°_gid
;

103 
__dev_t
 
	m°_rdev
;

104 
	m__∑d2
;

105 
__off64_t
 
	m°_size
;

106 
__blksize_t
 
	m°_blksize
;

108 
__blk˙t64_t
 
	m°_blocks
;

109 #ifde‡
__USE_MISC


116 
time•ec
 
	m°_©im
;

117 
time•ec
 
	m°_mtim
;

118 
time•ec
 
	m°_˘im
;

120 
__time_t
 
	m°_©ime
;

121 
	m°_©imí£c
;

122 
__time_t
 
	m°_mtime
;

123 
	m°_mtimí£c
;

124 
__time_t
 
	m°_˘ime
;

125 
	m°_˘imí£c
;

127 
__öo64_t
 
	m°_öo
;

132 
	#_STATBUF_ST_BLKSIZE


	)

133 
	#_STATBUF_ST_RDEV


	)

135 
	#_STATBUF_ST_NSEC


	)

139 
	#__S_IFMT
 0170000

	)

142 
	#__S_IFDIR
 0040000

	)

143 
	#__S_IFCHR
 0020000

	)

144 
	#__S_IFBLK
 0060000

	)

145 
	#__S_IFREG
 0100000

	)

146 
	#__S_IFIFO
 0010000

	)

147 
	#__S_IFLNK
 0120000

	)

148 
	#__S_IFSOCK
 0140000

	)

152 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

153 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

154 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

158 
	#__S_ISUID
 04000

	)

159 
	#__S_ISGID
 02000

	)

160 
	#__S_ISVTX
 01000

	)

161 
	#__S_IREAD
 0400

	)

162 
	#__S_IWRITE
 0200

	)

163 
	#__S_IEXEC
 0100

	)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #ifde‡
__˝lu•lus


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


33 
__STDIO_INLINE
 

34 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

36  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

37 
	}
}

40 
__STDIO_INLINE
 

41 
	$gëch¨
 ()

43  
	`_IO_gëc
 (
°dö
);

44 
	}
}

47 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


49 
__STDIO_INLINE
 

50 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

52  
	`_IO_gëc_u∆ocked
 (
__Â
);

53 
	}
}

56 
__STDIO_INLINE
 

57 
	$gëch¨_u∆ocked
 ()

59  
	`_IO_gëc_u∆ocked
 (
°dö
);

60 
	}
}

65 
__STDIO_INLINE
 

66 
	$putch¨
 (
__c
)

68  
	`_IO_putc
 (
__c
, 
°dout
);

69 
	}
}

72 #ifde‡
__USE_MISC


74 
__STDIO_INLINE
 

75 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

77  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

78 
	}
}

82 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


84 
__STDIO_INLINE
 

85 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

87  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

88 
	}
}

91 
__STDIO_INLINE
 

92 
	$putch¨_u∆ocked
 (
__c
)

94  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

95 
	}
}

99 #ifdef 
__USE_GNU


101 
__STDIO_INLINE
 
_IO_ssize_t


102 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

104  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

105 
	}
}

109 #ifde‡
__USE_MISC


111 
__STDIO_INLINE
 

112 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW


114  
	`_IO_„of_u∆ocked
 (
__°ªam
);

115 
	}
}

118 
__STDIO_INLINE
 

119 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW


121  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

122 
	}
}

128 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__


130 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

131 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

132 && (
size_t
Ë((
size
Ë* (
n
)) <= 8 && (size) != 0) \

133 ? ({ *
__±r
 = (*Ë(
±r
); \

134 
FILE
 *
__°ªam
 = (
°ªam
); \

135 
size_t
 
__˙t
; \

136 
__˙t
 = (
size
Ë* (
n
); __cnt > 0; --__cnt) \

138 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

139 i‡(
__c
 =
EOF
) \

141 *
__±r
++ = 
__c
; \

143 ((
size_t
Ë((
size
Ë* (
n
)Ë- 
__˙t
) / (size); }) \

144 : (((
	`__buûtö_c⁄°™t_p
 (
size
) && (size) == 0) \

145 || (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) == 0)) \

147 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

148 (Ë(
n
), 0) \

149 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

151 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

152 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

153 && (
size_t
Ë((
size
Ë* (
n
)) <= 8 && (size) != 0) \

154 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

155 
FILE
 *
__°ªam
 = (
°ªam
); \

156 
size_t
 
__˙t
; \

157 
__˙t
 = (
size
Ë* (
n
); __cnt > 0; --__cnt) \

158 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

160 ((
size_t
Ë((
size
Ë* (
n
)Ë- 
__˙t
) / (size); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
) && (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), 
n
) \

165 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 
	#L_cu£rid
 9

	)

34 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


35 #unde‡
FOPEN_MAX


36 
	#FOPEN_MAX
 16

	)

39 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


40 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


25 
	#_STRING_ARCH_u«lig√d
 1

	)

30 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

31 && 
deföed
 
	g__GNUC__
 && __GNUC__ >2 && !
__BOUNDED_POINTERS__


33 #i‚de‡
__STRING_INLINE


34 #ifde‡
__˝lu•lus


35 
	#__STRING_INLINE
 
ölöe


	)

37 
	#__STRING_INLINE
 
__ölöe


	)

43 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

44 
	#mem˝y
(
de°
, 
§c
, 
n
) \

45 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

46 ? 
	`__mem˝y_c
 (
de°
, 
§c
, 
n
) \

47 : 
	`mem˝y
 (
de°
, 
§c
, 
n
)))

	)

50 
__STRING_INLINE
 *
__mem˝y_c
 (*
__de°
, 
__c⁄°
 *
__§c
,

51 
size_t
 
__n
);

53 
__STRING_INLINE
 *

54 
	$__mem˝y_c
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

56 
__d0
, 
__d1
, 
__d2
;

58 
__ui
;

59 
__usi
;

60 
__uc
;

61 } *
__u
 = 
__de°
;

62 
__n
)

65  
__de°
;

67 
__u
->
__uc
 = *(c⁄° *Ë
__§c
;

68  
__de°
;

70 
__u
->
__usi
 = *(c⁄° *Ë
__§c
;

71  
__de°
;

73 
__u
->
__usi
 = *(c⁄° *Ë
__§c
;

74 
__u
 = (*) __u + 2;

75 
__u
->
__uc
 = *(2 + (c⁄° *Ë
__§c
);

76  
__de°
;

78 
__u
->
__ui
 = *(c⁄° *Ë
__§c
;

79  
__de°
;

81 
__u
->
__ui
 = *(c⁄° *Ë
__§c
;

82 
__u
 = (*) __u + 4;

83 
__u
->
__usi
 = *(2 + (c⁄° *Ë
__§c
);

84  
__de°
;

86 
__u
->
__ui
 = *(c⁄° *Ë
__§c
;

87 
__u
 = (*) __u + 4;

88 
__u
->
__ui
 = *(1 + (c⁄° *Ë
__§c
);

89  
__de°
;

91 
__u
->
__ui
 = *(c⁄° *Ë
__§c
;

92 
__u
 = (*) __u + 4;

93 
__u
->
__ui
 = *(1 + (c⁄° *Ë
__§c
);

94 
__u
 = (*) __u + 4;

95 
__u
->
__ui
 = *(2 + (c⁄° *Ë
__§c
);

96  
__de°
;

98 
__u
->
__ui
 = *(c⁄° *Ë
__§c
;

99 
__u
 = (*) __u + 4;

100 
__u
->
__ui
 = *(1 + (c⁄° *Ë
__§c
);

101 
__u
 = (*) __u + 4;

102 
__u
->
__ui
 = *(2 + (c⁄° *Ë
__§c
);

103 
__u
 = (*) __u + 4;

104 
__u
->
__ui
 = *(3 + (c⁄° *Ë
__§c
);

105  
__de°
;

107 
__u
->
__ui
 = *(c⁄° *Ë
__§c
;

108 
__u
 = (*) __u + 4;

109 
__u
->
__ui
 = *(1 + (c⁄° *Ë
__§c
);

110 
__u
 = (*) __u + 4;

111 
__u
->
__ui
 = *(2 + (c⁄° *Ë
__§c
);

112 
__u
 = (*) __u + 4;

113 
__u
->
__ui
 = *(3 + (c⁄° *Ë
__§c
);

114 
__u
 = (*) __u + 4;

115 
__u
->
__ui
 = *(4 + (c⁄° *Ë
__§c
);

116  
__de°
;

118 
	#__COMMON_CODE
(
x
) \

119 
__asm__
 
__vﬁ©ûe__
 \

122 
x
 \

123 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
) \

124 : "0" (
__n
 / 4), "1" (&
__u
->
__uc
), "2" (
__§c
) \

125 : "mem‹y");

	)

127 
__n
 % 4)

130 
	`__COMMON_CODE
 ("");

133 
	`__COMMON_CODE
 ("\n\tmovsb");

136 
	`__COMMON_CODE
 ("\n\tmovsw");

139 
	`__COMMON_CODE
 ("\n\tmovsw\n\tmovsb");

142  
__de°
;

143 #unde‡
__COMMON_CODE


144 
	}
}

149 
	#_HAVE_STRING_ARCH_memmove
 1

	)

150 #i‚de‡
_FORCE_INLINES


151 
__STRING_INLINE
 *

152 
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

154 
__d0
, 
__d1
, 
__d2
;

155 i‡(
__de°
 < 
__§c
)

156 
__asm__
 
__vﬁ©ûe__


160 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

161 : "0" (
__n
), "1" (
__§c
), "2" (
__de°
)

164 
__asm__
 
__vﬁ©ûe__


169 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

170 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

171 "2" (
__n
 - 1 + (*Ë
__de°
)

173  
__de°
;

174 
	}
}

178 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

179 
	#_USE_STRING_ARCH_mem£t
 1

	)

180 
	#mem£t
(
s
, 
c
, 
n
) \

181 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

182 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

183 ? 
	`__mem£t_cc
 (
s
, 0x01010101UL * (Ë(
c
), 
n
) \

184 : 
	`__mem£t_cg
 (
s
, 0x01010101UL * (Ë(
c
), 
n
))\

185 : 
	`__mem£t_gg
 (
s
, 
c
, 
n
)))

	)

187 
__STRING_INLINE
 *
__mem£t_cc
 (*
__s
, 
__∑âîn
,

188 
size_t
 
__n
);

190 
__STRING_INLINE
 *

191 
	$__mem£t_cc
 (*
__s
, 
__∑âîn
, 
size_t
 
__n
)

193 
__d0
, 
__d1
;

195 
__ui
;

196 
__usi
;

197 
__uc
;

198 } *
__u
 = 
__s
;

199 
__n
)

202  
__s
;

204 
__u
->
__uc
 = 
__∑âîn
;

205  
__s
;

207 
__u
->
__usi
 = 
__∑âîn
;

208  
__s
;

210 
__u
->
__usi
 = 
__∑âîn
;

211 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

212 
__u
->
__uc
 = 
__∑âîn
;

213  
__s
;

215 
__u
->
__ui
 = 
__∑âîn
;

216  
__s
;

218 
	#__COMMON_CODE
(
x
) \

219 
__asm__
 
__vﬁ©ûe__
 \

222 
x
 \

223 : "=&c" (
__d0
), "=&D" (
__d1
) \

224 : "a" (
__∑âîn
), "0" (
__n
 / 4), "1" (&
__u
->
__uc
) \

225 : "mem‹y")

	)

227 
__n
 % 4)

230 
	`__COMMON_CODE
 ("");

233 
	`__COMMON_CODE
 ("\n\tstosb");

236 
	`__COMMON_CODE
 ("\n\tstosw");

239 
	`__COMMON_CODE
 ("\n\tstosw\n\tstosb");

242  
__s
;

243 #unde‡
__COMMON_CODE


244 
	}
}

246 
__STRING_INLINE
 *
__mem£t_cg
 (*
__s
, 
__c
, 
size_t
 
__n
);

248 
__STRING_INLINE
 *

249 
	$__mem£t_cg
 (*
__s
, 
__c
, 
size_t
 
__n
)

251 
__d0
, 
__d1
;

252 
__asm__
 
__vﬁ©ûe__


263 : "=&c" (
__d0
), "=&D" (
__d1
)

264 : "a" (
__c
), "q" (
__n
), "0" (__¿/ 4), "1" (
__s
)

266  
__s
;

267 
	}
}

269 
__STRING_INLINE
 *
__mem£t_gg
 (*
__s
, 
__c
, 
size_t
 
__n
);

271 
__STRING_INLINE
 *

272 
	$__mem£t_gg
 (*
__s
, 
__c
, 
size_t
 
__n
)

274 
__d0
, 
__d1
;

275 
__asm__
 
__vﬁ©ûe__


278 : "=&D" (
__d0
), "=&c" (
__d1
)

279 : "a" (
__c
), "0" (
__s
), "1" (
__n
)

281  
__s
;

282 
	}
}

288 
	#_HAVE_STRING_ARCH_memchr
 1

	)

289 #i‚de‡
_FORCE_INLINES


290 
__STRING_INLINE
 *

291 
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

293 
__d0
;

294 *
__ªs
;

295 i‡(
__n
 == 0)

296  
NULL
;

297 
__asm__
 
__vﬁ©ûe__


303 : "=D" (
__ªs
), "=&c" (
__d0
)

304 : "a" (
__c
), "0" (
__s
), "1" (
__n
)

306  
__ªs
 - 1;

307 
	}
}

310 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

311 #i‚de‡
_FORCE_INLINES


312 
__STRING_INLINE
 *

313 
	$__memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

315 
__d0
;

316 *
__ªs
;

317 i‡(
__n
 == 0)

318  
NULL
;

319 
__asm__
 
__vﬁ©ûe__


326 : "=D" (
__ªs
), "=&c" (
__d0
)

327 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n)

329  
__ªs
;

330 
	}
}

331 #ifde‡
__USE_GNU


332 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 (s, c,Ç)

	)

337 
	#_HAVE_STRING_ARCH_°æí
 1

	)

338 #i‚de‡
_FORCE_INLINES


339 
__STRING_INLINE
 
size_t


340 
	$°æí
 (
__c⁄°
 *
__°r
)

342 
__d0
;

343 
size_t
 
__ªs
;

344 
__asm__
 
__vﬁ©ûe__


348 : "=c" (
__ªs
), "=&D" (
__d0
)

349 : "1" (
__°r
), "a" (0), "0" (0xffffffff)

351  
__ªs
 - 1;

352 
	}
}

356 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

357 #i‚de‡
_FORCE_INLINES


358 
__STRING_INLINE
 *

359 
	$°r˝y
 (*
__de°
, 
__c⁄°
 *
__§c
)

361 
__d0
, 
__d1
;

362 
__asm__
 
__vﬁ©ûe__


369 : "=&S" (
__d0
), "=&D" (
__d1
)

370 : "0" (
__§c
), "1" (
__de°
)

372  
__de°
;

373 
	}
}

377 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

378 #i‚de‡
_FORCE_INLINES


379 
__STRING_INLINE
 *

380 
	$°∫˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

382 
__d0
, 
__d1
, 
__d2
;

383 
__asm__
 
__vﬁ©ûe__


394 : "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

395 : "0" (
__§c
), "1" (
__de°
), "2" (
__n
)

397  
__de°
;

398 
	}
}

402 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

403 #i‚de‡
_FORCE_INLINES


404 
__STRING_INLINE
 *

405 
	$°rˇt
 (*
__de°
, 
__c⁄°
 *
__§c
)

407 
__d0
, 
__d1
, 
__d2
, 
__d3
;

408 
__asm__
 
__vﬁ©ûe__


417 : "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
), "=&a" (
__d3
)

418 : "0" (
__§c
), "1" (
__de°
), "2" (0xffffffff), "3" (0)

420  
__de°
;

421 
	}
}

425 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

426 #i‚de‡
_FORCE_INLINES


427 
__STRING_INLINE
 *

428 
	$°∫ˇt
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

430 
__d0
, 
__d1
, 
__d2
, 
__d3
;

431 
__asm__
 
__vﬁ©ûe__


448 : "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
), "=&a" (
__d3
)

449 : "g" (
__n
), "0" (
__§c
), "1" (
__de°
), "2" (0xffffffff), "3" (0)

451  
__de°
;

452 
	}
}

456 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

457 #i‚de‡
_FORCE_INLINES


458 
__STRING_INLINE
 

459 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

461 
__d0
, 
__d1
;

462 
__ªs
;

463 
__asm__
 
__vﬁ©ûe__


477 : "˜" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
)

478 : "1" (
__s1
), "2" (
__s2
)

480  
__ªs
;

481 
	}
}

485 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

486 #i‚de‡
_FORCE_INLINES


487 
__STRING_INLINE
 

488 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

490 
__d0
, 
__d1
, 
__d2
;

491 
__ªs
;

492 
__asm__
 
__vﬁ©ûe__


509 : "˜" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

510 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
)

512  
__ªs
;

513 
	}
}

517 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

518 
	#_USE_STRING_ARCH_°rchr
 1

	)

519 
	#°rchr
(
s
, 
c
) \

520 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

521 ? 
	`__°rchr_c
 (
s
, ((
c
) & 0xff) << 8) \

522 : 
	`__°rchr_g
 (
s
, 
c
)))

	)

524 
__STRING_INLINE
 *
__°rchr_g
 (
__c⁄°
 *
__s
, 
__c
);

526 
__STRING_INLINE
 *

527 
	$__°rchr_g
 (
__c⁄°
 *
__s
, 
__c
)

529 
__d0
;

530 *
__ªs
;

531 
__asm__
 
__vﬁ©ûe__


543 : "˜" (
__ªs
), "=&S" (
__d0
)

544 : "0" (
__c
), "1" (
__s
)

546  
__ªs
 - 1;

547 
	}
}

549 
__STRING_INLINE
 *
__°rchr_c
 (
__c⁄°
 *
__s
, 
__c
);

551 
__STRING_INLINE
 *

552 
	$__°rchr_c
 (
__c⁄°
 *
__s
, 
__c
)

554 
__d0
;

555 *
__ªs
;

556 
__asm__
 
__vﬁ©ûe__


567 : "˜" (
__ªs
), "=&S" (
__d0
)

568 : "0" (
__c
), "1" (
__s
)

570  
__ªs
 - 1;

571 
	}
}

575 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

576 
	#__°rch∫ul
(
s
, 
c
) \

577 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

578 ? ((
c
) == '\0' \

579 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

580 : 
	`__°rch∫ul_c
 (
s
, ((
c
) & 0xff) << 8)) \

581 : 
	`__°rch∫ul_g
 (
s
, 
c
)))

	)

583 
__STRING_INLINE
 *
__°rch∫ul_g
 (
__c⁄°
 *
__s
, 
__c
);

585 
__STRING_INLINE
 *

586 
	$__°rch∫ul_g
 (
__c⁄°
 *
__s
, 
__c
)

588 
__d0
;

589 *
__ªs
;

590 
__asm__
 
__vﬁ©ûe__


601 : "˜" (
__ªs
), "=&S" (
__d0
)

602 : "0" (
__c
), "1" (
__s
)

604  
__ªs
 - 1;

605 
	}
}

607 
__STRING_INLINE
 *
__°rch∫ul_c
 (
__c⁄°
 *
__s
, 
__c
);

609 
__STRING_INLINE
 *

610 
	$__°rch∫ul_c
 (
__c⁄°
 *
__s
, 
__c
)

612 
__d0
;

613 *
__ªs
;

614 
__asm__
 
__vﬁ©ûe__


624 : "˜" (
__ªs
), "=&S" (
__d0
)

625 : "0" (
__c
), "1" (
__s
)

627  
__ªs
 - 1;

628 
	}
}

629 #ifde‡
__USE_GNU


630 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 (s, c)

	)

636 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

637 #i‚de‡
_FORCE_INLINES


638 #ifde‡
__PIC__


639 
__STRING_INLINE
 
size_t


640 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

642 
__d0
, 
__d1
, 
__d2
;

643 *
__ªs
;

644 
__asm__
 
__vﬁ©ûe__


662 : "=&S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

663 : "d" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

665  (
__ªs
 - 1Ë- 
__s
;

666 
	}
}

668 
__STRING_INLINE
 
size_t


669 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

671 
__d0
, 
__d1
, 
__d2
, 
__d3
;

672 *
__ªs
;

673 
__asm__
 
__vﬁ©ûe__


689 : "=&S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

690 : "g" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

692  (
__ªs
 - 1Ë- 
__s
;

693 
	}
}

700 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

701 #i‚de‡
_FORCE_INLINES


702 #ifde‡
__PIC__


703 
__STRING_INLINE
 
size_t


704 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

706 
__d0
, 
__d1
, 
__d2
;

707 *
__ªs
;

708 
__asm__
 
__vﬁ©ûe__


726 : "=&S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

727 : "r" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

729  (
__ªs
 - 1Ë- 
__s
;

730 
	}
}

732 
__STRING_INLINE
 
size_t


733 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

735 
__d0
, 
__d1
, 
__d2
, 
__d3
;

736 *
__ªs
;

737 
__asm__
 
__vﬁ©ûe__


753 : "=&S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

754 : "g" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

756  (
__ªs
 - 1Ë- 
__s
;

757 
	}
}

763 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

764 #i‚de‡
_FORCE_INLINES


765 #ifde‡
__PIC__


766 
__STRING_INLINE
 *

767 
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

769 
__d0
, 
__d1
, 
__d2
;

770 *
__ªs
;

771 
__asm__
 
__vﬁ©ûe__


793 : "=&S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

794 : "r" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

796  
__ªs
;

797 
	}
}

799 
__STRING_INLINE
 *

800 
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

802 
__d0
, 
__d1
, 
__d2
, 
__d3
;

803 *
__ªs
;

804 
__asm__
 
__vﬁ©ûe__


824 : "=&S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

825 : "g" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

827  
__ªs
;

828 
	}
}

834 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

835 #i‚de‡
_FORCE_INLINES


836 #ifde‡
__PIC__


837 
__STRING_INLINE
 *

838 
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

840 
__d0
, 
__d1
, 
__d2
;

841 *
__ªs
;

842 
__asm__
 
__vﬁ©ûe__


863 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

864 : "r" (
__√edÀ
), "0" (0), "1" (0xffffffff), "2" (
__hay°ack
)

866  
__ªs
;

867 
	}
}

869 
__STRING_INLINE
 *

870 
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

872 
__d0
, 
__d1
, 
__d2
, 
__d3
;

873 *
__ªs
;

874 
__asm__
 
__vﬁ©ûe__


893 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

894 : "g" (
__√edÀ
), "0" (0), "1" (0xffffffff), "2" (
__hay°ack
)

896  
__ªs
;

897 
	}
}

901 #i‚de‡
_FORCE_INLINES


902 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‚de‡
_HAVE_STRING_ARCH_mem£t


98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 #i‡! 
__GNUC_PREREQ
 (3, 0)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

191 #i‡
__GNUC_PREREQ
 (2, 91)

192 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

200 #ifde‡
__USE_GNU


201 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


202 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


203 #i‡
__GNUC_PREREQ
 (3, 0)

204 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

205 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

206 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

207 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

208 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

210 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

211 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

212 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

213 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

214 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

218 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

221 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


222 #i‡
_STRING_ARCH_u«lig√d


223 #i‚de‡
_FORCE_INLINES


224 
	#__memp˝y_¨gs
(
§c
) \

225 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

226 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

227 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

228 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

229 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

230 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

232 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

233 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

234 
__uöt32_t
, 
size_t
);

235 
__STRING_INLINE
 *

236 
	$__memp˝y_smÆl
 (*
__de°1
,

237 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

238 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

239 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

240 
size_t
 
__§˛í
)

243 
__uöt32_t
 
__ui
;

244 
__uöt16_t
 
__usi
;

245 
__uc
;

246 
__c
;

247 } *
__u
 = 
__de°1
;

248 (Ë
__§˛í
)

251 
__u
->
__c
 = 
__§c0_1
;

252 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

255 
__u
->
__usi
 = 
__§c0_2
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

261 
__u
->
__c
 = 
__§c2_1
;

262 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

265 
__u
->
__ui
 = 
__§c0_4
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

271 
__u
->
__c
 = 
__§c4_1
;

272 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

275 
__u
->
__ui
 = 
__§c0_4
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

277 
__u
->
__usi
 = 
__§c4_2
;

278 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

281 
__u
->
__ui
 = 
__§c0_4
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

283 
__u
->
__usi
 = 
__§c4_2
;

284 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__c
 = 
__§c6_1
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

289 
__u
->
__ui
 = 
__§c0_4
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

291 
__u
->
__ui
 = 
__§c4_4
;

292 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295  (*Ë
__u
;

296 
	}
}

298 #i‚de‡
_FORCE_INLINES


299 
	#__memp˝y_¨gs
(
§c
) \

300 ((
__c⁄°
 *Ë(
§c
))[0], \

301 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

302 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

303 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

304 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

305 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

308 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

309 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

310 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

311 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

312 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

314 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

315 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

316 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

318 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

319 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

320 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

321 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

328 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

329 
__STRING2_COPY_ARR3
,

330 
__STRING2_COPY_ARR4
,

331 
__STRING2_COPY_ARR5
,

332 
__STRING2_COPY_ARR6
,

333 
__STRING2_COPY_ARR7
,

334 
__STRING2_COPY_ARR8
, 
size_t
);

335 
__STRING_INLINE
 *

336 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

337 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

338 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

339 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

340 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

343 
__c
;

344 
__STRING2_COPY_ARR2
 
__sˇ2
;

345 
__STRING2_COPY_ARR3
 
__sˇ3
;

346 
__STRING2_COPY_ARR4
 
__sˇ4
;

347 
__STRING2_COPY_ARR5
 
__sˇ5
;

348 
__STRING2_COPY_ARR6
 
__sˇ6
;

349 
__STRING2_COPY_ARR7
 
__sˇ7
;

350 
__STRING2_COPY_ARR8
 
__sˇ8
;

351 } *
__u
 = 
__de°
;

352 (Ë
__§˛í
)

355 
__u
->
__c
 = 
__§c1
;

358 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

361 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

364 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

367 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

370 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

373 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

376 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

379  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

380 
	}
}

388 #i‚de‡
_HAVE_STRING_ARCH_°rchr


389 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

390 
	#°rchr
(
s
, 
c
) \

391 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

392 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

393 : 
	`°rchr
 (
s
, 
c
)))

	)

398 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

399 || 
deföed
 
	g_FORCE_INLINES


400 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

401 
	#°r˝y
(
de°
, 
§c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

403 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

404 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

405 
	`°æí
 (
§c
) + 1) \

406 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

407 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

410 #i‡
_STRING_ARCH_u«lig√d


411 #i‚de‡
_FORCE_INLINES


412 
	#__°r˝y_¨gs
(
§c
) \

413 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

414 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

415 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

416 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

418 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

419 
__uöt32_t
, __uöt32_t, 
size_t
);

420 
__STRING_INLINE
 *

421 
	$__°r˝y_smÆl
 (*
__de°
,

422 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

423 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

424 
size_t
 
__§˛í
)

427 
__uöt32_t
 
__ui
;

428 
__uöt16_t
 
__usi
;

429 
__uc
;

430 } *
__u
 = (*Ë
__de°
;

431 (Ë
__§˛í
)

434 
__u
->
__uc
 = '\0';

437 
__u
->
__usi
 = 
__§c0_2
;

440 
__u
->
__usi
 = 
__§c0_2
;

441 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

442 
__u
->
__uc
 = '\0';

445 
__u
->
__ui
 = 
__§c0_4
;

448 
__u
->
__ui
 = 
__§c0_4
;

449 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

450 
__u
->
__uc
 = '\0';

453 
__u
->
__ui
 = 
__§c0_4
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

455 
__u
->
__usi
 = 
__§c4_2
;

458 
__u
->
__ui
 = 
__§c0_4
;

459 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

460 
__u
->
__usi
 = 
__§c4_2
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__ui
 = 
__§c4_4
;

470  
__de°
;

471 
	}
}

473 #i‚de‡
_FORCE_INLINES


474 
	#__°r˝y_¨gs
(
§c
) \

475 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

476 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

477 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

478 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

480 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

481 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

482 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

483 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

484 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

485 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

488 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

489 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

490 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

491 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

492 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

494 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

499 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

500 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

502 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

503 
__STRING2_COPY_ARR3
,

504 
__STRING2_COPY_ARR4
,

505 
__STRING2_COPY_ARR5
,

506 
__STRING2_COPY_ARR6
,

507 
__STRING2_COPY_ARR7
,

508 
__STRING2_COPY_ARR8
, 
size_t
);

509 
__STRING_INLINE
 *

510 
	$__°r˝y_smÆl
 (*
__de°
,

511 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

512 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

513 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

514 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

517 
__c
;

518 
__STRING2_COPY_ARR2
 
__sˇ2
;

519 
__STRING2_COPY_ARR3
 
__sˇ3
;

520 
__STRING2_COPY_ARR4
 
__sˇ4
;

521 
__STRING2_COPY_ARR5
 
__sˇ5
;

522 
__STRING2_COPY_ARR6
 
__sˇ6
;

523 
__STRING2_COPY_ARR7
 
__sˇ7
;

524 
__STRING2_COPY_ARR8
 
__sˇ8
;

525 } *
__u
 = (*Ë
__de°
;

526 (Ë
__§˛í
)

529 
__u
->
__c
 = '\0';

532 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

535 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

538 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

541 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

544 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

547 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

550 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

553  
__de°
;

554 
	}
}

560 #ifde‡
__USE_GNU


561 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


562 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


563 #i‡
__GNUC_PREREQ
 (3, 0)

564 
	#__°p˝y
(
de°
, 
§c
) \

565 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

566 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

567 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

568 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

570 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

572 
	#__°p˝y
(
de°
, 
§c
) \

573 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

574 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

575 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

576 
	`°æí
 (
§c
) + 1) \

577 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

579 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

583 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

586 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


587 #i‡
_STRING_ARCH_u«lig√d


588 #i‚de‡
_FORCE_INLINES


589 
	#__°p˝y_¨gs
(
§c
) \

590 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

591 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

592 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

593 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

595 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

596 
__uöt32_t
, __uöt32_t, 
size_t
);

597 
__STRING_INLINE
 *

598 
	$__°p˝y_smÆl
 (*
__de°
,

599 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

600 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

601 
size_t
 
__§˛í
)

604 
__ui
;

605 
__usi
;

606 
__uc
;

607 
__c
;

608 } *
__u
 = (*Ë
__de°
;

609 (Ë
__§˛í
)

612 
__u
->
__uc
 = '\0';

615 
__u
->
__usi
 = 
__§c0_2
;

616 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

619 
__u
->
__usi
 = 
__§c0_2
;

620 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

621 
__u
->
__uc
 = '\0';

624 
__u
->
__ui
 = 
__§c0_4
;

625 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

628 
__u
->
__ui
 = 
__§c0_4
;

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

630 
__u
->
__uc
 = '\0';

633 
__u
->
__ui
 = 
__§c0_4
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

635 
__u
->
__usi
 = 
__§c4_2
;

636 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

641 
__u
->
__usi
 = 
__§c4_2
;

642 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

643 
__u
->
__uc
 = '\0';

646 
__u
->
__ui
 = 
__§c0_4
;

647 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

648 
__u
->
__ui
 = 
__§c4_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

652  &
__u
->
__c
;

653 
	}
}

655 #i‚de‡
_FORCE_INLINES


656 
	#__°p˝y_¨gs
(
§c
) \

657 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

658 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

659 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

660 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

662 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

663 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

664 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

665 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

666 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

667 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

669 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

670 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

671 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

672 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

674 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

675 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

676 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

678 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

679 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

680 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

681 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

682 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

684 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

685 
__STRING2_COPY_ARR3
,

686 
__STRING2_COPY_ARR4
,

687 
__STRING2_COPY_ARR5
,

688 
__STRING2_COPY_ARR6
,

689 
__STRING2_COPY_ARR7
,

690 
__STRING2_COPY_ARR8
, 
size_t
);

691 
__STRING_INLINE
 *

692 
	$__°p˝y_smÆl
 (*
__de°
,

693 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

694 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

695 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

696 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

699 
__c
;

700 
__STRING2_COPY_ARR2
 
__sˇ2
;

701 
__STRING2_COPY_ARR3
 
__sˇ3
;

702 
__STRING2_COPY_ARR4
 
__sˇ4
;

703 
__STRING2_COPY_ARR5
 
__sˇ5
;

704 
__STRING2_COPY_ARR6
 
__sˇ6
;

705 
__STRING2_COPY_ARR7
 
__sˇ7
;

706 
__STRING2_COPY_ARR8
 
__sˇ8
;

707 } *
__u
 = (*Ë
__de°
;

708 (Ë
__§˛í
)

711 
__u
->
__c
 = '\0';

714 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

717 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

720 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

723 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

726 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

729 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

732 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

735  
__de°
 + 
__§˛í
 - 1;

736 
	}
}

744 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


745 #i‡
deföed
 
_USE_STRING_ARCH_mem£t
 && deföed 
_USE_STRING_ARCH_memp˝y


746 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

747 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

748 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

749 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

750 ? (*Ë
	`mem˝y
 (
__de°
, 
§c
, 
n
) \

751 : (
	`mem£t
 (
	`__memp˝y
 (
__de°
, 
§c
, 
	`°æí
 (src)), \

752 '\0', 
n
 - 
	`°æí
 (
§c
)), \

753 
__de°
)) \

754 : 
	`°∫˝y
 (
__de°
, 
§c
, 
n
); }))

	)

756 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

757 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

758 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

759 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

760 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

761 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

767 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


768 #ifde‡
_USE_STRING_ARCH_°rchr


769 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

770 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

771 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

772 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

773 ? 
	`°rˇt
 (
__de°
, 
§c
) \

774 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

775 
§c
, 
n
)Ë'\0', 
__de°
)) \

776 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

778 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

779 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

780 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

781 ? 
	`°rˇt
 (
de°
, 
§c
) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

789 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


790 
	#°rcmp
(
s1
, 
s2
) \

791 
__exãnsi⁄__
 \

792 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

793 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

794 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

795 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

796 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

797 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

798 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

799 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

800 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

801 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

802 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

803 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

804 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

805 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

806 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

807 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

808 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

809 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

811 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

812 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

813 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

814 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

815 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

817 
__ªsu…
 = (((
__c⁄°
 *) \

818 (
__c⁄°
 *Ë(
s1
))[1] \

819 - ((
__c⁄°
 *) \

820 (
__c⁄°
 *Ë(
s2
))[1]); \

821 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

823 
__ªsu…
 = \

824 (((
__c⁄°
 *) \

825 (
__c⁄°
 *Ë(
s1
))[2] \

826 - ((
__c⁄°
 *) \

827 (
__c⁄°
 *Ë(
s2
))[2]); \

828 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

829 
__ªsu…
 = \

830 (((
__c⁄°
 *) \

831 (
__c⁄°
 *Ë(
s1
))[3] \

832 - ((
__c⁄°
 *) \

833 (
__c⁄°
 *Ë(
s2
))[3]); \

836 
__ªsu…
; }))

	)

838 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

839 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

840 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

841 
__ªsu…
 = \

842 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

843 - 
__s2
[0]); \

844 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

846 
__ªsu…
 = (((
__c⁄°
 *) \

847 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

848 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

850 
__ªsu…
 = (((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

852 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = (((
__c⁄°
 *) \

854 (
__c⁄°
 *Ë(
s1
))[3] \

855 - 
__s2
[3]); \

858 
__ªsu…
; }))

	)

860 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

861 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

862 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

863 
__ªsu…
 = \

864 
__s1
[0] - ((
__c⁄°
 *) \

865 (
__c⁄°
 *Ë(
s2
))[0]; \

866 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

868 
__ªsu…
 = (
__s1
[1] \

869 - ((
__c⁄°
 *) \

870 (
__c⁄°
 *Ë(
s2
))[1]); \

871 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

873 
__ªsu…
 = \

874 (
__s1
[2] - ((
__c⁄°
 *) \

875 (
__c⁄°
 *Ë(
s2
))[2]); \

876 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = \

878 (
__s1
[3] \

879 - ((
__c⁄°
 *) \

880 (
__c⁄°
 *Ë(
s2
))[3]); \

883 
__ªsu…
; }))

	)

888 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


889 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

890 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

891 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

892 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

893 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

894 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

895 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

901 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


902 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


903 
	#°rc•n
(
s
, 
ªje˘
) \

904 
__exãnsi⁄__
 \

905 ({ 
__r0
, 
__r1
, 
__r2
; \

906 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

907 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

908 ? 
	`°æí
 (
s
) \

909 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

910 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

911 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

912 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

913 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

914 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

915 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

916 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

919 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

920 
__STRING_INLINE
 
size_t


921 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

923 
size_t
 
__ªsu…
 = 0;

924 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

925 ++
__ªsu…
;

926  
__ªsu…
;

927 
	}
}

929 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

930 
__ªje˘2
);

931 
__STRING_INLINE
 
size_t


932 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

934 
size_t
 
__ªsu…
 = 0;

935 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


936 && 
__s
[
__ªsu…
] !
__ªje˘2
)

937 ++
__ªsu…
;

938  
__ªsu…
;

939 
	}
}

941 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

942 
__ªje˘2
, 
__ªje˘3
);

943 
__STRING_INLINE
 
size_t


944 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

945 
__ªje˘3
)

947 
size_t
 
__ªsu…
 = 0;

948 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


949 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

950 ++
__ªsu…
;

951  
__ªsu…
;

952 
	}
}

958 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


959 #i‚de‡
_HAVE_STRING_ARCH_°r•n


960 
	#°r•n
(
s
, 
ac˚±
) \

961 
__exãnsi⁄__
 \

962 ({ 
__a0
, 
__a1
, 
__a2
; \

963 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

964 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

965 ? ((Ë(
s
), 0) \

966 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

967 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

968 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

969 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

970 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

971 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

972 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

973 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

976 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

977 
__STRING_INLINE
 
size_t


978 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

980 
size_t
 
__ªsu…
 = 0;

982 
__s
[
__ªsu…
] =
__ac˚±
)

983 ++
__ªsu…
;

984  
__ªsu…
;

985 
	}
}

987 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

988 
__ac˚±2
);

989 
__STRING_INLINE
 
size_t


990 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

992 
size_t
 
__ªsu…
 = 0;

994 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

995 ++
__ªsu…
;

996  
__ªsu…
;

997 
	}
}

999 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1000 
__ac˚±2
, 
__ac˚±3
);

1001 
__STRING_INLINE
 
size_t


1002 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1004 
size_t
 
__ªsu…
 = 0;

1006 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1007 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1008 ++
__ªsu…
;

1009  
__ªsu…
;

1010 
	}
}

1015 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1016 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1017 
	#°Ωbrk
(
s
, 
ac˚±
) \

1018 
__exãnsi⁄__
 \

1019 ({ 
__a0
, 
__a1
, 
__a2
; \

1020 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1021 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1022 ? ((Ë(
s
), 
NULL
) \

1023 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1024 ? 
	`°rchr
 (
s
, 
__a0
) \

1025 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1026 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1027 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1028 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1029 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1030 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1033 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1034 
__ac˚±2
);

1035 
__STRING_INLINE
 *

1036 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1039 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1040 ++
__s
;

1041  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1042 
	}
}

1044 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 *

1047 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1048 
__ac˚±3
)

1051 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1052 && *
__s
 !
__ac˚±3
)

1053 ++
__s
;

1054  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1055 
	}
}

1061 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1062 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1063 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1064 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1065 ? (*Ë(
size_t
Ë(
hay°ack
) \

1066 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1067 ? 
	`°rchr
 (
hay°ack
, \

1068 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1069 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1070 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1074 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1075 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1076 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1077 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1078 ? (((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1079 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1080 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1081 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)) \

1082 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1085 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1086 
__STRING_INLINE
 *

1087 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1089 *
__ªsu…
;

1090 i‡(
__s
 =
NULL
)

1091 
__s
 = *
__√xç
;

1092 *
__s
 =
__£p
)

1093 ++
__s
;

1094 
__ªsu…
 = 
NULL
;

1095 i‡(*
__s
 != '\0')

1097 
__ªsu…
 = 
__s
++;

1098 *
__s
 != '\0')

1099 i‡(*
__s
++ =
__£p
)

1101 
__s
[-1] = '\0';

1104 *
__√xç
 = 
__s
;

1106  
__ªsu…
;

1107 
	}
}

1108 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1109 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1114 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1115 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1117 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1118 
	#__°r£p
(
s
, 
ªje˘
) \

1119 
__exãnsi⁄__
 \

1120 ({ 
__r0
, 
__r1
, 
__r2
; \

1121 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1122 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1123 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1124 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1125 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1126 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1127 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1128 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1129 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1130 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1131 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1132 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1135 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1136 
__STRING_INLINE
 *

1137 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1139 *
__ªtvÆ
 = *
__s
;

1140 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1141 *(*
__s
)++ = '\0';

1142  
__ªtvÆ
;

1143 
	}
}

1145 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1146 
__STRING_INLINE
 *

1147 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1149 *
__ªtvÆ
 = *
__s
;

1150 i‡(
__ªtvÆ
 !
NULL
)

1152 *
__˝
 = 
__ªtvÆ
;

1155 i‡(*
__˝
 == '\0')

1157 
__˝
 = 
NULL
;

1160 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1162 *
__˝
++ = '\0';

1165 ++
__˝
;

1167 *
__s
 = 
__˝
;

1169  
__ªtvÆ
;

1170 
	}
}

1172 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1173 
__ªje˘3
);

1174 
__STRING_INLINE
 *

1175 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1177 *
__ªtvÆ
 = *
__s
;

1178 i‡(
__ªtvÆ
 !
NULL
)

1180 *
__˝
 = 
__ªtvÆ
;

1183 i‡(*
__˝
 == '\0')

1185 
__˝
 = 
NULL
;

1188 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1190 *
__˝
++ = '\0';

1193 ++
__˝
;

1195 *
__s
 = 
__˝
;

1197  
__ªtvÆ
;

1198 
	}
}

1199 #ifde‡
__USE_BSD


1200 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1207 #ifde‡
__USE_MISC


1209 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1210 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1211 
	~<°dlib.h
>

1214 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1216 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1217 
	#__°rdup
(
s
) \

1218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1219 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1220 ? (*Ë
	`ˇŒoc
 (1, 1) \

1221 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1222 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1223 i‡(
__ªtvÆ
 !
NULL
) \

1224 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1225 
__ªtvÆ
; 
	}
})) \

1226 : 
	`__°rdup
 (
s
)))

	)

1228 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1229 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1233 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1235 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1236 
__THROW
 
__©åibuã_mÆloc__
;

1237 
	#__°∫dup
(
s
, 
n
) \

1238 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1239 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1240 ? (*Ë
	`ˇŒoc
 (1, 1) \

1241 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1242 
size_t
 
__n
 = (
n
); \

1243 *
__ªtvÆ
; \

1244 i‡(
__n
 < 
__Àn
) \

1245 
__Àn
 = 
__n
 + 1; \

1246 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1247 i‡(
__ªtvÆ
 !
NULL
) \

1249 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1250 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1251 
__Àn
 - 1); \

1253 
__ªtvÆ
; 
	}
})) \

1254 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1256 #ifde‡
__USE_GNU


1257 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1263 #i‚de‡
_FORCE_INLINES


1264 #unde‡
__STRING_INLINE


	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

30 
	#__√ed_size_t


	)

31 
	~<°ddef.h
>

34 
	t__u_ch¨
;

35 
	t__u_sh‹t
;

36 
	t__u_öt
;

37 
	t__u_l⁄g
;

40 sig√d 
	t__öt8_t
;

41 
	t__uöt8_t
;

42 sig√d 
	t__öt16_t
;

43 
	t__uöt16_t
;

44 sig√d 
	t__öt32_t
;

45 
	t__uöt32_t
;

46 #i‡
__WORDSIZE
 == 64

47 sig√d 
	t__öt64_t
;

48 
	t__uöt64_t
;

49 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


50 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

51 
__exãnsi⁄__
 
	t__uöt64_t
;

55 #i‡
__WORDSIZE
 == 64

56 
	t__quad_t
;

57 
	t__u_quad_t
;

58 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


59 
__exãnsi⁄__
 
	t__quad_t
;

60 
__exãnsi⁄__
 
	t__u_quad_t
;

64 
	m__vÆ
[2];

65 } 
	t__quad_t
;

68 
__u_l⁄g
 
	m__vÆ
[2];

69 } 
	t__u_quad_t
;

102 
	#__S16_TYPE
 

	)

103 
	#__U16_TYPE
 

	)

104 
	#__S32_TYPE
 

	)

105 
	#__U32_TYPE
 

	)

106 
	#__SLONGWORD_TYPE
 

	)

107 
	#__ULONGWORD_TYPE
 

	)

108 #i‡
__WORDSIZE
 == 32

109 
	#__SQUAD_TYPE
 

	)

110 
	#__UQUAD_TYPE
 

	)

111 
	#__SWORD_TYPE
 

	)

112 
	#__UWORD_TYPE
 

	)

113 
	#__SLONG32_TYPE
 

	)

114 
	#__ULONG32_TYPE
 

	)

115 
	#__S64_TYPE
 
__quad_t


	)

116 
	#__U64_TYPE
 
__u_quad_t


	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	#__SQUAD_TYPE
 

	)

119 
	#__UQUAD_TYPE
 

	)

120 
	#__SWORD_TYPE
 

	)

121 
	#__UWORD_TYPE
 

	)

122 
	#__SLONG32_TYPE
 

	)

123 
	#__ULONG32_TYPE
 

	)

124 
	#__S64_TYPE
 

	)

125 
	#__U64_TYPE
 

	)

129 
	~<bôs/ty≥sizes.h
>

133 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

136 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

137 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

138 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

139 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

140 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

141 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

142 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

143 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

144 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

145 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

146 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

147 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

148 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

149 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

150 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

151 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

152 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

153 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

155 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

156 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

157 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

160 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

163 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

166 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

171 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

172 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

175 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

176 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

179 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

180 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

182 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

186 
__off64_t
 
	t__loff_t
;

187 
__quad_t
 *
	t__qaddr_t
;

188 *
	t__ˇddr_t
;

191 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

194 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

197 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

19 #i‚de‡
_SYS_UIO_H


24 
	~<sys/ty≥s.h
>

38 
	#UIO_MAXIOV
 1024

	)

42 
	siovec


44 *
	miov_ba£
;

45 
size_t
 
	miov_Àn
;

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

29 
	#__WALL
 0x40000000

	)

30 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 #ifdef 
__GNUC__


42 
	#__WIFSIGNALED
(
°©us
) \

43 (
	`__exãnsi⁄__
 ({ 
__°©us
 = (
°©us
); \

44 !
	`__WIFSTOPPED
(
__°©us
Ë&& !
	`__WIFEXITED
(__°©us); }))

	)

46 
	#__WIFSIGNALED
(
°©us
Ë(!
	`__WIFSTOPPED
(°©usË&& !
	`__WIFEXITED
(°©us))

	)

50 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__WCOREFLAG
 0x80

	)

61 #ifdef 
__USE_BSD


63 
	~<ídün.h
>

65 
	uwaô


67 
	mw_°©us
;

70 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


71 
	m__w_ãrmsig
:7;

72 
	m__w_c‹edump
:1;

73 
	m__w_ªtcode
:8;

76 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


78 
	m__w_ªtcode
:8;

79 
	m__w_c‹edump
:1;

80 
	m__w_ãrmsig
:7;

82 } 
	m__waô_ãrmö©ed
;

85 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


86 
	m__w_°›vÆ
:8;

87 
	m__w_°›sig
:8;

90 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


92 
	m__w_°›sig
:8;

93 
	m__w_°›vÆ
:8;

95 } 
	m__waô_°›≥d
;

98 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

99 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

100 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

101 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

102 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

19 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

86 #unde‡
__USE_ISOC99


87 #unde‡
__USE_POSIX


88 #unde‡
__USE_POSIX2


89 #unde‡
__USE_POSIX199309


90 #unde‡
__USE_POSIX199506


91 #unde‡
__USE_XOPEN


92 #unde‡
__USE_XOPEN_EXTENDED


93 #unde‡
__USE_UNIX98


94 #unde‡
__USE_XOPEN2K


95 #unde‡
__USE_LARGEFILE


96 #unde‡
__USE_LARGEFILE64


97 #unde‡
__USE_FILE_OFFSET64


98 #unde‡
__USE_BSD


99 #unde‡
__USE_SVID


100 #unde‡
__USE_MISC


101 #unde‡
__USE_GNU


102 #unde‡
__USE_REENTRANT


103 #unde‡
__FAVOR_BSD


104 #unde‡
__KERNEL_STRICT_NAMES


108 #i‚de‡
_LOOSE_KERNEL_NAMES


109 
	#__KERNEL_STRICT_NAMES


	)

113 
	#__USE_ANSI
 1

	)

117 #i‡
deföed
 
_BSD_SOURCE
 && \

118 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

119 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

120 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

121 
	#__FAVOR_BSD
 1

	)

125 #ifde‡
_GNU_SOURCE


126 #unde‡
_ISOC99_SOURCE


127 
	#_ISOC99_SOURCE
 1

	)

128 #unde‡
_POSIX_SOURCE


129 
	#_POSIX_SOURCE
 1

	)

130 #unde‡
_POSIX_C_SOURCE


131 
	#_POSIX_C_SOURCE
 199506L

	)

132 #unde‡
_XOPEN_SOURCE


133 
	#_XOPEN_SOURCE
 600

	)

134 #unde‡
_XOPEN_SOURCE_EXTENDED


135 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

136 #unde‡
_LARGEFILE64_SOURCE


137 
	#_LARGEFILE64_SOURCE
 1

	)

138 #unde‡
_BSD_SOURCE


139 
	#_BSD_SOURCE
 1

	)

140 #unde‡
_SVID_SOURCE


141 
	#_SVID_SOURCE
 1

	)

146 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

147 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

148 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

149 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

150 
	#_BSD_SOURCE
 1

	)

151 
	#_SVID_SOURCE
 1

	)

158 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

159 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

160 
	#__USE_ISOC99
 1

	)

165 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_POSIX_SOURCE
 && \

166 !
deföed
 
_POSIX_C_SOURCE
)

167 
	#_POSIX_SOURCE
 1

	)

168 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

169 
	#_POSIX_C_SOURCE
 2

	)

171 
	#_POSIX_C_SOURCE
 199506L

	)

175 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


176 
	#__USE_POSIX
 1

	)

179 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


180 
	#__USE_POSIX2
 1

	)

183 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

184 
	#__USE_POSIX199309
 1

	)

187 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

188 
	#__USE_POSIX199506
 1

	)

191 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

192 
	#__USE_XOPEN2K
 1

	)

195 #ifdef 
_XOPEN_SOURCE


196 
	#__USE_XOPEN
 1

	)

197 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

198 
	#__USE_XOPEN_EXTENDED
 1

	)

199 
	#__USE_UNIX98
 1

	)

200 #unde‡
_LARGEFILE_SOURCE


201 
	#_LARGEFILE_SOURCE
 1

	)

202 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

203 
	#__USE_XOPEN2K
 1

	)

204 #unde‡
__USE_ISOC99


205 
	#__USE_ISOC99
 1

	)

208 #ifde‡
_XOPEN_SOURCE_EXTENDED


209 
	#__USE_XOPEN_EXTENDED
 1

	)

214 #ifde‡
_LARGEFILE_SOURCE


215 
	#__USE_LARGEFILE
 1

	)

218 #ifde‡
_LARGEFILE64_SOURCE


219 
	#__USE_LARGEFILE64
 1

	)

222 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

223 
	#__USE_FILE_OFFSET64
 1

	)

226 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


227 
	#__USE_MISC
 1

	)

230 #ifdef 
_BSD_SOURCE


231 
	#__USE_BSD
 1

	)

234 #ifdef 
_SVID_SOURCE


235 
	#__USE_SVID
 1

	)

238 #ifdef 
_GNU_SOURCE


239 
	#__USE_GNU
 1

	)

242 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


243 
	#__USE_REENTRANT
 1

	)

247 
	#__STDC_IEC_559__
 1

	)

248 
	#__STDC_IEC_559_COMPLEX__
 1

	)

251 
	#__STDC_ISO_10646__
 200009L

	)

259 #unde‡
__GNU_LIBRARY__


260 
	#__GNU_LIBRARY__
 6

	)

264 
	#__GLIBC__
 2

	)

265 
	#__GLIBC_MINOR__
 3

	)

274 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


275 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

276 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

278 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

281 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

282 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

285 #i‡
deföed
 
__GNUC__
 \

286 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

287 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

288 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

289 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

293 #i‚de‡
__ASSEMBLER__


294 #i‚de‡
_SYS_CDEFS_H


295 
	~<sys/cdefs.h
>

300 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


301 
	#__USE_LARGEFILE
 1

	)

302 
	#__USE_LARGEFILE64
 1

	)

308 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

309 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__


310 
	#__USE_EXTERN_INLINES
 1

	)

318 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

20 #i‚de‡
_GETOPT_H


22 #i‚de‡
__√ed_gë›t


23 
	#_GETOPT_H
 1

	)

33 #i‡!
deföed
 
__GNU_LIBRARY__


34 
	~<˘y≥.h
>

37 #i‚de‡
__THROW


38 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

39 
	#__THROW
 
	`throw
 ()

	)

41 
	#__THROW


	)

45 #ifdef 
__˝lu•lus


55 *
›èrg
;

69 
›töd
;

74 
›ãº
;

78 
›t›t
;

80 #i‚de‡
__√ed_gë›t


102 
	s›ti⁄


104 #i‡(
deföed
 
__STDC__
 && __STDC__Ë|| deföed 
__˝lu•lus


105 c⁄° *
	g«me
;

107 *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #i‡(
deföed
 
__STDC__
 && __STDC__Ë|| deföed 
__˝lu•lus


149 #ifde‡
__GNU_LIBRARY__


153 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

154 
__THROW
;

156 
gë›t
 ();

159 #i‚de‡
__√ed_gë›t


160 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

161 c⁄° *
__sh‹t›ts
,

162 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

163 
__THROW
;

164 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

165 c⁄° *
__sh‹t›ts
,

166 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

167 
__THROW
;

170 
_gë›t_öã∫Æ
 (
___¨gc
, *c⁄° *
___¨gv
,

171 c⁄° *
__sh‹t›ts
,

172 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
,

173 
__l⁄g_⁄ly
);

176 
gë›t
 ();

177 #i‚de‡
__√ed_gë›t


178 
gë›t_l⁄g
 ();

179 
gë›t_l⁄g_⁄ly
 ();

181 
_gë›t_öã∫Æ
 ();

185 #ifdef 
__˝lu•lus


190 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

144 
	#_IO_SKIPWS
 01

	)

145 
	#_IO_LEFT
 02

	)

146 
	#_IO_RIGHT
 04

	)

147 
	#_IO_INTERNAL
 010

	)

148 
	#_IO_DEC
 020

	)

149 
	#_IO_OCT
 040

	)

150 
	#_IO_HEX
 0100

	)

151 
	#_IO_SHOWBASE
 0200

	)

152 
	#_IO_SHOWPOINT
 0400

	)

153 
	#_IO_UPPERCASE
 01000

	)

154 
	#_IO_SHOWPOS
 02000

	)

155 
	#_IO_SCIENTIFIC
 04000

	)

156 
	#_IO_FIXED
 010000

	)

157 
	#_IO_UNITBUF
 020000

	)

158 
	#_IO_STDIO
 040000

	)

159 
	#_IO_DONT_CLOSE
 0100000

	)

160 
	#_IO_BOOLALPHA
 0200000

	)

163 
_IO_jump_t
; 
	g_IO_FILE
;

166 #ifde‡
_IO_MTSAFE_IO


167 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

168 
	~<bôs/°dio-lock.h
>

173 
	t_IO_lock_t
;

179 
	s_IO_m¨kî
 {

180 
_IO_m¨kî
 *
	m_√xt
;

181 
_IO_FILE
 *
	m_sbuf
;

185 
	m_pos
;

187 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

188 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

189 
	mpublic
:

190 
°ªamm¨kî
(
°ªambuf
 *
sb
);

191 ~
°ªamm¨kî
();

192 
ßvög
(Ë{  
	m_•os
 == -2; }

193 
dñè
(
°ªamm¨kî
&);

194 
dñè
();

199 
	e__codecvt_ªsu…


201 
	m__codecvt_ok
,

202 
	m__codecvt_∑πül
,

203 
	m__codecvt_îr‹
,

204 
	m__codecvt_noc⁄v


207 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


210 
	s_IO_codecvt


212 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

213 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

214 
	m__mb°©e_t
 *,

215 c⁄° 
	mwch¨_t
 *,

216 c⁄° 
	mwch¨_t
 *,

217 c⁄° 
	mwch¨_t
 **, *,

219 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

220 
	m__mb°©e_t
 *, *,

222 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

225 c⁄° **, 
	mwch¨_t
 *,

226 
	mwch¨_t
 *, wchar_t **);

227 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

228 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

229 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

230 c⁄° *, c⁄° *, 
	m_IO_size_t
);

231 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

233 
_IO_ic⁄v_t
 
	m__cd_ö
;

234 
_IO_ic⁄v_t
 
	m__cd_out
;

238 
	s_IO_wide_d©a


240 
wch¨_t
 *
	m_IO_ªad_±r
;

241 
wch¨_t
 *
	m_IO_ªad_íd
;

242 
wch¨_t
 *
	m_IO_ªad_ba£
;

243 
wch¨_t
 *
	m_IO_wrôe_ba£
;

244 
wch¨_t
 *
	m_IO_wrôe_±r
;

245 
wch¨_t
 *
	m_IO_wrôe_íd
;

246 
wch¨_t
 *
	m_IO_buf_ba£
;

247 
wch¨_t
 *
	m_IO_buf_íd
;

249 
wch¨_t
 *
	m_IO_ßve_ba£
;

250 
wch¨_t
 *
	m_IO_backup_ba£
;

252 
wch¨_t
 *
	m_IO_ßve_íd
;

254 
__mb°©e_t
 
	m_IO_°©e
;

255 
__mb°©e_t
 
	m_IO_œ°_°©e
;

256 
_IO_codecvt
 
	m_codecvt
;

258 
wch¨_t
 
	m_sh‹tbuf
[1];

260 
_IO_jump_t
 *
	m_wide_vèbÀ
;

264 
	s_IO_FILE
 {

265 
	m_Êags
;

266 
	#_IO_fûe_Êags
 
_Êags


	)

270 * 
	m_IO_ªad_±r
;

271 * 
	m_IO_ªad_íd
;

272 * 
	m_IO_ªad_ba£
;

273 * 
	m_IO_wrôe_ba£
;

274 * 
	m_IO_wrôe_±r
;

275 * 
	m_IO_wrôe_íd
;

276 * 
	m_IO_buf_ba£
;

277 * 
	m_IO_buf_íd
;

279 *
	m_IO_ßve_ba£
;

280 *
	m_IO_backup_ba£
;

281 *
	m_IO_ßve_íd
;

283 
_IO_m¨kî
 *
	m_m¨kîs
;

285 
_IO_FILE
 *
	m_chaö
;

287 
	m_fûío
;

289 
	m_blksize
;

291 
	m_Êags2
;

293 
_IO_off_t
 
	m_ﬁd_off£t
;

295 
	#__HAVE_COLUMN


	)

297 
	m_cur_cﬁumn
;

298 sig√d 
	m_vèbÀ_off£t
;

299 
	m_sh‹tbuf
[1];

303 
_IO_lock_t
 *
	m_lock
;

304 #ifde‡
_IO_USE_OLD_IO_FILE


307 
	s_IO_FILE_com∂ëe


309 
_IO_FILE
 
	m_fûe
;

311 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

312 
_IO_off64_t
 
	m_off£t
;

313 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


315 
_IO_codecvt
 *
	m_codecvt
;

316 
_IO_wide_d©a
 *
	m_wide_d©a
;

318 *
	m__∑d1
;

319 *
	m__∑d2
;

321 
	m_mode
;

323 
	m_unu£d2
[15 *  () - 2 *  (*)];

327 #i‚de‡
__˝lu•lus


328 
_IO_FILE
 
	t_IO_FILE
;

331 
	g_IO_FILE_∂us
;

333 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

334 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

335 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

336 #i‚de‡
_LIBC


337 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

338 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

339 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

341 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

342 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

343 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

351 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

359 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

360 
	tsize_t
 
	t__n
);

368 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

371 
	t__io_˛o£_‚
 (*
	t__cookõ
);

374 #ifde‡
_GNU_SOURCE


376 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

377 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

378 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

379 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

384 
__io_ªad_‚
 *
	mªad
;

385 
__io_wrôe_‚
 *
	mwrôe
;

386 
__io_£ek_‚
 *
	m£ek
;

387 
__io_˛o£_‚
 *
	m˛o£
;

388 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

389 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

391 
	g_IO_cookõ_fûe
;

394 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

395 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

399 #ifde‡
__˝lu•lus


403 
__undîÊow
 (
_IO_FILE
 *Ë
__THROW
;

404 
__uÊow
 (
_IO_FILE
 *Ë
__THROW
;

405 
__ovîÊow
 (
_IO_FILE
 *, Ë
__THROW
;

406 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *Ë
__THROW
;

407 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *Ë
__THROW
;

408 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wöt_tË
__THROW
;

410 
	#_IO_gëc_u∆ocked
(
_Â
) \

411 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
 ? 
	`__uÊow
 (_fp) \

412 : *(*Ë(
_Â
)->
_IO_ªad_±r
++)

	)

413 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

414 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
 \

415 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

416 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

417 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

418 (((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
) \

419 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

420 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

422 
	#_IO_gëwc_u∆ocked
(
_Â
) \

423 ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 >(_Â)->_wide_d©a->
_IO_ªad_íd
 \

424 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

425 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

426 ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 >(_Â)->_wide_d©a->
_IO_wrôe_íd
 \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

430 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

431 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

433 
_IO_gëc
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
Ë
__THROW
;

435 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

436 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

438 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

441 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

442 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

444 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

445 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

448 #ifde‡
_IO_MTSAFE_IO


449 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

450 
	#_IO_Êockfûe
(
_Â
) \

451 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

452 
	#_IO_fu∆ockfûe
(
_Â
) \

453 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

455 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

456 
	#_IO_Êockfûe
(
_Â
Ë

	)

457 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

458 
	#_IO_·rylockfûe
(
_Â
Ë

	)

459 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

463 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

464 
_IO_va_li°
, *
__ª°ri˘
Ë
__THROW
;

465 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

466 
_IO_va_li°
Ë
__THROW
;

467 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_tË
__THROW
;

468 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_tË
__THROW
;

470 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , Ë
__THROW
;

471 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, Ë
__THROW
;

473 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

475 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


476 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

477 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
Ë
__THROW
;

478 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

479 #i‡
__GNUC__
 >= 2

482 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


483 
	~<shlib-com∑t.h
>

484 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

485 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

486 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

487 c⁄° 
_IO_°dö_u£d
;

488 
wók_exã∫
 (
_IO_°dö_u£d
);

491 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


492 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

496 
	#_IO_fwide
(
__Â
, 
__mode
) \

497 ({ 
__ªsu…
 = (
__mode
); \

498 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

500 i‡((
__Â
)->
_mode
 == 0) \

502 (
__Â
)->
_mode
 = -1; \

503 
__ªsu…
 = (
__Â
)->
_mode
; \

505 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

506 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

508 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

509 
__ªsu…
; })

	)

512 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

513 
_IO_va_li°
, *
__ª°ri˘
Ë
__THROW
;

514 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

515 
_IO_va_li°
Ë
__THROW
;

516 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_tË
__THROW
;

517 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë¯## 
U


	)

301 
	#UINT16_C
(
c
Ë¯## 
U


	)

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

27 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 
	#maj‹
(
dev
Ë(()(((devË>> 8Ë& 0xff))

	)

29 
	#mö‹
(
dev
Ë(()((devË& 0xff))

	)

30 
	#makedev
(
maj‹
, 
mö‹
) (((() (major)) << 8) \

31 | ((Ë(
mö‹
)))

	)

35 
	~<ídün.h
>

36 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


37 
	#maj‹
(
dev
Ë(((dev).
__vÆ
[1] >> 8Ë& 0xff)

	)

38 
	#mö‹
(
dev
Ë((dev).
__vÆ
[1] & 0xff)

	)

39 
	#makedev
(
maj‹
, 
mö‹
) { 0, (((() (major)) << 8) \

40 | ((Ë(
mö‹
))Ë}

	)

42 
	#maj‹
(
dev
Ë(((dev).
__vÆ
[0] >> 8Ë& 0xff)

	)

43 
	#mö‹
(
dev
Ë((dev).
__vÆ
[0] & 0xff)

	)

44 
	#makedev
(
maj‹
, 
mö‹
) { (((() (major)) << 8) \

45 | ((Ë(
mö‹
))), 0 }

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 
	#__√ed_wch¨_t


	)

12 
	#__√ed_wöt_t


	)

13 
	#__√ed_NULL


	)

14 
	~<°ddef.h
>

15 #i‚de‡
_WINT_T


20 
	#_WINT_T


	)

21 
	twöt_t
;

23 
	#__√ed_mb°©e_t


	)

24 
	~<wch¨.h
>

25 
	#_G_size_t
 
size_t


	)

28 
__off_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos_t
;

33 
__off64_t
 
	m__pos
;

34 
__mb°©e_t
 
	m__°©e
;

35 } 
	t_G_Âos64_t
;

36 
	#_G_ssize_t
 
__ssize_t


	)

37 
	#_G_off_t
 
__off_t


	)

38 
	#_G_off64_t
 
__off64_t


	)

39 
	#_G_pid_t
 
__pid_t


	)

40 
	#_G_uid_t
 
__uid_t


	)

41 
	#_G_wch¨_t
 
wch¨_t


	)

42 
	#_G_wöt_t
 
wöt_t


	)

43 
	#_G_°©64
 
°©64


	)

44 
	~<gc⁄v.h
>

47 
__gc⁄v_öfo
 
	m__cd
;

50 
__gc⁄v_öfo
 
	m__cd
;

51 
__gc⁄v_°ï_d©a
 
	m__d©a
;

52 } 
	m__comböed
;

53 } 
	t_G_ic⁄v_t
;

55 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

57 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

58 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

60 
	#_G_HAVE_BOOL
 1

	)

64 
	#_G_HAVE_ATEXIT
 1

	)

65 
	#_G_HAVE_SYS_CDEFS
 1

	)

66 
	#_G_HAVE_SYS_WAIT
 1

	)

67 
	#_G_NEED_STDARG_H
 1

	)

68 
	#_G_va_li°
 
__gnuc_va_li°


	)

70 
	#_G_HAVE_PRINTF_FP
 1

	)

71 
	#_G_HAVE_MMAP
 1

	)

72 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

73 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

74 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

76 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

78 
	#_G_OPEN64
 
__›í64


	)

79 
	#_G_LSEEK64
 
__l£ek64


	)

80 
	#_G_MMAP64
 
__mm≠64


	)

81 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

84 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

86 
	#_G_BUFSIZ
 8192

	)

89 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

90 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

91 
	#_G_USING_THUNKS
 1

	)

92 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

93 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

96 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


97 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

99 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm/ioctl.h

6 #i‚de‡
_ASMI386_IOCTL_H


7 
	#_ASMI386_IOCTL_H


	)

27 
	#_IOC_NRBITS
 8

	)

28 
	#_IOC_TYPEBITS
 8

	)

29 
	#_IOC_SIZEBITS
 14

	)

30 
	#_IOC_DIRBITS
 2

	)

32 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

33 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

34 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

35 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

37 
	#_IOC_NRSHIFT
 0

	)

38 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

39 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

40 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

45 
	#_IOC_NONE
 0U

	)

46 
	#_IOC_WRITE
 1U

	)

47 
	#_IOC_READ
 2U

	)

49 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

50 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

51 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

52 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

53 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

56 
__övÆid_size_¨gumít_f‹_IOC
;

57 
	#_IOC_TYPECHECK
(
t
) \

58 (((
t
) == (t[1]) && \

59 (
t
Ë< (1 << 
_IOC_SIZEBITS
)) ? \

60 (
t
Ë: 
__övÆid_size_¨gumít_f‹_IOC
)

	)

63 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

64 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

65 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

66 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

67 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

68 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

69 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

72 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

73 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

74 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

75 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

79 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

80 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

81 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

82 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

83 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm/ioctls.h

1 #i‚de‡
__ARCH_I386_IOCTLS_H__


2 
	#__ARCH_I386_IOCTLS_H__


	)

4 
	~<asm/io˘l.h
>

8 
	#TCGETS
 0x5401

	)

9 
	#TCSETS
 0x5402

	)

10 
	#TCSETSW
 0x5403

	)

11 
	#TCSETSF
 0x5404

	)

12 
	#TCGETA
 0x5405

	)

13 
	#TCSETA
 0x5406

	)

14 
	#TCSETAW
 0x5407

	)

15 
	#TCSETAF
 0x5408

	)

16 
	#TCSBRK
 0x5409

	)

17 
	#TCXONC
 0x540A

	)

18 
	#TCFLSH
 0x540B

	)

19 
	#TIOCEXCL
 0x540C

	)

20 
	#TIOCNXCL
 0x540D

	)

21 
	#TIOCSCTTY
 0x540E

	)

22 
	#TIOCGPGRP
 0x540F

	)

23 
	#TIOCSPGRP
 0x5410

	)

24 
	#TIOCOUTQ
 0x5411

	)

25 
	#TIOCSTI
 0x5412

	)

26 
	#TIOCGWINSZ
 0x5413

	)

27 
	#TIOCSWINSZ
 0x5414

	)

28 
	#TIOCMGET
 0x5415

	)

29 
	#TIOCMBIS
 0x5416

	)

30 
	#TIOCMBIC
 0x5417

	)

31 
	#TIOCMSET
 0x5418

	)

32 
	#TIOCGSOFTCAR
 0x5419

	)

33 
	#TIOCSSOFTCAR
 0x541A

	)

34 
	#FIONREAD
 0x541B

	)

35 
	#TIOCINQ
 
FIONREAD


	)

36 
	#TIOCLINUX
 0x541C

	)

37 
	#TIOCCONS
 0x541D

	)

38 
	#TIOCGSERIAL
 0x541E

	)

39 
	#TIOCSSERIAL
 0x541F

	)

40 
	#TIOCPKT
 0x5420

	)

41 
	#FIONBIO
 0x5421

	)

42 
	#TIOCNOTTY
 0x5422

	)

43 
	#TIOCSETD
 0x5423

	)

44 
	#TIOCGETD
 0x5424

	)

45 
	#TCSBRKP
 0x5425

	)

47 
	#TIOCSBRK
 0x5427

	)

48 
	#TIOCCBRK
 0x5428

	)

49 
	#TIOCGSID
 0x5429

	)

50 
	#TIOCGPTN
 
	`_IOR
('T',0x30, Ë

	)

51 
	#TIOCSPTLCK
 
	`_IOW
('T',0x31, Ë

	)

53 
	#FIONCLEX
 0x5450

	)

54 
	#FIOCLEX
 0x5451

	)

55 
	#FIOASYNC
 0x5452

	)

56 
	#TIOCSERCONFIG
 0x5453

	)

57 
	#TIOCSERGWILD
 0x5454

	)

58 
	#TIOCSERSWILD
 0x5455

	)

59 
	#TIOCGLCKTRMIOS
 0x5456

	)

60 
	#TIOCSLCKTRMIOS
 0x5457

	)

61 
	#TIOCSERGSTRUCT
 0x5458

	)

62 
	#TIOCSERGETLSR
 0x5459

	)

63 
	#TIOCSERGETMULTI
 0x545A

	)

64 
	#TIOCSERSETMULTI
 0x545B

	)

66 
	#TIOCMIWAIT
 0x545C

	)

67 
	#TIOCGICOUNT
 0x545D

	)

68 
	#TIOCGHAYESESP
 0x545E

	)

69 
	#TIOCSHAYESESP
 0x545F

	)

70 
	#FIOQSIZE
 0x5460

	)

73 
	#TIOCPKT_DATA
 0

	)

74 
	#TIOCPKT_FLUSHREAD
 1

	)

75 
	#TIOCPKT_FLUSHWRITE
 2

	)

76 
	#TIOCPKT_STOP
 4

	)

77 
	#TIOCPKT_START
 8

	)

78 
	#TIOCPKT_NOSTOP
 16

	)

79 
	#TIOCPKT_DOSTOP
 32

	)

81 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/socket.h

1 #i‚de‡
_ASM_SOCKET_H


2 
	#_ASM_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_KEEPALIVE
 9

	)

18 
	#SO_OOBINLINE
 10

	)

19 
	#SO_NO_CHECK
 11

	)

20 
	#SO_PRIORITY
 12

	)

21 
	#SO_LINGER
 13

	)

22 
	#SO_BSDCOMPAT
 14

	)

24 
	#SO_PASSCRED
 16

	)

25 
	#SO_PEERCRED
 17

	)

26 
	#SO_RCVLOWAT
 18

	)

27 
	#SO_SNDLOWAT
 19

	)

28 
	#SO_RCVTIMEO
 20

	)

29 
	#SO_SNDTIMEO
 21

	)

32 
	#SO_SECURITY_AUTHENTICATION
 22

	)

33 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

34 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

36 
	#SO_BINDTODEVICE
 25

	)

39 
	#SO_ATTACH_FILTER
 26

	)

40 
	#SO_DETACH_FILTER
 27

	)

42 
	#SO_PEERNAME
 28

	)

43 
	#SO_TIMESTAMP
 29

	)

44 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

46 
	#SO_ACCEPTCONN
 30

	)

49 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

51 
	#SOCK_STREAM
 1

	)

52 
	#SOCK_DGRAM
 2

	)

53 
	#SOCK_RAW
 3

	)

54 
	#SOCK_RDM
 4

	)

55 
	#SOCK_SEQPACKET
 5

	)

56 
	#SOCK_PACKET
 10

	)

61 
	#SOCK_MAX
 (
SOCK_PACKET
+1)

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

36 
	~<löux/limôs.h
>

39 #ifde‡
__undef_NR_OPEN


40 #unde‡
NR_OPEN


41 #unde‡
__undef_NR_OPEN


44 #ifde‡
__undef_LINK_MAX


45 #unde‡
LINK_MAX


46 #unde‡
__undef_LINK_MAX


49 #ifde‡
__undef_OPEN_MAX


50 #unde‡
OPEN_MAX


51 #unde‡
__undef_OPEN_MAX


55 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

57 
	#PTHREAD_KEYS_MAX
 1024

	)

60 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

62 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

65 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

67 
	#PTHREAD_THREADS_MAX
 16384

	)

71 
	#AIO_PRIO_DELTA_MAX
 20

	)

74 
	#PTHREAD_STACK_MIN
 16384

	)

77 
	#TIMER_MAX
 256

	)

80 
	#DELAYTIMER_MAX
 2147483647

	)

83 
	#TTY_NAME_MAX
 32

	)

86 
	#LOGIN_NAME_MAX
 256

	)

	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_MISC


35 
	#CSIGNAL
 0x000000f‡

	)

36 
	#CLONE_VM
 0x00000100

	)

37 
	#CLONE_FS
 0x00000200

	)

38 
	#CLONE_FILES
 0x00000400

	)

39 
	#CLONE_SIGHAND
 0x00000800

	)

40 
	#CLONE_PTRACE
 0x00002000

	)

41 
	#CLONE_VFORK
 0x00004000

	)

43 
	#CLONE_PARENT
 0x00008000

	)

45 
	#CLONE_THREAD
 0x00010000

	)

46 
	#CLONE_NEWNS
 0x00020000

	)

47 
	#CLONE_SYSVSEM
 0x00040000

	)

48 
	#CLONE_SETTLS
 0x00080000

	)

49 
	#CLONE_PARENT_SETTID
 0x00100000

	)

51 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

53 
	#CLONE_DETACHED
 0x00400000

	)

54 
	#CLONE_UNTRACED
 0x00800000

	)

56 
	#CLONE_CHILD_SETTID
 0x01000000

	)

58 
	#CLONE_STOPPED
 0x02000000

	)

62 
	ssched_∑øm


64 
	m__sched_¥i‹ôy
;

67 
	g__BEGIN_DECLS


70 #ifde‡
__USE_MISC


71 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

72 
__Êags
, *
__¨g
Ë
__THROW
;

75 
__END_DECLS


79 #i‡!
deföed
 
__deföed_sched∑øm
 \

80 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

81 
	#__deföed_sched∑øm
 1

	)

83 
	s__sched_∑øm


85 
__sched_¥i‹ôy
;

87 #unde‡
__√ed_sched∑øm


91 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


92 
	#__˝u_£t_t_deföed


	)

94 
	#__CPU_SETSIZE
 1024

	)

95 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

98 
	t__˝u_mask
;

101 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

102 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

107 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

108 } 
	t˝u_£t_t
;

111 
	#__CPU_ZERO
(
˝u£ç
) \

113 
__i
; \

114 
˝u_£t_t
 *
__¨r
 = (
˝u£ç
); \

115 
__i
 = 0; __ò<  (
˝u_£t_t
Ë/  (
__˝u_mask
); ++__i) \

116 
__¨r
->
__bôs
[
__i
] = 0; \

117 
	}
} 0)

	)

118 
	#__CPU_SET
(
˝u
, 
˝u£ç
) \

119 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] |
	`__CPUMASK
 (˝u))

	)

120 
	#__CPU_CLR
(
˝u
, 
˝u£ç
) \

121 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] &~
	`__CPUMASK
 (˝u))

	)

122 
	#__CPU_ISSET
(
˝u
, 
˝u£ç
) \

123 (((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] & 
	`__CPUMASK
 (˝u)Ë!0)

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


24 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

26 
	#__FD_ZERO
(
fd•
) \

28 
__d0
, 
__d1
; \

29 
__asm__
 
	`__vﬁ©ûe__
 ("cld;Ñep; stosl" \

30 : "=c" (
__d0
), "=D" (
__d1
) \

31 : "a" (0), "0" ( (
fd_£t
) \

32 /  (
__fd_mask
)), \

33 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

35 } 0)

	)

37 
	#__FD_SET
(
fd
, 
fd•
) \

38 
__asm__
 
	`__vﬁ©ûe__
 ("btsl %1,%0" \

39 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

40 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
) \

41 : "cc","mem‹y")

	)

42 
	#__FD_CLR
(
fd
, 
fd•
) \

43 
__asm__
 
	`__vﬁ©ûe__
 ("btrl %1,%0" \

44 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

45 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
) \

46 : "cc","mem‹y")

	)

47 
	#__FD_ISSET
(
fd
, 
fd•
) \

48 (
__exãnsi⁄__
 \

49 ({
__ªsu…
; \

50 
__asm__
 
	`__vﬁ©ûe__
 ("btl %1,%2 ; setcb %b0" \

51 : "=q" (
__ªsu…
) \

52 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
), \

53 "m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

55 
__ªsu…
; }))

	)

61 
	#__FD_ZERO
(
£t
) \

63 
__i
; \

64 
fd_£t
 *
__¨r
 = (
£t
); \

65 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

66 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

67 } 0)

	)

68 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

69 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

70 
	#__FD_ISSET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] & 
	`__FDMASK
 (d))

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 
__S32_TYPE


	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

24 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__ölöe
 

191 
	$tﬁowî
 (
__c
Ë
__THROW


193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__ölöe
 

197 
	$touµî
 (
__c
Ë
__THROW


199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_GNU


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_lutimes


	)

20 
	#__°ub_ªvoke


	)

21 
	#__°ub_£éogö


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

6 #ifde‡
__KERNEL__


9 
	#ERESTARTSYS
 512

	)

10 
	#ERESTARTNOINTR
 513

	)

11 
	#ERESTARTNOHAND
 514

	)

12 
	#ENOIOCTLCMD
 515

	)

13 
	#ERESTART_RESTARTBLOCK
 516

	)

16 
	#EBADHANDLE
 521

	)

17 
	#ENOTSYNC
 522

	)

18 
	#EBADCOOKIE
 523

	)

19 
	#ENOTSUPP
 524

	)

20 
	#ETOOSMALL
 525

	)

21 
	#ESERVERFAULT
 526

	)

22 
	#EBADTYPE
 527

	)

23 
	#EJUKEBOX
 528

	)

24 
	#EIOCBQUEUED
 529

	)

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


43 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

44 
	#__THROW
 
	`throw
 ()

	)

46 
	#__THROW


	)

48 
	#__P
(
¨gs
Ë¨g†
__THROW


	)

51 
	#__PMT
(
¨gs
Ë
	)
args

55 
	#__ölöe


	)

57 
	#__THROW


	)

58 
	#__P
(
¨gs
Ë
	)
args

59 
	#__PMT
(
¨gs
Ë
	)
args

61 
	#__c⁄°
 c⁄°

	)

62 
	#__sig√d
 sig√d

	)

63 
	#__vﬁ©ûe
 vﬁ©ûe

	)

70 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

71 
	#__STRING
(
x
Ë#x

	)

74 
	#__±r_t
 *

	)

75 
	#__l⁄g_doubÀ_t
 

	)

79 #ifdef 
__˝lu•lus


80 
	#__BEGIN_DECLS
 "C" {

	)

81 
	#__END_DECLS
 }

	)

83 
	#__BEGIN_DECLS


	)

84 
	#__END_DECLS


	)

93 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


94 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

95 
	#__END_NAMESPACE_STD
 }

	)

96 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

97 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

98 
	#__END_NAMESPACE_C99
 }

	)

99 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

104 
	#__BEGIN_NAMESPACE_STD


	)

105 
	#__END_NAMESPACE_STD


	)

106 
	#__USING_NAMESPACE_STD
(
«me
)

	)

107 
	#__BEGIN_NAMESPACE_C99


	)

108 
	#__END_NAMESPACE_C99


	)

109 
	#__USING_NAMESPACE_C99
(
«me
)

	)

114 #i‚de‡
__BOUNDED_POINTERS__


115 
	#__bounded


	)

116 
	#__unbounded


	)

117 
	#__±rvÆue


	)

122 #i‡
__GNUC_PREREQ
 (2,97)

124 
	#__Êex¨r
 []

	)

126 #ifde‡
__GNUC__


127 
	#__Êex¨r
 [0]

	)

129 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

130 
	#__Êex¨r
 []

	)

133 
	#__Êex¨r
 [1]

	)

149 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

151 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

152 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

153 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

166 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

167 
	#__©åibuã__
(
xyz
Ë

	)

173 #i‡
__GNUC_PREREQ
 (2,96)

174 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

176 
	#__©åibuã_mÆloc__


	)

182 #i‡
__GNUC_PREREQ
 (2,96)

183 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

185 
	#__©åibuã_puª__


	)

191 #i‡
__GNUC_PREREQ
 (3,1)

192 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

193 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

195 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

196 
	#__©åibuã_noölöe__


	)

200 #i‡
__GNUC_PREREQ
 (3,2)

201 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

203 
	#__©åibuã_dïªˇãd__


	)

212 #i‡
__GNUC_PREREQ
 (2,8)

213 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

215 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

222 #i‡
__GNUC_PREREQ
 (2,97)

223 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

224 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

226 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

233 #i‡!
__GNUC_PREREQ
 (2,8)

234 
	#__exãnsi⁄__


	)

238 #i‡!
__GNUC_PREREQ
 (2,92)

239 
	#__ª°ri˘


	)

245 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


246 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

248 #ifde‡
__GNUC__


249 
	#__ª°ri˘_¨r


	)

251 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

252 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

255 
	#__ª°ri˘_¨r


	)

	@/usr/include/asm/errno.h

1 #i‚de‡
_I386_ERRNO_H


2 
	#_I386_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/sockios.h

1 #i‚de‡
__ARCH_I386_SOCKIOS__


2 
	#__ARCH_I386_SOCKIOS__


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

26 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


27 
	~<löuxthªads/öã∫Æs.h
>

31 #i‡
deföed
(
_LIBC
Ë|| deföed(
_IO_MTSAFE_IO
)

32 
±hªad_muãx_t
 
	t__libc_lock_t
;

33 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

34 #ifde‡
__USE_UNIX98


35 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

37 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

39 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

41 
__libc_lock_›aque__
 
	t__libc_lock_t
;

42 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

43 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

47 
±hªad_key_t
 
	t__libc_key_t
;

56 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_t
 
NAME
;

	)

58 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

59 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

60 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

61 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

62 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

63 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

74 #ifde‡
__LT_INITIALIZER_NOT_ZERO


75 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_lock_t
 
NAME
;

	)

82 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

83 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

87 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

88 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

89 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

90 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

92 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

93 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

94 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

95 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

97 #i‡
deföed
 
_LIBC
 && deföed 
IS_IN_lib±hªad


98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
ËFUNC 
	)
ARGS

100 #i‡
deföed
 
__PIC__
 || (deföed 
_LIBC
 && deföed 
SHARED
)

101 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

102 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

103 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

105 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

106 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

109 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc
 && deföed 
SHARED


110 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
) \

111 ({
	`__buûtö_ex≥˘
 (
__libc_±hªad_fun˘i⁄s
.
±r_
##
FUNC
 !
NULL
, 0) \

112 ? 
__libc_±hªad_fun˘i⁄s
.
±r_
##
FUNC
 
ARGS
 : 
ELSE
; })

	)

114 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

119 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc
 && deföed 
SHARED


120 
	#__libc_lock_öô
(
NAME
) \

122 (
NAME
).
__m_cou¡
 = 0; \

123 (
NAME
).
__m_ow√r
 = 
NULL
; \

124 (
NAME
).
__m_köd
 = 
PTHREAD_MUTEX_TIMED_NP
; \

125 (
NAME
).
__m_lock
.
__°©us
 = 0; \

126 (
NAME
).
__m_lock
.
__•ölock
 = 
__LT_SPINLOCK_INIT
; \

127 0; })

	)

129 
	#__libc_lock_öô
(
NAME
) \

130 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

132 
	#__libc_rwlock_öô
(
NAME
) \

133 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

136 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc
 && deföed 
SHARED


137 
	#__libc_lock_öô_ªcursive
(
NAME
) \

139 (
NAME
).
muãx
.
__m_cou¡
 = 0; \

140 (
NAME
).
muãx
.
__m_ow√r
 = 
NULL
; \

141 (
NAME
).
muãx
.
__m_köd
 = 
PTHREAD_MUTEX_RECURSIVE_NP
; \

142 (
NAME
).
muãx
.
__m_lock
.
__°©us
 = 0; \

143 (
NAME
).
muãx
.
__m_lock
.
__•ölock
 = 
__LT_SPINLOCK_INIT
; \

144 0; })

	)

146 
	#__libc_lock_öô_ªcursive
(
NAME
) \

148 i‡(
__±hªad_muãx_öô
 !
NULL
) \

150 
±hªad_muãx©å_t
 
__©å
; \

151 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

152 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

153 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

154 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

156 } 0);

	)

158 
	#__πld_lock_öô_ªcursive
(
NAME
) \

159 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

164 
	#__libc_lock_föi
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

166 
	#__libc_rwlock_föi
(
NAME
) \

167 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

170 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

171 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

174 
	#__libc_lock_lock
(
NAME
) \

175 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

176 
	#__libc_rwlock_rdlock
(
NAME
) \

177 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

178 
	#__libc_rwlock_wæock
(
NAME
) \

179 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

182 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

185 
	#__libc_lock_åylock
(
NAME
) \

186 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

187 
	#__libc_rwlock_åyrdlock
(
NAME
) \

188 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

189 
	#__libc_rwlock_åywæock
(
NAME
) \

190 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

193 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

194 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

195 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

198 
	#__libc_lock_u∆ock
(
NAME
) \

199 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

200 
	#__libc_rwlock_u∆ock
(
NAME
) \

201 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

204 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

206 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


207 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

208 ++((
±hªad_muãx_t
 *)(
lock
))->
__m_cou¡
;

	)

210 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

211 --((
±hªad_muãx_t
 *)(
lock
))->
__m_cou¡
;

	)

213 
	#__πld_lock_lock_ªcursive
(
NAME
) \

214 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

216 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

217 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

219 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

220 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

224 #i‡
PTHREAD_ONCE_INIT
 == 0

227 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

228 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

230 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

231 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

235 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

237 i‡(
__±hªad_⁄˚
 !
NULL
) \

238 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

239 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

240 
	`INIT_FUNCTION
 (); \

241 (
ONCE_CONTROL
) = 2; \

243 } 0)

	)

247 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

248 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

249 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

250 i‡(
_avaû
) { \

251 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

252 }

	)

255 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

256 i‡(
_avaû
) { \

257 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

259 }

	)

262 
	#__libc_˛ónup_íd
(
DOIT
) \

263 i‡(
_avaû
) { \

264 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

265 }

	)

267 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

268 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

269 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

271 
	#__libc_˛ónup_p›
(
execuã
) \

272 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

273 }

	)

276 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

277 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

280 
	#__libc_gë•ecific
(
KEY
) \

281 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

284 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

285 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

289 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

290 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

295 
__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

296 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

298 
__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

300 
__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

302 
__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

304 
__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

306 
__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

308 
__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

310 
__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

311 
__köd
);

313 #ifde‡
__USE_UNIX98


314 
__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

315 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

317 
__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

319 
__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

321 
__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

323 
__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

325 
__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

327 
__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

330 
__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

331 (*
__de°r_fun˘i⁄
) (*));

333 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

334 
__c⁄°
 *
__poöãr
);

336 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

338 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

339 (*
__öô_routöe
) ());

341 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

342 (*
__∑ª¡
) (),

343 (*
__chûd
) ());

349 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


350 #ifde‡
wók_exã∫


351 #i‡
_LIBC


352 
	~<bp-sym.h
>

354 
	#BP_SYM
 (
sym
Ë
	)
sym

356 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

357 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

358 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

359 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

360 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

361 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

362 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

363 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

364 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

365 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

366 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

367 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

368 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

369 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

370 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

371 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

372 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

373 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

374 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

375 
	$wók_exã∫
 (
__±hªad_öôülize
)

376 
	$wók_exã∫
 (
__±hªad_©f‹k
)

377 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push
))

378 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›
))

379 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

380 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

382 #¥agm®
wók
 
__±hªad_muãx_öô


383 #¥agm®
wók
 
__±hªad_muãx_de°roy


384 #¥agm®
wók
 
__±hªad_muãx_lock


385 #¥agm®
wók
 
__±hªad_muãx_åylock


386 #¥agm®
wók
 
__±hªad_muãx_u∆ock


387 #¥agm®
wók
 
__±hªad_muãx©å_öô


388 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


389 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


390 #¥agm®
wók
 
__±hªad_rwlock_de°roy


391 #¥agm®
wók
 
__±hªad_rwlock_rdlock


392 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


393 #¥agm®
wók
 
__±hªad_rwlock_wæock


394 #¥agm®
wók
 
__±hªad_rwlock_åywæock


395 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


396 #¥agm®
wók
 
__±hªad_key_¸óã


397 #¥agm®
wók
 
__±hªad_£t•ecific


398 #¥agm®
wók
 
__±hªad_gë•ecific


399 #¥agm®
wók
 
__±hªad_⁄˚


400 #¥agm®
wók
 
__±hªad_öôülize


401 #¥agm®
wók
 
__±hªad_©f‹k


402 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


403 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


404 #¥agm®
wók
 
_±hªad_˛ónup_push


405 #¥agm®
wók
 
_±hªad_˛ónup_p›


411 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

63 
	g__gc⁄v_°ï
;

64 
	g__gc⁄v_°ï_d©a
;

65 
	g__gc⁄v_lﬂded_obje˘
;

66 
	g__gc⁄v_å™s_d©a
;

70 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

71 
	t__c⁄°
 **, __const *,

72 **, 
	tsize_t
 *, , );

75 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

78 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

79 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

83 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

84 
	t__gc⁄v_°ï_d©a
 *, *,

85 
	t__c⁄°
 *,

86 
	t__c⁄°
 **,

87 
	t__c⁄°
 *, **,

88 
	tsize_t
 *);

91 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

92 
	t__c⁄°
 *,

96 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

97 
	tsize_t
 *);

100 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

101 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

103 
	s__gc⁄v_å™s_d©a


106 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

107 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

108 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

109 *
__d©a
;

110 
__gc⁄v_å™s_d©a
 *
__√xt
;

115 
	s__gc⁄v_°ï


117 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

118 
__c⁄°
 *
__mod«me
;

120 
__cou¡î
;

122 *
__‰om_«me
;

123 *
__to_«me
;

125 
__gc⁄v_f˘
 
__f˘
;

126 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

127 
__gc⁄v_öô_f˘
 
__öô_f˘
;

128 
__gc⁄v_íd_f˘
 
__íd_f˘
;

132 
__mö_√eded_‰om
;

133 
__max_√eded_‰om
;

134 
__mö_√eded_to
;

135 
__max_√eded_to
;

138 
__°©eful
;

140 *
__d©a
;

145 
	s__gc⁄v_°ï_d©a


147 *
__outbuf
;

148 *
__outbu„nd
;

152 
__Êags
;

156 
__övoˇti⁄_cou¡î
;

160 
__öã∫Æ_u£
;

162 
__mb°©e_t
 *
__°©ï
;

163 
__mb°©e_t
 
__°©e
;

167 
__gc⁄v_å™s_d©a
 *
__å™s
;

172 
	s__gc⁄v_öfo


174 
size_t
 
__n°ïs
;

175 
__gc⁄v_°ï
 *
__°ïs
;

176 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

177 } *
	t__gc⁄v_t
;

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 32

	)

7 
	#ARG_MAX
 131072

	)

8 
	#CHILD_MAX
 999

	)

9 
	#OPEN_MAX
 256

	)

10 
	#LINK_MAX
 127

	)

11 
	#MAX_CANON
 255

	)

12 
	#MAX_INPUT
 255

	)

13 
	#NAME_MAX
 255

	)

14 
	#PATH_MAX
 4096

	)

15 
	#PIPE_BUF
 4096

	)

16 
	#XATTR_NAME_MAX
 255

	)

17 
	#XATTR_SIZE_MAX
 65536

	)

18 
	#XATTR_LIST_MAX
 65536

	)

20 
	#RTSIG_MAX
 32

	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‚de‡
__√ed_mb°©e_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #ifde‡
__USE_UNIX98


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

43 
	#__√ed_size_t


	)

44 
	#__√ed_wch¨_t


	)

45 
	#__√ed_NULL


	)

47 
	#__√ed_wöt_t


	)

48 
	~<°ddef.h
>

50 
	~<bôs/wch¨.h
>

54 #i‚de‡
_WINT_T


59 
	#_WINT_T


	)

60 
	twöt_t
;

64 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

65 && 
deföed
 
__WINT_TYPE__


66 
__BEGIN_NAMESPACE_STD


67 
__WINT_TYPE__
 
	twöt_t
;

68 
	g__END_NAMESPACE_STD


73 #i‚de‡
__mb°©e_t_deföed


74 
	#__mb°©e_t_deföed
 1

	)

78 
	m__cou¡
;

81 
wöt_t
 
	m__wch
;

82 
	m__wchb
[4];

83 } 
	m__vÆue
;

84 } 
	t__mb°©e_t
;

86 #unde‡
__√ed_mb°©e_t


91 #ifde‡
_WCHAR_H


93 
__BEGIN_NAMESPACE_C99


95 
__mb°©e_t
 
	tmb°©e_t
;

96 
	g__END_NAMESPACE_C99


97 #ifde‡
__USE_GNU


98 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

101 #i‚de‡
WCHAR_MIN


103 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

104 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

107 #i‚de‡
WEOF


108 
	#WEOF
 (0xffffffffu)

	)

113 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


114 
	~<w˘y≥.h
>

118 
__BEGIN_DECLS


120 
__BEGIN_NAMESPACE_STD


123 
tm
;

127 
	$__USING_NAMESPACE_STD
(
tm
)

128 
__END_NAMESPACE_STD


131 
__BEGIN_NAMESPACE_C99


133 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

134 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

136 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

137 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

138 
__THROW
;

141 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

142 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

144 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
;

149 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

150 
__THROW
 
__©åibuã_puª__
;

152 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

153 
__THROW
 
__©åibuã_puª__
;

154 
__END_NAMESPACE_C99


156 #ifde‡
__USE_GNU


158 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

161 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

162 
size_t
 
__n
Ë
__THROW
;

166 
	~<xloˇÀ.h
>

168 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

169 
__loˇÀ_t
 
__loc
Ë
__THROW
;

171 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

172 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

175 
__BEGIN_NAMESPACE_C99


178 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

182 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

184 
__END_NAMESPACE_C99


186 #ifde‡
__USE_GNU


192 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

193 
__loˇÀ_t
 
__loc
Ë
__THROW
;

198 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

199 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

202 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

205 
__BEGIN_NAMESPACE_C99


207 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

208 
__THROW
 
__©åibuã_puª__
;

210 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

211 
__THROW
 
__©åibuã_puª__
;

212 
__END_NAMESPACE_C99


214 #ifde‡
__USE_GNU


217 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

218 
__THROW
 
__©åibuã_puª__
;

221 
__BEGIN_NAMESPACE_C99


224 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

225 
__THROW
 
__©åibuã_puª__
;

228 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

229 
__THROW
 
__©åibuã_puª__
;

231 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

232 
__THROW
 
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

235 
__THROW
 
__©åibuã_puª__
;

238 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

240 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

243 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

244 
__END_NAMESPACE_C99


246 #ifde‡
__USE_XOPEN


248 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

249 
__THROW
 
__©åibuã_puª__
;

252 #ifde‡
__USE_GNU


254 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

255 
__THROW
 
__©åibuã_puª__
;

259 
__BEGIN_NAMESPACE_C99


261 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

262 
__THROW
 
__©åibuã_puª__
;

265 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

266 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

267 
__THROW
 
__©åibuã_puª__
;

270 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

271 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

275 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

276 
__THROW
;

279 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

280 
__END_NAMESPACE_C99


282 #ifde‡
__USE_GNU


285 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

286 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

287 
__THROW
;

291 
__BEGIN_NAMESPACE_C99


294 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

298 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

302 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

306 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

307 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

308 
mb°©e_t
 *
__p
Ë
__THROW
;

311 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

312 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

315 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

317 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

318 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

319 
__END_NAMESPACE_C99


321 #ifde‡
__USE_EXTERN_INLINES


323 
__ölöe
 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

324 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW


325 {  (
__ps
 !
NULL


326 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

329 
__BEGIN_NAMESPACE_C99


332 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

333 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

334 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

338 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

339 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

340 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

341 
__END_NAMESPACE_C99


344 #ifdef 
__USE_GNU


347 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

348 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

349 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

353 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

354 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

355 
size_t
 
__nwc
, size_à
__Àn
,

356 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

361 #ifde‡
__USE_XOPEN


363 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

367 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

371 
__BEGIN_NAMESPACE_C99


374 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

375 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

377 #ifde‡
__USE_ISOC99


379 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

380 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

381 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

382 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

388 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

389 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

393 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

394 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

395 
__THROW
;

397 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

400 
__exãnsi⁄__


401 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

402 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

403 
__THROW
;

407 
__exãnsi⁄__


408 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

409 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

410 
__ba£
Ë
__THROW
;

412 
__END_NAMESPACE_C99


414 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


417 
__exãnsi⁄__


418 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

419 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

420 
__THROW
;

424 
__exãnsi⁄__


425 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

426 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

427 
__ba£
Ë
__THROW
;

430 #ifde‡
__USE_GNU


444 
	~<xloˇÀ.h
>

448 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

450 
__loˇÀ_t
 
__loc
Ë
__THROW
;

452 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

453 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

454 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

456 
__exãnsi⁄__


457 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

459 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

461 
__exãnsi⁄__


462 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

464 
__ba£
, 
__loˇÀ_t
 
__loc
)

465 
__THROW
;

467 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

468 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

469 
__THROW
;

471 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

473 
__THROW
;

475 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

476 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

477 
__loˇÀ_t
 
__loc
Ë
__THROW
;

483 
	$__wc°od_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__group
)

485 
__THROW
;

486 
	$__wc°of_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__group
)

488 
__THROW
;

489 
	$__wc°ﬁd_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

490 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

491 
__group
Ë
__THROW
;

493 #i‚de‡
__wc°ﬁ_öã∫Æ_deföed


494 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

495 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

496 
__ba£
, 
__group
Ë
__THROW
;

497 
	#__wc°ﬁ_öã∫Æ_deföed
 1

	)

499 #i‚de‡
__wc°oul_öã∫Æ_deföed


500 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈t
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

502 
__ba£
, 
__group
Ë
__THROW
;

503 
	#__wc°oul_öã∫Æ_deföed
 1

	)

505 #i‚de‡
__wc°ﬁl_öã∫Æ_deföed


506 
__exãnsi⁄__


507 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
, 
__group
Ë
__THROW
;

510 
	#__wc°ﬁl_öã∫Æ_deföed
 1

	)

512 #i‚de‡
__wc°ouŒ_öã∫Æ_deföed


513 
__exãnsi⁄__


514 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *

515 
__ª°ri˘
 
__≈å
,

516 
wch¨_t
 **

517 
__ª°ri˘
 
__íd±r
,

518 
__ba£
,

519 
__group
Ë
__THROW
;

520 
	#__wc°ouŒ_öã∫Æ_deföed
 1

	)

524 #i‡
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

526 
__BEGIN_NAMESPACE_C99


528 
__ölöe
 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW


530 {  
	`__wc°od_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

531 
__ölöe
 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
Ë
__THROW


534 {  
	`__wc°ﬁ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

535 
__ölöe
 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

536 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

537 
__ba£
Ë
__THROW


538 {  
	`__wc°oul_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

539 
__END_NAMESPACE_C99


541 #ifde‡
__USE_GNU


542 
__ölöe
 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW


544 {  
	`__wc°of_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

545 
__ölöe
 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

546 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW


547 {  
	`__wc°ﬁd_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

550 
__exãnsi⁄__


551 
__ölöe
 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

553 
__ba£
Ë
__THROW


554 {  
	`__wc°ﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

555 
__exãnsi⁄__


556 
__ölöe
 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *

557 
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__ba£
Ë
__THROW


560 {  
	`__wc°ouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

565 #ifdef 
__USE_GNU


568 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

572 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

573 
__THROW
;

578 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


579 
__BEGIN_NAMESPACE_C99


582 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

589 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

590 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

596 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

600 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
__THROW
 ;

607 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

608 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

609 
__gnuc_va_li°
 
__¨g
)

615 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

616 
__gnuc_va_li°
 
__¨g
)

620 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

621 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

622 
__gnuc_va_li°
 
__¨g
)

623 
__THROW
 ;

630 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

631 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

637 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

641 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
__THROW
 ;

644 
__END_NAMESPACE_C99


647 #ifde‡
__USE_ISOC99


648 
__BEGIN_NAMESPACE_C99


654 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

656 
__gnuc_va_li°
 
__¨g
)

662 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

663 
__gnuc_va_li°
 
__¨g
)

666 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 
__gnuc_va_li°
 
__¨g
)

669 
__THROW
 ;

671 
__END_NAMESPACE_C99


675 
__BEGIN_NAMESPACE_C99


680 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

681 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

687 
wöt_t
 
	`gëwch¨
 ();

694 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

695 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

701 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

709 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

710 
__FILE
 *
__ª°ri˘
 
__°ªam
);

716 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

717 
__FILE
 *
__ª°ri˘
 
__°ªam
);

724 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

725 
__END_NAMESPACE_C99


728 #ifde‡
__USE_GNU


736 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

737 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

745 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

753 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

762 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
__BEGIN_NAMESPACE_C99


790 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

791 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

792 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

793 
__END_NAMESPACE_C99


795 #ifde‡
__USE_GNU


796 
	~<xloˇÀ.h
>

800 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

801 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

802 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

803 
__loˇÀ_t
 
__loc
Ë
__THROW
;

812 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


813 
	#__√ed_iswxxx


	)

814 
	~<w˘y≥.h
>

817 
__END_DECLS


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

	@/usr/include/pthread.h

15 #i‚de‡
_PTHREAD_H


16 
	#_PTHREAD_H
 1

	)

18 
	~<„©uªs.h
>

20 
	~<sched.h
>

21 
	~<time.h
>

23 
	#__√ed_sig£t_t


	)

24 
	~<sig«l.h
>

25 
	~<bôs/±hªadty≥s.h
>

26 
	~<bôs/öô•ö.h
>

29 
	g__BEGIN_DECLS


33 
	#PTHREAD_MUTEX_INITIALIZER
 \

34 {0, 0, 0, 
PTHREAD_MUTEX_TIMED_NP
, 
__LOCK_INITIALIZER
}

	)

35 #ifde‡
__USE_GNU


36 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

37 {0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__LOCK_INITIALIZER
}

	)

38 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

39 {0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__LOCK_INITIALIZER
}

	)

40 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

41 {0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__LOCK_INITIALIZER
}

	)

44 
	#PTHREAD_COND_INITIALIZER
 {
__LOCK_INITIALIZER
, 0, "", 0}

	)

46 #ifde‡
__USE_UNIX98


47 
	#PTHREAD_RWLOCK_INITIALIZER
 \

48 { 
__LOCK_INITIALIZER
, 0, 
NULL
, NULL, NULL, \

49 
PTHREAD_RWLOCK_DEFAULT_NP
, 
PTHREAD_PROCESS_PRIVATE
 }

	)

51 #ifde‡
__USE_GNU


52 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

53 { 
__LOCK_INITIALIZER
, 0, 
NULL
, NULL, NULL, \

54 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, 
PTHREAD_PROCESS_PRIVATE
 }

	)

61 
	mPTHREAD_CREATE_JOINABLE
,

62 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

63 
	mPTHREAD_CREATE_DETACHED


64 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

69 
	mPTHREAD_INHERIT_SCHED
,

70 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

71 
	mPTHREAD_EXPLICIT_SCHED


72 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

77 
	mPTHREAD_SCOPE_SYSTEM
,

78 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

79 
	mPTHREAD_SCOPE_PROCESS


80 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

85 
	mPTHREAD_MUTEX_TIMED_NP
,

86 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

87 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

88 
	mPTHREAD_MUTEX_ADAPTIVE_NP


89 #ifde‡
__USE_UNIX98


91 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

92 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

93 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

94 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


96 #ifde‡
__USE_GNU


98 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_ADAPTIVE_NP


104 
	mPTHREAD_PROCESS_PRIVATE
,

105 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

106 
	mPTHREAD_PROCESS_SHARED


107 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

110 #ifde‡
__USE_UNIX98


113 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

114 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

115 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

116 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_WRITER_NP


120 
	#PTHREAD_ONCE_INIT
 0

	)

124 #ifde‡
__USE_XOPEN2K


126 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

131 
	s_±hªad_˛ónup_buf„r


133 (*
	m__routöe
) (*);

134 *
	m__¨g
;

135 
	m__ˇn˚…y≥
;

136 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

143 
	mPTHREAD_CANCEL_ENABLE
,

144 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

145 
	mPTHREAD_CANCEL_DISABLE


146 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

150 
	mPTHREAD_CANCEL_DEFERRED
,

151 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

152 
	mPTHREAD_CANCEL_ASYNCHRONOUS


153 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

155 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

163 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__thªadp
,

164 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

165 *(*
__°¨t_routöe
) (*),

166 *
__ª°ri˘
 
__¨g
Ë
__THROW
;

169 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
;

172 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

175 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

180 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

186 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

194 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
;

197 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
;

200 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

201 
__dëach°©e
Ë
__THROW
;

204 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

205 *
__dëach°©e
Ë
__THROW
;

208 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

209 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


210 
__∑øm
Ë
__THROW
;

213 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


214 
__©å
,

215 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

216 
__THROW
;

219 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

220 
__THROW
;

223 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


224 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

225 
__THROW
;

228 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

229 
__öhîô
Ë
__THROW
;

232 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


233 
__©å
, *
__ª°ri˘
 
__öhîô
)

234 
__THROW
;

237 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

238 
__THROW
;

241 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

242 *
__ª°ri˘
 
__sc›e
Ë
__THROW
;

244 #ifde‡
__USE_UNIX98


246 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

247 
size_t
 
__gu¨dsize
Ë
__THROW
;

250 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


251 
__©å
, 
size_t
 *
__ª°ri˘
 
__gu¨dsize
)

252 
__THROW
;

259 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

260 *
__°ackaddr
Ë
__THROW
;

263 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


264 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

265 
__THROW
;

267 #ifde‡
__USE_XOPEN2K


271 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

272 
size_t
 
__°acksize
Ë
__THROW
;

275 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

276 **
__ª°ri˘
 
__°ackaddr
,

277 
size_t
 *
__ª°ri˘
 
__°acksize
Ë
__THROW
;

283 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

284 
size_t
 
__°acksize
Ë
__THROW
;

287 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


288 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

289 
__THROW
;

291 #ifde‡
__USE_GNU


295 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
Ë
__THROW
;

302 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

303 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

304 
__THROW
;

307 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

308 *
__ª°ri˘
 
__pﬁicy
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
;

312 #ifde‡
__USE_UNIX98


314 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

317 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

320 #ifde‡
__USE_GNU


325 
	$±hªad_yõld
 (Ë
__THROW
;

332 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

333 
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


334 
__muãx_©å
Ë
__THROW
;

337 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

340 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

343 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

345 #ifde‡
__USE_XOPEN2K


347 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

348 
__c⁄°
 
time•ec
 *
__ª°ri˘


349 
__ab°ime
Ë
__THROW
;

353 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

360 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
Ë
__THROW
;

363 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
Ë
__THROW
;

366 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

367 
__ª°ri˘
 
__©å
,

368 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

371 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

372 
__psh¨ed
Ë
__THROW
;

374 #ifde‡
__USE_UNIX98


378 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

379 
__THROW
;

382 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


383 
__©å
, *
__ª°ri˘
 
__köd
Ë
__THROW
;

391 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

392 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


393 
__c⁄d_©å
Ë
__THROW
;

396 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
Ë
__THROW
;

399 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
Ë
__THROW
;

402 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
Ë
__THROW
;

406 
	`±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

407 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
);

413 
	`±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

414 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

415 
__c⁄°
 
time•ec
 *
__ª°ri˘


416 
__ab°ime
);

421 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
Ë
__THROW
;

424 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
Ë
__THROW
;

427 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

428 
__ª°ri˘
 
__©å
,

429 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

432 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

433 
__psh¨ed
Ë
__THROW
;

436 #ifde‡
__USE_UNIX98


441 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

442 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


443 
__©å
Ë
__THROW
;

446 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

449 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

452 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

454 #ifde‡
__USE_XOPEN2K


456 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

457 
__c⁄°
 
time•ec
 *
__ª°ri˘


458 
__ab°ime
Ë
__THROW
;

462 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

465 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

467 #ifde‡
__USE_XOPEN2K


469 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

470 
__c⁄°
 
time•ec
 *
__ª°ri˘


471 
__ab°ime
Ë
__THROW
;

475 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

481 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
Ë
__THROW
;

484 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
Ë
__THROW
;

487 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

488 
__ª°ri˘
 
__©å
,

489 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

492 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

493 
__psh¨ed
Ë
__THROW
;

496 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
,

497 *
__¥ef
Ë
__THROW
;

500 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

501 
__¥ef
Ë
__THROW
;

504 #ifde‡
__USE_XOPEN2K


510 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

511 
__THROW
;

514 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

517 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

520 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

523 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

528 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

529 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


530 
__©å
, 
__cou¡
Ë
__THROW
;

532 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
Ë
__THROW
;

534 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
Ë
__THROW
;

536 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
Ë
__THROW
;

538 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

539 
__ª°ri˘
 
__©å
,

540 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

542 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

543 
__psh¨ed
Ë
__THROW
;

545 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
Ë
__THROW
;

557 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

558 (*
__de°r_fun˘i⁄
Ë(*)Ë
__THROW
;

561 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

564 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

565 
__c⁄°
 *
__poöãr
Ë
__THROW
;

568 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

577 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

578 (*
__öô_routöe
Ë()Ë
__THROW
;

585 
	$±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
Ë
__THROW
;

589 
	$±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
Ë
__THROW
;

592 
	$±hªad_ˇn˚l
 (
±hªad_t
 
__ˇn˚…hªad
Ë
__THROW
;

597 
	$±hªad_ã°ˇn˚l
 (Ë
__THROW
;

607 
	#±hªad_˛ónup_push
(
routöe
,
¨g
) \

608 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

609 
	`_±hªad_˛ónup_push
 (&
_buf„r
, (
routöe
), (
¨g
));

	)

611 
	`_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

612 (*
__routöe
) (*),

613 *
__¨g
Ë
__THROW
;

618 
	#±hªad_˛ónup_p›
(
execuã
) \

619 
	`_±hªad_˛ónup_p›
 (&
_buf„r
, (
execuã
)); 
	}

	)
}

621 
	$_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

622 
__execuã
Ë
__THROW
;

627 #ifde‡
__USE_GNU


628 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
,
¨g
) \

629 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

630 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
routöe
), (
¨g
));

	)

632 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

633 (*
__routöe
) (*),

634 *
__¨g
Ë
__THROW
;

640 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

641 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
execuã
)); 
	}

	)
}

643 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

644 
__execuã
Ë
__THROW
;

648 #ifde‡
__USE_XOPEN2K


650 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

651 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

656 
	~<bôs/sigthªad.h
>

672 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

673 (*
__∑ª¡
) (),

674 (*
__chûd
Ë()Ë
__THROW
;

679 
	$±hªad_kûl_Ÿhî_thªads_≈
 (Ë
__THROW
;

681 
__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

34 
	#__√ed_wöt_t


	)

35 
	~<°ddef.h
>

36 #i‚de‡
_WINT_T


41 
	#_WINT_T


	)

42 
	twöt_t
;

44 #ifde‡
__USE_ISOC99


45 
	$__USING_NAMESPACE_C99
(
wöt_t
)

47 
__END_NAMESPACE_C99


52 #i‚de‡
WEOF


53 
	#WEOF
 (0xffffffffu)

	)

56 #unde‡
__√ed_iswxxx


61 #i‚de‡
__iswxxx_deföed


62 
	#__iswxxx_deföed
 1

	)

64 
__BEGIN_NAMESPACE_C99


67 
	tw˘y≥_t
;

68 
__END_NAMESPACE_C99


70 #i‚de‡
_ISwbô


75 
	~<ídün.h
>

76 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


77 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

79 
	#_ISwbô
(
bô
) \

80 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

81 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

82 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

83 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

88 
__ISwuµî
 = 0,

89 
__ISwlowî
 = 1,

90 
__ISwÆpha
 = 2,

91 
__ISwdigô
 = 3,

92 
__ISwxdigô
 = 4,

93 
__ISw•a˚
 = 5,

94 
__ISw¥öt
 = 6,

95 
__ISwgøph
 = 7,

96 
__ISwbœnk
 = 8,

97 
__ISw˙ål
 = 9,

98 
__ISwpun˘
 = 10,

99 
__ISwÆnum
 = 11,

101 
_ISwuµî
 = 
	`_ISwbô
 (
__ISwuµî
),

102 
_ISwlowî
 = 
	`_ISwbô
 (
__ISwlowî
),

103 
_ISwÆpha
 = 
	`_ISwbô
 (
__ISwÆpha
),

104 
_ISwdigô
 = 
	`_ISwbô
 (
__ISwdigô
),

105 
_ISwxdigô
 = 
	`_ISwbô
 (
__ISwxdigô
),

106 
_ISw•a˚
 = 
	`_ISwbô
 (
__ISw•a˚
),

107 
_ISw¥öt
 = 
	`_ISwbô
 (
__ISw¥öt
),

108 
_ISwgøph
 = 
	`_ISwbô
 (
__ISwgøph
),

109 
_ISwbœnk
 = 
	`_ISwbô
 (
__ISwbœnk
),

110 
_ISw˙ål
 = 
	`_ISwbô
 (
__ISw˙ål
),

111 
_ISwpun˘
 = 
	`_ISwbô
 (
__ISwpun˘
),

112 
_ISwÆnum
 = 
	`_ISwbô
 (
__ISwÆnum
)

117 
__BEGIN_DECLS


119 
__BEGIN_NAMESPACE_C99


126 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

132 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

135 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

139 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

143 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

148 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

161 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

166 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

176 #ifde‡
__USE_ISOC99


177 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

186 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

190 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

191 
__END_NAMESPACE_C99


198 
__BEGIN_NAMESPACE_C99


201 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

202 
__END_NAMESPACE_C99


203 #ifde‡
__USE_GNU


204 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

207 
__BEGIN_NAMESPACE_C99


209 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

212 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

213 
__END_NAMESPACE_C99


215 
__END_DECLS


222 #ifde‡
_WCTYPE_H


228 
__BEGIN_DECLS


230 
__BEGIN_NAMESPACE_C99


233 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

236 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

237 
__END_NAMESPACE_C99


239 #ifde‡
__USE_GNU


241 
	~<xloˇÀ.h
>

245 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

251 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

254 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

258 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

262 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

267 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

290 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

295 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

299 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

300 
__THROW
;

304 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

305 
__THROW
;

313 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

316 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

320 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

321 
__THROW
;

324 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

325 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

329 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/bits/initspin.h

23 
	#__LT_SPINLOCK_INIT
 0

	)

26 
	#__LOCK_INITIALIZER
 { 0, 
__LT_SPINLOCK_INIT
 }

	)

27 
	#__ALT_LOCK_INITIALIZER
 { 0, 
__LT_SPINLOCK_INIT
 }

	)

28 
	#__ATOMIC_INITIALIZER
 { 0, 
__LT_SPINLOCK_INIT
 }

	)

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_time•ec


	)

29 
	~<time.h
>

32 
	~<bôs/sched.h
>

34 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

37 
__BEGIN_DECLS


40 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

41 
__THROW
;

44 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

47 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

48 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

51 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

54 
	$sched_yõld
 (Ë
__THROW
;

57 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

66 #ifde‡
__USE_GNU


68 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

69 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET
 (˝u, cpu£ç)

	)

70 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR
 (˝u, cpu£ç)

	)

71 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET
 (˝u, cpu£ç)

	)

72 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO
 (˝u£ç)

	)

76 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
__c⁄°
 
˝u_£t_t
 *
__mask
)

77 
__THROW
;

80 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
˝u_£t_t
 *
__mask
Ë
__THROW
;

83 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #ifde‡
__USE_XOPEN


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #i‚de‡
__uid_t_deföed


66 
__uid_t
 
	tuid_t
;

67 
	#__uid_t_deföed


	)

73 (*
	t__sigh™dÀr_t
) ();

78 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

79 
__THROW
;

80 #ifde‡
__USE_GNU


81 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

82 
__THROW
;

88 
__BEGIN_NAMESPACE_STD


89 #ifde‡
__USE_BSD


90 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
Ë
__THROW
;

93 #ifde‡
__REDIRECT


94 
__sigh™dÀr_t
 
	`__REDIRECT
 (
sig«l
,

95 (
__sig
,

96 
__sigh™dÀr_t
 
__h™dÀr
Ë
__THROW
,

97 
__sysv_sig«l
);

99 
	#sig«l
 
__sysv_sig«l


	)

102 
__END_NAMESPACE_STD


104 #ifde‡
__USE_XOPEN


107 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
Ë
__THROW
;

113 #ifde‡
__USE_POSIX


114 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

117 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


121 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

124 
__BEGIN_NAMESPACE_STD


126 
	$øi£
 (
__sig
Ë
__THROW
;

127 
__END_NAMESPACE_STD


129 #ifde‡
__USE_SVID


131 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
Ë
__THROW
;

132 
	$gsig«l
 (
__sig
Ë
__THROW
;

135 #ifde‡
__USE_MISC


137 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

149 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

151 #ifde‡
__USE_BSD


154 
	$sig∑u£
 (
__mask
Ë
__THROW
;

155 
	#sig∑u£
(
mask
Ë
	`__sig∑u£
 ((mask), 0)

	)

157 #ifde‡
__USE_XOPEN


158 #ifde‡
__GNUC__


159 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

162 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

167 #ifde‡
__USE_BSD


174 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

177 
	$sigblock
 (
__mask
Ë
__THROW
;

180 
	$sig£tmask
 (
__mask
Ë
__THROW
;

183 
	$siggëmask
 (Ë
__THROW
;

187 #ifde‡
__USE_MISC


188 
	#NSIG
 
_NSIG


	)

191 #ifde‡
__USE_GNU


192 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

196 #ifde‡
__USE_BSD


197 
__sigh™dÀr_t
 
	tsig_t
;

200 #ifde‡
__USE_POSIX


202 #ifde‡
__USE_POSIX199309


204 
	#__√ed_time•ec


	)

205 
	~<time.h
>

208 
	~<bôs/sigöfo.h
>

212 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
;

215 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
;

218 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
;

221 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
;

224 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
;

226 #ifde‡
__USE_GNU


228 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
;

231 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

232 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
;

235 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

236 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
;

241 
	~<bôs/siga˘i⁄.h
>

244 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

245 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

252 
	`sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
);

255 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

256 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

259 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
;

266 
	`sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
);

268 #ifde‡
__USE_POSIX199309


273 
	`sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

274 
sigöfo_t
 *
__ª°ri˘
 
__öfo
);

281 
	`sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

282 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

283 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
);

287 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

288 
__THROW
;

293 #ifde‡
__USE_BSD


297 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

298 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

301 
	ssigvec


303 
__sigh™dÀr_t
 
sv_h™dÀr
;

304 
sv_mask
;

306 
sv_Êags
;

307 
	#sv_⁄°ack
 
sv_Êags


	)

311 
	#SV_ONSTACK
 (1 << 0)

	)

312 
	#SV_INTERRUPT
 (1 << 1)

	)

313 
	#SV_RESETHAND
 (1 << 2)

	)

321 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

322 
sigvec
 *
__ovec
Ë
__THROW
;

326 
	~<bôs/sigc⁄ãxt.h
>

329 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

334 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


339 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

341 
	~<bôs/sig°ack.h
>

342 #ifde‡
__USE_XOPEN


344 
	~<sys/uc⁄ãxt.h
>

350 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
Ë
__THROW
;

354 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

355 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

359 #ifde‡
__USE_XOPEN_EXTENDED


363 
	$sighﬁd
 (
__sig
Ë
__THROW
;

366 
	$sigªl£
 (
__sig
Ë
__THROW
;

369 
	$sigign‹e
 (
__sig
Ë
__THROW
;

372 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

375 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


378 
	~<bôs/±hªadty≥s.h
>

379 
	~<bôs/sigthªad.h
>

386 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

388 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

392 
__END_DECLS


	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


23 #i‚de‡
sigc⁄ãxt_°ru˘


26 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

28 
	~<asm/sigc⁄ãxt.h
>

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

27 
	~<bôs/sigc⁄ãxt.h
>

31 
	tgªg_t
;

34 
	#NGREG
 19

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_GS
 = 0,

44 
	#REG_GS
 
REG_GS


	)

45 
	mREG_FS
,

46 
	#REG_FS
 
REG_FS


	)

47 
	mREG_ES
,

48 
	#REG_ES
 
REG_ES


	)

49 
	mREG_DS
,

50 
	#REG_DS
 
REG_DS


	)

51 
	mREG_EDI
,

52 
	#REG_EDI
 
REG_EDI


	)

53 
	mREG_ESI
,

54 
	#REG_ESI
 
REG_ESI


	)

55 
	mREG_EBP
,

56 
	#REG_EBP
 
REG_EBP


	)

57 
	mREG_ESP
,

58 
	#REG_ESP
 
REG_ESP


	)

59 
	mREG_EBX
,

60 
	#REG_EBX
 
REG_EBX


	)

61 
	mREG_EDX
,

62 
	#REG_EDX
 
REG_EDX


	)

63 
	mREG_ECX
,

64 
	#REG_ECX
 
REG_ECX


	)

65 
	mREG_EAX
,

66 
	#REG_EAX
 
REG_EAX


	)

67 
	mREG_TRAPNO
,

68 
	#REG_TRAPNO
 
REG_TRAPNO


	)

69 
	mREG_ERR
,

70 
	#REG_ERR
 
REG_ERR


	)

71 
	mREG_EIP
,

72 
	#REG_EIP
 
REG_EIP


	)

73 
	mREG_CS
,

74 
	#REG_CS
 
REG_CS


	)

75 
	mREG_EFL
,

76 
	#REG_EFL
 
REG_EFL


	)

77 
	mREG_UESP
,

78 
	#REG_UESP
 
REG_UESP


	)

79 
	mREG_SS


80 
	#REG_SS
 
REG_SS


	)

85 
	s_libc_Âªg


87 
	msignifiˇnd
[4];

88 
	mexp⁄ít
;

91 
	s_libc_Â°©e


93 
	mcw
;

94 
	msw
;

95 
	mèg
;

96 
	mùoff
;

97 
	mcs£l
;

98 
	md©aoff
;

99 
	md©a£l
;

100 
_libc_Âªg
 
	m_°
[8];

101 
	m°©us
;

105 
_libc_Â°©e
 *
	tÂªg£t_t
;

110 
gªg£t_t
 
	mgªgs
;

113 
Âªg£t_t
 
	mÂªgs
;

114 
	mﬁdmask
;

115 
	m¸2
;

116 } 
	tmc⁄ãxt_t
;

119 
	suc⁄ãxt


121 
	muc_Êags
;

122 
uc⁄ãxt
 *
	muc_lök
;

123 
°ack_t
 
	muc_°ack
;

124 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

125 
__sig£t_t
 
	muc_sigmask
;

126 
_libc_Â°©e
 
	m__Âªgs_mem
;

127 } 
	tuc⁄ãxt_t
;

	@/usr/include/asm/sigcontext.h

1 #i‚de‡
_ASMi386_SIGCONTEXT_H


2 
	#_ASMi386_SIGCONTEXT_H


	)

4 
	~<löux/compûî.h
>

20 
	s_Âªg
 {

21 
	msignifiˇnd
[4];

22 
	mexp⁄ít
;

25 
	s_Âxªg
 {

26 
	msignifiˇnd
[4];

27 
	mexp⁄ít
;

28 
	m∑ddög
[3];

31 
	s_xmmªg
 {

32 
	mñemít
[4];

35 
	s_Â°©e
 {

37 
	mcw
;

38 
	msw
;

39 
	mèg
;

40 
	mùoff
;

41 
	mcs£l
;

42 
	md©aoff
;

43 
	md©a£l
;

44 
_Âªg
 
	m_°
[8];

45 
	m°©us
;

46 
	mmagic
;

49 
	m_fx§_ív
[6];

50 
	mmxc§
;

51 
	mª£rved
;

52 
_Âxªg
 
	m_fx§_°
[8];

53 
_xmmªg
 
	m_xmm
[8];

54 
	m∑ddög
[56];

57 
	#X86_FXSR_MAGIC
 0x0000

	)

59 
	ssigc⁄ãxt
 {

60 
	mgs
, 
	m__gsh
;

61 
	mfs
, 
	m__fsh
;

62 
	mes
, 
	m__esh
;

63 
	mds
, 
	m__dsh
;

64 
	medi
;

65 
	mesi
;

66 
	mebp
;

67 
	me•
;

68 
	mebx
;

69 
	medx
;

70 
	mecx
;

71 
	móx
;

72 
	må≠no
;

73 
	mîr
;

74 
	meù
;

75 
	mcs
, 
	m__csh
;

76 
	meÊags
;

77 
	me•_©_sig«l
;

78 
	mss
, 
	m__ssh
;

79 
_Â°©e
 
__u£r
 * 
	mÂ°©e
;

80 
	mﬁdmask
;

81 
	m¸2
;

	@/usr/include/linux/compiler.h

1 #i‚de‡
__LINUX_COMPILER_H


2 
	#__LINUX_COMPILER_H


	)

4 #ifde‡
__CHECKER__


5 
	#__u£r
 
	`__©åibuã__
((
nodîef
, 
	`addªss_•a˚
(1)))

	)

6 
	#__kî√l


	)

8 
	#__u£r


	)

9 
	#__kî√l


	)

12 #i‡!
deföed
(
__KERNEL__
)

17 
	~<sys/cdefs.h
>

18 
	#__dïªˇãd


	)

21 #i‡
__GNUC__
 > 3

22 
	~<löux/compûî-gcc+.h
>

23 #ñi‡
__GNUC__
 == 3

24 
	~<löux/compûî-gcc3.h
>

25 #ñi‡
__GNUC__
 == 2

26 
	~<löux/compûî-gcc2.h
>

28 #îr‹ 
S‹ry
, 
your
 
compûî
 
is
 
too
 
ﬁd
/
nŸ
 
ªcognized
.

34 #ifde‡
__INTEL_COMPILER


35 
	~<löux/compûî-öãl.h
>

44 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

45 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

53 #i‚de‡
__dïªˇãd


54 
	#__dïªˇãd


	)

68 #i‚de‡
__©åibuã_u£d__


69 
	#__©åibuã_u£d__


	)

82 #i‚de‡
__©åibuã_puª__


83 
	#__©åibuã_puª__


	)

87 #i‚de‡
b¨rõr


88 
	#b¨rõr
(Ë
	`__mem‹y_b¨rõr
()

	)

91 #i‚de‡
RELOC_HIDE


92 
	#RELOC_HIDE
(
±r
, 
off
) \

93 ({ 
__±r
; \

94 
__±r
 = (Ë(
±r
); \

95 (
	`ty≥of
(
±r
)Ë(
__±r
 + (
off
)); })

	)

	@/usr/include/linux/compiler-gcc+.h

7 
	~<löux/compûî-gcc.h
>

9 
	#ölöe
 
__ölöe__
 
	`__©åibuã__
((
Æways_ölöe
))

	)

10 
	#__ölöe__
 
__ölöe__
 
	`__©åibuã__
((
Æways_ölöe
))

	)

11 
	#__ölöe
 
__ölöe__
 
	`__©åibuã__
((
Æways_ölöe
))

	)

12 
	#__dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

13 
	#__©åibuã_u£d__
 
	`__©åibuã__
((
__u£d__
))

	)

14 
	#__©åibuã_puª__
 
	`__©åibuã__
((
puª
))

	)

	@/usr/include/linux/compiler-gcc2.h

9 
	~<löux/compûî-gcc.h
>

11 #i‡
__GNUC_MINOR__
 < 96

12 
	#__buûtö_ex≥˘
(
x
, 
ex≥˘ed_vÆue
Ë(x)

	)

15 
	#__©åibuã_u£d__
 
	`__©åibuã__
((
__unu£d__
))

	)

21 #i‡
__GNUC_MINOR__
 >= 96

22 
	#__©åibuã_puª__
 
	`__©åibuã__
((
puª
))

	)

	@/usr/include/linux/compiler-gcc3.h

4 
	~<löux/compûî-gcc.h
>

6 #i‡
__GNUC_MINOR__
 >= 1

7 
	#ölöe
 
__ölöe__
 
	`__©åibuã__
((
Æways_ölöe
))

	)

8 
	#__ölöe__
 
__ölöe__
 
	`__©åibuã__
((
Æways_ölöe
))

	)

9 
	#__ölöe
 
__ölöe__
 
	`__©åibuã__
((
Æways_ölöe
))

	)

12 #i‡
__GNUC_MINOR__
 > 0

13 
	#__dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

16 #i‡
__GNUC_MINOR__
 >= 3

17 
	#__©åibuã_u£d__
 
	`__©åibuã__
((
__u£d__
))

	)

19 
	#__©åibuã_u£d__
 
	`__©åibuã__
((
__unu£d__
))

	)

22 
	#__©åibuã_puª__
 
	`__©åibuã__
((
puª
))

	)

	@/usr/include/linux/compiler-intel.h

3 #ifde‡
__ECC


9 
	~<asm/öåösics.h
>

14 #unde‡
b¨rõr


15 #unde‡
RELOC_HIDE


17 
	#b¨rõr
(Ë
	`__mem‹y_b¨rõr
()

	)

19 
	#RELOC_HIDE
(
±r
, 
off
) \

20 ({ 
__±r
; \

21 
__±r
 = (Ë(
±r
); \

22 (
	`ty≥of
(
±r
)Ë(
__±r
 + (
off
)); })

	)

	@/usr/include/linux/compiler-gcc.h

10 
	#b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

14 
	#RELOC_HIDE
(
±r
, 
off
) \

15 ({ 
__±r
; \

16 
	`__asm__
 ("" : "=g"(
__±r
Ë: "0"(
±r
)); \

17 (
	`ty≥of
(
±r
)Ë(
__±r
 + (
off
)); })

	)

	@
1
.
1
/usr/include
126
2997
AudioCard.cc
AudioCard.h
Error.h
LameEncoder.cc
LameEncoder.h
Streamer.cc
Streamer.h
Url.cc
Url.h
bv.c
bv.h
file.c
file.h
lame-test.cc
lameflags.h
mp3-read.c
mp3-sf.c
mp3-write.c
mp3.c
mp3.h
mp3stream.cc
urlTest.cc
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/lame/lame.h
/usr/include/limits.h
/usr/include/linux/soundcard.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/ioctl.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/in.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/netdb.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/siginfo.h
/usr/include/bits/socket.h
/usr/include/bits/stat.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/ioctl.h
/usr/include/rpc/netdb.h
/usr/include/stdint.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/asm/socket.h
/usr/include/bits/endian.h
/usr/include/bits/local_lim.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/sockaddr.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/wchar.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/sys/cdefs.h
/usr/include/asm/errno.h
/usr/include/asm/sockios.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/linux/limits.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/bits/initspin.h
/usr/include/bits/sigthread.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/signum.h
/usr/include/bits/sigstack.h
/usr/include/sys/ucontext.h
/usr/include/asm/sigcontext.h
/usr/include/linux/compiler.h
/usr/include/linux/compiler-gcc+.h
/usr/include/linux/compiler-gcc2.h
/usr/include/linux/compiler-gcc3.h
/usr/include/linux/compiler-intel.h
/usr/include/linux/compiler-gcc.h
